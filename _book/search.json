[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Enseñar Tecnología en Comunidad (2e)",
    "section": "",
    "text": "Preface\nEste es el sitio web de la segunda edición en progreso y en castellano de Enseñar Tecnología en Comunidad.\nEn cada capítulo vas a encontrar una nota al inicio que te indica en que estado está: completo, en perfeccionamiento, en re-estructuración o en borrador. Esto te ayudará a decidir leer el contenido y hacer tus aportes (siempre estamos muy agradecidas y agradecidos por el feedback que nos puedan dar).\nEn este libro usamos un Código de conducta para contribuir. Si contribuyes a este libro estás aceptado acatar sus condiciones."
  },
  {
    "objectID": "rules.html",
    "href": "rules.html",
    "title": "1  Las reglas",
    "section": "",
    "text": "Segunda edición\n\n\n\nEstás leyendo la segunda edición en progreso y en castellano de Enseñar Tecnología en Comunidad (Teaching Tech Together). Este capítulo está prácticamente terminado y sólo necesita una última revisión.\n\n\n\nSé amable: todo lo demás son detalles.\nRecuerda que tú no eres tus estudiantes…\n…que la mayoría de la gente prefiere fracasar antes que cambiar…\n…y que el 90% de la magia consiste en saber una cosa más (que tu público).\nNunca enseñes solo/a.\nNunca dudes en sacrificar la verdad por la claridad.\nHaz de cada error una lección.\nRecuerda que ninguna clase sobrevive al primer contacto con estudiantes…\n…que cada clase es demasiado corta para quien enseña y demasiado larga para quien la recibe…\n…y que nadie tendrá más entusiasmo que tú por tu clase."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "2  Introduction",
    "section": "",
    "text": "Enseñar y aprender ocurren en muchos ámbitos, no solo en las aulas de las instituciones educativas formales, como la escuela o las universidades. Probablemente ya estás enseñando, no sólo como docente en alguna de estas instituciones o en una comunidad de práctica, también respondiendo preguntas, mentoreando una persona que recién inicia, creando contenido como libros, artículos en la web y videos, o dando charlas. Y probablemente también has usado estos recursos para aprender. Incluso podemos aprender sin necesidad que haya alguien enseñándonos.\nLa enseñanza y el aprendizaje están estrechamente relacionados, el protagonista del aprendizaje es la persona que aprende y la enseñanza es el modo más efectivo de promover el aprendizaje (Geary2007?), allí es donde las personas que enseñan entran en acción, para facilitar ese aprendizaje utilizando técnicas y herramientas adecuadas. Como veremos en detalle en el capítulo  para enseñar debemos tener conocimientos del tema que queremos enseñar y conocimientos sobre como enseñar ese tema en particular. Saber sobre un tema y saber como enseñar ese tema son dos tipos de conocimientos diferentes y como veremos en el capítulo , ser una persona experta en un tema, no asegura que lo enseñaremos bien.\nMuchas de las personas que enseñan diferentes tipos de tecnologías, como programación, robótica y ciencia de datos no han recibido entrenamiento sobre como enseñar. Esto ocurre tanto con docentes de instituciones educativas formales (Justice2017?) (Kane2002?) como con docentes en grupos y comunidades de práctica, donde las personas enseñan y aprenden en un ambiente con características diferentes a las aulas tradicionales. Muchas veces estas personas aprender a enseñar por su cuenta o basan su enseñanza en experiencias personales (Kane2002?) (RuizMartín2021?), que no siempre están alineadas con la evidencia científica.\nHay una forma más conveniente.\nExiste mucho conocimiento sobre como aprendemos y sobre cual es la mejor manera de enseñar. La ciencia de la educación investiga diversas teorías sobre la enseñanza y el aprendizaje buscando evidencias que las respalden (o las refuten). Con este conocimiento, la comunidad educativa en general, puede tomar mejores decisiones fundamentadas en evidencia científica. El problema es que en general acceder a ese conocimiento científico es difícil, por diversas razones; desde el acceso restringido al material pasando por un lenguaje muy especializado, solo adecuado para expertos, hasta el hecho de no conocer lo suficiente para saber qué y dónde buscar. Y una vez que lo encontramos, suele ser complejo poder generar acciones concretas que podamos aplicar en el aula utilizando ese conocimiento.\nCreemos que la ciencia tiene sentido cuando sus desarrollos y descubrimientos son utilizados y ayudan a mejorar la vida de las personas y por eso el objetivo de este libro es contribuir a divulgar los resultados más importantes y recientes de la investigación sobre enseñanza y aprendizaje en tecnología. Intentamos presentar estos conocimientos de forma amena y pragmática, con un lenguaje adecuado para un público general. El éxito sostenido de iniciativas como <FIXME agregar link The Carpentries>, y <MetaDocencia, FIXME agregar link> que enseñan como enseñar con materiales accesibles, son una muestra del interés en la comunidad educativa de conocer y utilizar prácticas de enseñanza eficaces.\nCreemos que conocer una serie de conceptos básicos, sobre psicología cognitiva, diseño instruccional, inclusión, accesibilidad y organización comunitaria te puede ayudar a aumentar tu efectividad como docente.\nEste libro presenta ideas clave que puedes usar inmediatamente, explica por qué creemos que son ciertas y te señala otros recursos que te ayudarán a profundizar tus conocimientos.\nEsperamos que esto te de elementos para basar tus decisiones en evidencia científica, teniendo en cuenta tu contexto y tus estudiantes.\nMuchos de los conceptos y técnicas presentados en este libro son útiles para enseñar cualquier tema y para enseñar en el aula presencial o virtual. Sin embargo, como este libro se enfoca en enseñar tecnología presentaremos evidencia y ejemplos orientados a la enseñanza de este tipo de contenido."
  },
  {
    "objectID": "intro.html#intro-audience",
    "href": "intro.html#intro-audience",
    "title": "2  Introducción",
    "section": "2.1 Quién eres",
    "text": "2.1 Quién eres\nLa ?sec-process-personas explica cómo averiguar quiénes son tus estudiantes. Los cuatro tipos de personas a las que está destinado este libro son enseñante final <FIXME(llamada al glosario acá)>: la enseñanza no es su ocupación primaria, tienen poco o ningún conocimiento sobre pedagogía y posiblemente no enseñan en clases de instituciones educativas formales.\n\nEmilia\n\nestá entrenada como bibliotecaria y actualmente trabaja como diseñadora web y gestora de proyectos en una pequeña empresa consultora. En su tiempo libre, ayuda a impartir clases de diseño para mujeres que ingresan a la tecnología como una segunda carrera. Se encuentra reclutando colegas para dar más clases en su área y quiere saber cómo preparar lecciones que otras personas puedan usar, a la par de hacer crecer una organización de enseñanza voluntaria.\n\nDavid\n\nes un programador profesional, cuyos dos hijos adolescentes asisten a una escuela que no ofrece clases de programación. Se ha ofrecido como voluntario para dirigir un club de programación mensual después del horario de clases. A pesar de que expone presentaciones frecuentemente a sus colegas, no tiene experiencia enseñando en el aula. Quiere aprender a construir lecciones efectivas en un tiempo razonable, y le gustaría aprender más acerca de los pros y contras de las clases en línea en las que cada asistente cursa a su propio ritmo.\n\nSamira\n\nes una estudiante de robótica, que está considerando ser docente luego de graduarse. Quiere ayudar en unos talleres de robótica que se dictan los fines de semana, pero nunca ha enseñado antes, por lo que siente síndrome de la impostora{síndrome del impostor/a}. Quiere aprender más acerca de educación en general para decidir si la docencia es para ella y también está buscando sugerencias específicas que la ayuden a dar clase de forma más efectiva.\n\nRené\n\nes docente de ciencias de la computación en una universidad. Ha estado enseñando cursos de grado sobre sistemas operativos por seis años y cada vez se convence más de que tiene que haber una mejor manera de enseñar. El único entrenamiento disponible a través de su universidad está relacionado con la herramienta del sistema de gestión del aprendizaje en línea, por lo que quiere descubrir qué otro tipo de entrenamiento podría pedir.\n\n\nEstas personas tienen una variedad de conocimientos técnicos previos y alguna experiencia previa con la enseñanza, pero carecen de entrenamiento formal sobre enseñar y aprender, diseño de lecciones accesibles u organización comunitaria. La mayoría trabaja con estudiantes free-range  <FIXME: agregar nota al pie o al glosario> y están enfocadas en adolescentes y personas adultas todas estas personas tienen tiempo y recursos limitados. Esperamos que nuestro cuarteto use este material de la siguiente manera:\n\nEmilia\n\ntomará parte de un grupo de lectura semanal en línea con sus voluntarias.\n\nDavid\n\nva a abordar parte de este libro en un taller de un día durante un fin de semana y estudiará el resto por su cuenta.\n\nSamira\n\nusará este libro en un curso de grado de un semestre que incluirá tareas, un proyecto y un examen final.\n\nRené\n\nleerá el libro por su cuenta en su oficina o mientras viaja en el transporte público, deseando entretanto que las universidades hagan más para apoyar la enseñanza de alta calidad.\n\n\n\n2.1.1 Re-uso\nAlgunas secciones de este libro fueron originalmente creadas para [el programa de entrenamiento de instructores/as de Software Carpentry][carpentries-instructor]. Cualquier parte del libro puede ser libremente distribuida y re-utilizada bajo la licencia Creative Commons Atribución-NoComercial 4.0 (?sec-license). Puedes usar la versión online disponible en http://teachtogether.tech/es/ en cualquier clase (gratuita o paga), y puedes citar pequeños extractos bajo el criterio de [uso justo][uso-justo], pero no puedes re-publicar largos fragmentos en trabajos comerciales sin permiso previo.\nLas contribuciones, correcciones y sugerencias son bienvenidas, y cada vez que una nueva versión del libro sea publicada se les agradecerá a quienes contribuyan. Por favor consulta la sección de ?sec-joining para conocer los detalles sobre como contribuir y el ?sec-conduct para conocer nuestro código de conducta."
  },
  {
    "objectID": "intro.html#intro-acknowledgments",
    "href": "intro.html#intro-acknowledgments",
    "title": "2  Introducción",
    "section": "2.2 Agradecimientos",
    "text": "2.2 Agradecimientos\nEsta segunda edición de este libro no existiría sin las contribuciones de\nTambién estamos agradecidos a Lukas Blakk por el logotipo, y a toda aquella persona que ha usado este material a lo largo de los años. Cualquier error que permanezca es nuestro."
  },
  {
    "objectID": "intro.html#intro-exercises",
    "href": "intro.html#intro-exercises",
    "title": "2  Introducción",
    "section": "2.3 Ejercicios",
    "text": "2.3 Ejercicios\nCada capítulo finaliza con una variedad de ejercicios que incluyen un formato sugerido y cuánto tiempo toma usualmente hacerlos en persona. Muchos pueden ser usados en otros formatos —en particular, si estás avanzando en este libro por tu cuenta, puedes hacer muchos de los ejercicios que son destinados a grupos— y siempre puedes dedicar más tiempo que el sugerido para trabajar en un ejercicio.\nSi estás usando este material para formar docentes, puedes darles con antelación los siguientes ejercicios a quienes participen, para que tengan una idea de quiénes son y cuál es la mejor manera en que les puedes ayudar. Por favor lee las advertencias en la ?sec-classroom-prior antes de pedirles hacer estos ejercicios.\n\n2.3.1 Altos y bajos (clase completa/5’)\nEscribe respuestas breves a las siguientes preguntas y compártelas con tus pares. (Si están tomando notas colaborativas en línea como se describe en la , puedes escribir tus respuestas allí.)\n\n¿Cuál es la mejor clase o taller que alguna vez hayas tomado? ¿Qué la hacía tan buena?\n¿Cuál fue la peor? ¿Qué la hacía tan mala?\n\n\n\n2.3.2 Conócete (clase completa/5’)\nComparte respuestas breves a las siguientes preguntas con tus pares. Guarda tus respuestas para que puedas regresar a ellas como referencia a medida que avanzas en el estudio de este libro.\n\n¿Qué es lo que más quieres enseñar?\n¿A quiénes tienes más ganas de enseñarles?\n¿Por qué quieres enseñar?\n¿Cómo sabrás si estás enseñando bien?\n¿Qué es lo que más quieres aprender acerca de enseñanza y aprendizaje?\n¿Qué cosa específica crees que es cierta acerca de enseñanza y aprendizaje?\n\n\n\n2.3.3 ¿Por qué aprender a programar? (individual/20’)\nLas personas que hacen política, se dedican a la educación y son líderes de negocios suelen decir que la gente debe aprender a programar porque los trabajos del futuro lo requerirán.\nSin embargo, como Benjamin Doxtdator [ha señalado][jobs-that-dont-exist], muchas de estas afirmaciones están construidas sobre cimientos débiles. Incluso si las afirmaciones fueran reales, la educación no debería preparar a la gente para los trabajos del futuro: les debería enseñar que tienen algo que decir sobre qué tipos de trabajos existirán en el futuro, cuales valen la pena y cómo poder opinar sobre esas elecciones. Además, como [señala Mark Guzdial][guzdial-why-teach-programming], hay realmente muchas razones para aprender a programar:\n\nPara entender nuestro mundo.\nPara estudiar y entender procesos.\nPara ser capaz de hacer preguntas sobre las cosas que influyen en nuestras vidas.\nPara usar una importante nueva forma de alfabetización.\nPara tener una nueva manera de aprender arte, música, ciencia y matemática.\nComo una habilidad laboral.\nPara usar mejor las computadoras.\nComo un medio en el cual aprender resolución de problemas.\n\nDibuja una grilla de 3x3 cuyos ejes estén etiquetados: “baja,” “media,” y “alta” y coloca cada razón en un sector de acuerdo a la importancia que tienen para ti (el eje X) y para la gente a la que planeas enseñar (el eje Y).\n\n¿Qué puntos están estrechamente alineados en importancia (es decir, en la diagonal de tu grilla)?\n¿Qué puntos están desalineados (es decir, en las esquinas por fuera de la diagonal)?\n¿Cómo debería afectar esto lo que tú enseñas?"
  },
  {
    "objectID": "intro.html#repaso",
    "href": "intro.html#repaso",
    "title": "2  Introducción",
    "section": "2.4 Repaso",
    "text": "2.4 Repaso\n\n\n\nMapa Conceptual sobre aprender conocimientos básicos basados en evidencia para facilitar un aprendizaje efectivo.\n\n\n\n\n\n\nGeary, DC. 2007. “Educating the Evolved Mind: Conceptual Foundations for an Evolutionary Educational Psychology. Carlson JSLevin JR Educating the Evolved Min: Vol. 2.” Psychological Perspectives on Contemporary Educational Issue. Greenwich: Information Age 199.\n\n\nHativa, Nira, Rachel Barak, and Etty Simhi. 2001. “Exemplary University Teachers: Knowledge and Beliefs Regarding Effective Teaching Dimensions and Strategies.” The Journal of Higher Education 72 (6): 699–729. http://www.jstor.org/stable/2672900.\n\n\nHo, Angela, David Watkins, and Mavis Kelly. 2001. “The Conceptual Change Approach to Improving Teaching and Learning: An Evaluation of a Hong Kong Staff Development Programme.” Higher Education 42 (2): 143–69. http://www.jstor.org/stable/3448064.\n\n\nJUSTICE, NICOLA, ANDREW ZIEFFLER, and JOAN GARFIELD. 2017. “Statistics Graduate Teaching Assistants’ Beliefs, Practices, and Preparation for Teaching Introductory Statistics.” STATISTICS EDUCATION RESEARCH JOURNAL 16 (1): 294–319. https://doi.org/10.52041/serj.v16i1.232.\n\n\nKane, Ruth, Susan Sandretto, and Chris Heath. 2002. “Telling Half the Story: A Critical Review of Research on the Teaching Beliefs and Practices of University Academics.” Review of Educational Research 72 (2): 177–228. https://doi.org/10.3102/00346543072002177.\n\n\nKEMBER, DAVID, and KAM-POR KWAN. 2000. “Lecturers’ Approaches to Teaching and Their Relationship to Conceptions of Good Teaching.” Instructional Science 28 (5/6): 469–90. http://www.jstor.org/stable/23371459.\n\n\nMartı́n, H. R. 2021. ?‘Cómo Aprendemos?: Una Aproximación Cientı́fica Al Aprendizaje y La Enseñanza. Educación Basada En Evidencias. Graó."
  },
  {
    "objectID": "outreach.html#outreach-branding",
    "href": "outreach.html#outreach-branding",
    "title": "6  Difusión y vinculación",
    "section": "6.2 Marcas y posicionamiento",
    "text": "6.2 Marcas y posicionamiento\nUna marca es la primera reacción de una persona a la mención de un producto; si la reacción es “¿Qué es eso?”, todavía no tienes una marca. La marca es importante porque la gente no va a ayudar a algo que no conoce o no le importa.\nLa mayor parte de la discusión actual sobre las marcas se enfoca en cómo crear reconocimiento en línea. Las listas de correo, los blogs y Twitter te dan maneras de llegar a la gente, pero a medida que aumenta el volumen de desinformación, la gente presta menos atención a cada interrupción individual.\nEsto hace que el posicionamiento sea cada vez más importante. A veces llamado “diferenciación”, es lo que distingue tu oferta de las otras: la sección “a diferencia de” de tu discurso de presentación. Cuando te comunicas con personas que están familiarizadas con tu campo, debes enfatizar el posicionamiento, ya que es eso lo que llamará su atención.\nHay otras cosas que puedes hacer para ayudar a construir tu marca. Una de ellas es usar ejemplos de éxito, como un robot que una de tus estudiantes hizo a partir de piezas que encontró en su casa Schwarz (2013) o el sitio web que otro estudiante hizo para el geriátrico sus padres.\nOtra opción es hacer un video corto—no más de unos pocos minutos de duración— que resalte los antecedentes y logros de tus estudiantes. El objetivo de los ítems anteriores es contar una historia: mientras que la gente siempre pide datos, lo que creen y recuerdan son las historias.\n\n6.2.1 Mitos fundacionales\nUna de las historias más convincentes que una persona o grupo puede contar es por qué y cómo comenzaron. ¿Estás enseñando algo que desearías que alguien te hubiera enseñado pero no lo hizo? ¿Había una persona en particular a la que querías ayudar y eso abrió las puertas?\nSi no hay una sección en tu sitio web que comience con “Había una vez”, piensa en agregar una.\n\nUn paso crucial es lograr que tu organización sea encontrada en las búsquedas en internet. DiSalvo, Reid, and Roshan (2014) descubrió que las clases de computación fuera de la escuela no eran encontradas con los términos de búsqueda que los padres y las madres utilizaban. Otros tipos de clases u organizaciones se enfrentan a desafíos similares. Hay mucho mito sobre técnicas para hacer que las cosas puedan ser encontradas en internet (lo que a veces se refiere como motor de optimización de posicionamiento en buscadores o SEO por su sigla en inglés (“Search Engine Optimization”)). Dado el poder casi-monopólico y la falta de transparencia de Google, la mayor parte de estas estrategias se reduce a estar un paso por delante de los algoritmos diseñados para prevenir a las personas sobre rankings manipulados, sesgados o poco realistas.\nA menos que tengas muy buena financiación, lo mejor que puedes hacer es hacer búsquedas regulares de tu organización y de ti en internet para ver qué encuentras. Con esa información puedes leer [estas guías (en inglés)][page-factors] y hacer lo que esté a tu alcance para mejorar tu sitio. Ten en mente [esta viñeta de XKCD (en inglés)][xkcd-university-websites]: la gente no quiere saber sobre tu organigrama u obtener un recorrido virtual de su sitio—las personas quieren tu dirección, información sobre estacionamiento cerca y alguna idea de lo que enseñas, cuándo lo enseñas y cómo va a cambiar sus vidas.\n\n6.2.2 No todo el mundo vive en línea\nEstos ejemplos asumen que la gente tiene acceso a internet y que los grupos tienen dinero, materiales, tiempo libre y/o habilidades técnicas. La mayoría no tiene estos recursos—de hecho, aquellos que trabajan con grupos económicamente desfavorecidos muy probablemente no los tengan. (Como Rosario Robinson dice, “Gratis funciona para aquellas personas que pueden permitirse lo gratuito.”) Las historias son más importantes que el programa del curso en esas situaciones, porque son más fáciles de volver a contar. Igualmente, si las personas a las que esperas llegar no están en línea tan a menudo como tú, entonces publicar avisos en las carteleras de las escuelas, en bibliotecas locales, en centros de ayuda, y en los mercados y tiendas puede ser la forma más efectiva de llegar a tu público."
  },
  {
    "objectID": "outreach.html#outreach-cold-call",
    "href": "outreach.html#outreach-cold-call",
    "title": "6  Difusión y vinculación",
    "section": "6.3 El arte de la llamada en frío",
    "text": "6.3 El arte de la llamada en frío\nCrear un sitio web y esperar que las personas lo encuentren es fácil; llamar por teléfono o golpear en las puertas de sus casas sin ningún tipo de introducción previa es mucho más difícil. Al igual que ponerse de pie y enseñar, sin embargo, es un oficio que puede aprenderse. Aquí hay diez reglas simples para convencer a las personas:\n\n1: No lo hagas\n\nSi tienes que convencer a alguien de hacer algo, lo más probable es que realmente no quieran hacerlo. Respeta eso: casi siempre es mejor a largo plazo dejar algo en particular sin hacer que usar la culpa o cualquier truco psicológico encubierto que sólo generará resentimiento.\n\n2: Sé amable.\n\nNo sé si existe un libro llamado Trucos secretos de los maestros ninja de ventas, pero si existe, probablemente le dice a sus lectores que hacer algo por un cliente potencial crea un sentido de obligación, lo que a su vez aumenta las probabilidades de una venta. Esto puede funcionar, pero solo funciona una vez y no es una práctica recomendable. Por otro lado, si eres genuinamente amable y ayudas a otras personas porque eso es lo que las buenas personas hacen, sólo podrías inspirarlas a ser buenas personas también.\n\n3: Apela al bien mayor.\n\nSi comienzas hablándole a las personas sobre lo que hay disponible para ellas, les estás señalando que deberían pensar en su interacción contigo como si se tratara de un intercambio comercial que se puede negociar. En cambio, comienza explicando cómo su aporte y ayuda puede hacer del mundo un lugar mejor y dilo en serio. Si lo que estás proponiendo no va a hacer del mundo un lugar mejor, debes mejorar tu propuesta.\n\n4: Comienza por algo pequeño.\n\nLa mayoría de las personas son comprensiblemente reacias a sumergirse de lleno en las cosas, así que debes darles la oportunidad de conocer el terreno y conocerte a ti y a las demás personas involucradas en lo que sea que necesites ayuda. No te sorprendas o decepciones si ahí es donde terminan las cosas: todo el mundo está ocupado o cansado o tiene proyectos propios, o tal vez simplemente tiene un modelo mental diferente de cómo se supone que funcionan las colaboraciones. Recuerda la regla 90-9-1– el 90% va a mirar, el 9% va a hablar y el 1% realmente va a hacer cosas—ajusta tus expectativas de modo acorde.\n\n5: No construyas un proyecto: construye una comunidad.\n\nSolía pertenecer a un equipo de béisbol que nunca jugaba realmente al béisbol: nuestros “juegos” eran sólo una excusa para que estuviéramos juntos y disfrutemos de la compañía de las demás personas. Probablemente no quieras llegar tan lejos, pero compartir una taza de té con alguien o celebrar el cumpleaños de su nieto/a pueden darte cosas que no podrías obtener con ninguna cantidad razonable de dinero.\n\n6: Establece un punto de conexión.\n\n“Estaba hablando con X” o “Nos conocimos en Y” les da contexto, lo que a su vez hace sentir más cómodas a las personas. Esto debe ser específico: quienes envían correo basura y quienes hacen llamadas en frío nos han entrenado para ignorar cualquier cosa que comience con la frase “Hace poco tiempo encontré tu sitio web …”\n\n7: Sé específico/a sobre lo que estás pidiendo.\n\nEste detalle es necesario para que las personas puedan determinar si el tiempo y las habilidades que tienen coinciden con lo que necesitas. Ser realista desde el principio también es una señal de respeto: si le dices a alguien que necesitas una mano para mover algunas cajas cuando en realidad estás mudando una casa entera, probablemente no te ayudarán por segunda vez.\n\n8: Establece tu credibilidad.\n\nMenciona a quienes te patrocinan, tu tamaño, cuánto tiempo hace que existe tu grupo o algo que hayas logrado en el pasado para que las personas crean que vale la pena tomarte en serio.\n\n9: Crea una ligera sensación de urgencia.\n\n“Esperamos lanzar esto en primavera” es mucho más probable que genere una respuesta positiva que “Con el tiempo queremos lanzar esto.” Sin embargo la palabra “ligera” es importante: si tu pedido es urgente, la mayoría de las personas pueden asumir que eres una persona desorganizada o que algo ha salido mal y por lo tanto pueden pecar de prudencia.\n\n10: Entiende la indirecta.\n\nSi la primera persona a la que le pides ayuda dice no, pregúntale a otra. Si la quinta o décima persona dice no, pregúntate si lo que estás tratando de hacer tiene sentido y vale la pena hacerlo.\n\n\nLa siguiente plantilla de correo electrónico sigue todas estas reglas. Ha funcionado bastante bien: descubrimos que alrededor de la mitad de los correos fueron respondidos, en aproximadamente la mitad de estas respuestas querían conocer más, y la mitad de estos últimos contactos condujeron a talleres, lo que significa que entre el 10 y 15% de las cuentas de correo a las que nos dirigimos resultaron en talleres. Esto puede ser bastante desmoralizador si no estás acostumbrado/a, pero es mucho mejor que la tasa de respuesta del 2 a 3% que la mayoría de las organizaciones esperan con llamadas en frío.\n\nHola NOMBRE\nEspero que no te resulte inoportuno recibir este correo, pero quería continuar con nuestra conversación en LUGAR DE REUNIÓN para ver si tendrías interés en que realicemos un taller de entrenamiento para docentes—estamos programando la próxima tanda para las próximas dos semanas.\nEste taller de un día les enseñará a tus voluntarios/as una serie de prácticas de enseñanza útiles y basadas en evidencias. El taller se ha impartido más de cien veces de diversas maneras en los seis continentes para organizaciones sin fines de lucro, bibliotecas y empresas, y todo el material está disponible gratuitamente en línea en http://teachtogether.tech.\nEl temario incluye:\n\nestudiantes tipo\ndiferencias entre diferentes tipos de estudiantes\nuso de evaluaciones formativas para diagnosticar malentendidos\nla enseñanza como un arte performativo\nque motiva y desmotiva a estudiantes adultos/as\nla importancia de la inclusión y como ser un buen aliado/a\n\nSi esto te resulta interesante, por favor avísame—Agradecería la oportunidad de hablar de los modos y por qué medios sería adecuado hacerlo.\nGracias,\nNOMBRE\n\n\n6.3.1 Referencias\nConstruir alianzas con otros grupos que hacen cosas relacionadas a tu trabajo vale la pena por muchas razones. Una de ellas son las referencias: si la persona que se aproxima en busca de tu ayuda podría ser mejor atendida por alguna otra organización, tómate un momento para presentarlos. Si ya has hecho esto varias veces, agrega información a tu sitio web para ayudar a la próxima persona a encontrar lo que necesita. En retribución, las organizaciones a las que estás ayudando pronto empezarán a ayudarte."
  },
  {
    "objectID": "outreach.html#outreach-schools",
    "href": "outreach.html#outreach-schools",
    "title": "6  Difusión y vinculación",
    "section": "6.4 Cambio académico",
    "text": "6.4 Cambio académico\nTodo el mundo tiene miedo a lo desconocido y a pasar vergüenza. En consecuencia, la mayoría de la gente prefiere fracasar que cambiar. Por ejemplo, Lauren Herckis investigó [por qué los/las docentes de nivel universitario no adoptan mejores metodos de enseñanza][faculty-teaching-methods]. Lauren halló que el principal motivo es el miedo a parecer estúpido/a delante de los/las estudiantes; Las otras razones fueron: preocupación de que el cambio de los métodos de enseñanza pudiera afectar las evaluaciones de los cursos de forma negativa (lo cual a su vez podría afectar promociones y cargos) y el deseo de la gente de seguir emulando a los/las docentes que son fuente de inspiración.\nNo tiene sentido discutir si estas cuestiones son “reales” o no: los/las docentes creen que son reales, por lo que cualquier plan para trabajar con el personal docente de las universidades necesita tenerlas en cuenta Así como la prevalencia de una mentalidad cerrada entre los/las docentes cuando se trata de enseñanza, es decir, la creencia de que algunas personas son “solo mejores enseñando” .\nBarker, Hovey, and Gruning (2015) realizaron un estudio de dos etapas sobre cómo quienes son docentes de ciencias de la computación adoptan nuevas prácticas de enseñanza, ya sea individualmente, como organización o en la sociedad en su conjunto. En este estudio se preguntaron y respondieron tres asuntos claves:\n\n¿Cómo se enteran de nuevas prácticas de enseñanza?\n\nBuscan intencionalmente nuevas prácticas porque su motivación es resolver un problema (en particular, la participación de sus estudiantes), son conscientes de las nuevas prácticas a través de iniciativas deliberadas por parte de sus instituciones, las replican de colegas, o las obtienen por interacciones esperadas e inesperadas en conferencias (relacionadas a la enseñanza o de otro tipo).\n\n¿Por qué las prueban?\n\nA veces, debido a los incentivos institucionales (por ejemplo, innovan para mejorar sus chances de promoción), pero a menudo hay tensión en las instituciones de investigación, donde la retórica sobre la importancia de la enseñanza tiene poca credibilidad. Otra razón importante es su propio análisis costo/beneficio: ¿les va a ahorrar tiempo esa innovación? Una tercera razón es que se inspiran en modelos de roles a seguir—otra vez, esto afecta en gran medida a las innovaciones destinadas a mejorar la motivación y participación más que los resultados del aprendizaje. Finalmente, el cuarto factor son fuentes de confianza, por ejemplo, personas que han conocido en congresos o conferencias que se encuentran en la misma situación que ellos/as y han tenido experiencias exitosas al adoptar las nuevas prácticas. Pero los/las docentes tienen preocupaciones que no siempre son abordadas por el grupo de personas que abogan por modificaciones. La primera era la ley de Glass: cualquier nueva herramienta o práctica inicialmente te ralentiza, entonces mientras que las nuevas prácticas pueden hacer la enseñanza más efectiva a largo plazo, no pueden permitirse en el corto plazo. Otra preocupación es que el diseño físico de las aulas dificulta muchas prácticas nuevas: por ejemplo, los grupos de discusión no funcionan bien en asientos de estilo teatro.\n\n\nPero el resultado más revelador fue el siguiente: “A pesar de ser los propios investigadores/as quienes enseñan, la mayor parte de los/las docentes de ciencias de computación con quienes hablamos no creía que los resultados de estudios sobre educación fueran razones creíbles para probar prácticas de enseñanza.” Esto es consistente con otros hallazgos: incluso personas cuyas carreras están dedicadas a la investigación a menudo ignoran investigaciones sobre educación.\n\n¿Por qué las siguen usando?\n\nComo dice Barker, Hovey, and Gruning (2015), “Las devoluciones de los estudiantes son vitales,” y son normalmente la razón más fuerte para continuar usando una práctica, a pesar de que sabemos que las auto-evaluaciones realizadas por estudiantes no se correlacionan fuertemente con los resultados del aprendizaje Stark and Freishtat (2014), Uttl, White, and Gonzalez (2017) (aunque la asistencia a clases sí es un buen indicador del compromiso de los/las estudiantes). Otro motivo para retener una práctica son los requisitos institucionales, pero si esta es la única motivación, las personas abandonarán la práctica cuando el incentivo explícito o el monitoreo desaparezcan.\n\n\nLa buena noticia es que puedes abordar estos problemas sistemáticamente. Bauer et al. (2015) observó la adopción de nuevas técnicas médicas dentro de la Administración de Veteranos de los Estados Unidos. Hallaron que las prácticas médicas basadas en evidencia toman en promedio 17 años en ser incorporadas a las prácticas generales de rutina, y que solo cerca de la mitad de estas prácticas llegan a ser ampliamente adoptadas. Este deprimente hallazgo, junto con otros, ha estimulado el crecimiento de la ciencia de la implementación, que es el estudio de cómo lograr que la gente adopte mejores prácticas.\nComo decía el ?sec-community, el punto de partida es descifrar qué es lo que creen que necesitan las personas que quieres ayudar. Por ejemplo, Yadav et al. (2016) resume las devoluciones de docentes de nivel primario y secundario sobre la preparación y el apoyo que desean. Aunque esto puede no ser aplicable a todos los entornos, tomar una taza de té con unas pocas personas y escucharlas antes de hablar hace un mundo de diferencia en su voluntad de intentar algo nuevo.\nUna vez que sepas lo que la gente necesita, el siguiente paso es hacer cambios de manera incremental, dentro de los propios esquemas de las instituciones. Narayanan et al. (2018) describe un programa intensivo de tres años basado en cohortes muy unidas y apoyo administrativo que triplicó las tasas de graduación, mientras que Hu et al. (2017) describe el impacto de implementar un programa de certificaciones de seis meses para docentes de secundaria que quieren enseñar computación. El número de docentes de computación se ha mantenido estable entre 2007 y 2013, pero se cuadruplicó –sin disminuir la calidad– después de la introducción de un nuevo programa de certificación: los/las docentes que eran personas novatas en computación parecían ser tan eficaces en el curso introductorio como los/las docentes con más entrenamiento o formación informática en la enseñanza.\nEn un sentido más amplio, Borrego and Henderson (2014) presenta categorías para lograr que ocurran cambios en la educación superior. Las categorías están definidas de acuerdo a si el cambio es individual o sistémico y si se prescribe (de arriba hacia abajo) o es un cambio emergente (de abajo hacia arriba). La persona que trata de hacer los cambios (y hacer que duren) tiene un rol distinto en cada una de estas situaciones, y consecuentemente debe seguir diferentes estrategias. El artículo continúa explicando en detalle cada uno de los métodos, mientras que Henderson et al. (2015a), Henderson et al. (2015b) presentan las mismas ideas en una forma más procesable.\nAl llegar a una institución, probablemente en principio caigas en la categoría de cambio individual/emergente, dado que te aproximas a cada docente uno a uno y tratarás de lograr que los cambios ocurran de abajo hacia arriba. Si este es el caso, las estrategias que recomiendan Borrego y Henderson se enfocan en que los/las docentes reflexionen sobre sus prácticas de enseñanza de manera individual o en grupos. Haz programación en vivo para mostrarles lo que haces o los ejemplos que usas, luego haz que tus estudiantes programen en vivo en turnos para mostrar cómo usarían esas ideas y técnicas en su desempeño así les darás a todos/as la oportunidad de elegir cosas que les serán útiles en su contexto."
  },
  {
    "objectID": "outreach.html#outreach-final",
    "href": "outreach.html#outreach-final",
    "title": "6  Difusión y vinculación",
    "section": "6.5 Reflexiones finales",
    "text": "6.5 Reflexiones finales\nEs imposible cambiar grandes instituciones por tu cuenta: necesitas aliados/as y para conseguir aliados/as, necesitas tácticas. La guía más útil que he encontrado es Manns and Rising (2015), que cataloga más de cuatro docenas de estas tácticas y las organiza de acuerdo a si se implementan mejor temprano, más adelante, a lo largo del ciclo de cambio, o cuando encuentras resistencia. Algunos de sus patrones incluyen:\n\nEn tu espacio:\n\nMantén la nueva idea visible colocando recordatorios en toda la organización.\n\nSímbolo:\n\nPara una nueva idea se mantenga viva en la memoria de una persona, entrega un objeto simbólico que pueda identificarse con el tema que se está presentando.\n\nEl rol del escepticismo:\n\nIdentifica a los/las líderes de opinión fuertes que son escépticos de tu nueva idea para desempeñar el papel de “persona escéptica oficial”. Usa sus comentarios para mejorar tus esfuerzos, incluso si no logras hacer que cambien de opinión.\n\nCompromiso futuro:\n\nSi puedes anticipar algunas de sus necesidades, podrás pedir (y tener éxito) en obtener un compromiso futuro de las personas más ocupadas. Si se les da algún tiempo de anticipación, es posible que tengan mayor disposición a ayudar porque permites que se organicen.\n\n\nLa estrategia más importante es el deseo de cambiar tus metas basado en lo que aprendes de las personas a las que estás tratando de ayudar. Por ejemplo, enseñarles tutoriales que muestran cómo usar una hoja de cálculo podría ser una ayuda más rápida y confiable que una introducción a JavaScript. A menudo he cometido el error de confundir cosas que me apasionan con cosas que las otras personas deberían saber; si realmente quieres ser quien las acompañe, recuerda siempre que el aprendizaje y el cambio tienen que ir en ambos sentidos.\nLa parte más difícil de construir relaciones es comenzarlas. Reserva una o dos horas cada mes para encontrar aliados/as y mantener tus relaciones con ellos/as. Una forma de hacer esto es pedirles consejos: ¿cómo creen que deberías hacer para que lo que están haciendo sea más conocido? ¿Dónde han encontrado espacio para dar clases? ¿Qué necesidades creen que no son cubiertas y tú serías capaz de lograr? Cualquier grupo que haya existido durante algunos años tendrá consejos útiles; también se sentirán halagados/as de que se les haya consultado, y sabrán quién eres la próxima vez que llames.\nY como dice Kuchner (2011), si no puedes ser el/la primero/a en una categoria, tratar de crear una nueva categoría en la que sí puedas. Si no puedes hacerlo, únete a un grupo existente o piensa en hacer algo completamente diferente. Esto no es derrotista: si alguien más ya está haciendo lo que tienes en mente, deberías incorporarte y contrinuir a ese grupo o abordar alguna de las otras cosas igualmente útiles en las que podrías estar trabajando."
  },
  {
    "objectID": "outreach.html#outreach-exercises",
    "href": "outreach.html#outreach-exercises",
    "title": "6  Difusión y vinculación",
    "section": "6.6 Ejercicios",
    "text": "6.6 Ejercicios\n\n6.6.1 Discurso de presentación para un concejero/a municipal (individual/10’)\nEste capítulo describe una organización que ofrece talleres de programación de fin de semana para las personas que re-ingresan a la actividad laboral. Escribe un discurso de presentación para esa organización, dirigido a un/a integrante del consejo de la ciudad o municipio cuyo apoyo necesita esa organización.\n\n\n6.6.2 Presenta tu organización (individual/30’)\nIdentifica dos grupos de personas de los que tu organización necesite apoyo y escribe un discurso de presentación dirigido a cada uno de estos grupos.\n\n\n6.6.3 Asuntos de correo electrónico (parejas/10’)\nEscribe las líneas de asunto (y solo las líneas de asunto) para tres mensajes de correo electrónico: uno anunciando un nuevo curso, uno anunciando un nuevo patrocinio, y uno anunciando un cambio en el liderazgo del proyecto. Compara tus líneas de asunto con las de tu pareja. Analicen si pueden combinar las mejores características de cada asunto a la par que los acortan.\n\n\n6.6.4 Manejando la resistencia pasiva (grupos pequeños/30’)\nLas personas que no quieren cambios a veces lo dirán en voz alta, pero a menudo pueden utilizar otras formas de resistencia pasiva, como simplemente no lidiar con ello, o plantear un posible problema después de otro para hacer que el cambio parezca más arriesgado y más costoso de lo que en realidad es probable que sea Scott (1987). En grupos pequeños, enumeren tres o cuatro razones por las que las personas podrían no querer que tu iniciativa de enseñanza siga adelante, y expliquen qué pueden hacer con el tiempo y los recursos que tienen para contrarrestar cada una de esas razones.\n\n\n6.6.5 ¿Por qué aprender a programar? (individual/15’)\nRevisa el ejercicio “¿Por qué aprender a programar?” en la ?sec-intro-exercises. ¿Dónde conciden tus razones para enseñar y las razones de tus estudiantes para aprender? ¿Dónde no coinciden? ¿Cómo afecta eso a tu marketing?\n\n\n6.6.6 Programadores/as conversacionales (pensar-parejas-compartir/15’)\nUn/una programador/a conversacional es alguien que necesita saber lo suficiente sobre computación para tener una conversación valiosa con otro/a programador/a, pero no va a programar por su cuenta. Wang et al. (2018) descubrió que la mayoría de los recursos de aprendizaje no abordan las necesidades de este grupo. En parejas, escriban un discurso para un taller de medio día destinado a ayudar a las personas que se ajustan a esta descripción. Luego, compartan el discurso que armaron con el resto de la clase.\n\n\n6.6.7 Colaboraciones (grupos pequeños/30’)\nResponde por tu cuenta las siguientes preguntas, luego compara tus respuestas con las dadas por el resto de tu grupo.\n\n¿Tienes algún acuerdo o relación con otros grupos?\n¿Quieres generar lazos con algún otro grupo?\nEl hecho de tener (o no tener) colaboraciones, ¿podría ayudarte a alcanzar tus metas?\n¿Cuáles son tus colaboraciones clave?\n¿Son estos los colaboradores adecuados o indicados para alcanzar tus metas u objetivos?\n¿Con qué grupos o entidades te gustaría que tu organización tuviera acuerdos o lazos?\n\n\n\n6.6.8 Educación (toda la clase/10’)\nLabaree (2008) explora por qué los Estados Unidos y otros países siguen trasladando la solución a los problemas sociales hacia las instituciones educativas y por qué eso sigue sin funcionar. Tal como él remarca, “[La educación] ha hecho muy poco para promover la igualdad de raza, clase y género; para mejorar la salud pública, la productividad económica y la buena ciudadanía; o reducir el sexo sin cuidados en la adolescencia, las muertes por accidentes de tránsito, la obesidad y la destrucción ambiental. De hecho, en muchos sentidos la educación ha tenido un efecto negativo sobre estos problemas, sacando dinero y energía de las reformas sociales que podrían haber tenido un impacto más substancial.” El autor continúa escribiendo:\n\nEntonces, ¿cómo debemos entender el éxito de esta institución, a la luz de su fracaso en lo que le pedimos? Una forma de pensar en esto es que la educación puede no estar haciendo lo que pedimos, pero está haciendo lo que queremos. Queremos una institución que persiga nuestros objetivos sociales de una manera que esté en línea con el individualismo en el corazón del ideal liberal, con el objetivo de resolver problemas sociales buscando cambiar los corazones, mentes y capacidades de cada estudiante individual. Otra forma de decir esto es que queremos una institución a través de la cual podamos expresar nuestros objetivos sociales sin violar el principio de elección individual que se encuentra en el centro de la estructura social, incluso si esto tiene el costo de no lograr estos objetivos. Entonces la educación puede servir como un punto de orgullo cívico, un lugar para exponer nuestros ideales, y un medio para participar en disputas edificantes pero que en última instancia intrascendentes sobre visiones alternativas de la buena vida. Al mismo tiempo, la educación también puede servir como un conveniente chivo expiatorio al que podemos culpar por su fracaso en lograr nuestras más altas aspiraciones como sociedad.\n\n¿Cómo los esfuerzos para enseñar pensamiento computacional y la ciudadanía digital en las escuelas se adaptan a este marco? ¿Los programas de entrenamiento intensivo evitan estas trampas o simplemente las entregan con una nueva apariencia?\n\n\n6.6.9 Adopción institucional (toda la clase/15’)\nRelean la lista de motivaciones para adoptar nuevas prácticas presentada en la ?sec-outreach-schools.\n¿Cuáles de estas motivaciones se aplican a tí y a tus colegas? ¿Cuáles son irrelevantes en tu contexto? ¿En cuáles de estas motivaciones haces hincapié en los casos en que interactúas con personas que trabajan en instituciones educativas formales?\n\n\n6.6.10 Si al principio no tienes éxito (grupos pequeños/15’)\nW.C. Fields probablemente nunca dijo “Si al principio no tienes éxito, inténtalo, inténtalo de nuevo. Luego abandona—no sirve de nada ser un maldito tonto al respecto.” Sin embargo, sigue siendo un buen consejo: si las personas con las que intentas comunicarte no están respondiendo, podría ser que nunca las convenzas. En grupos de 3 a 4 personas, hagan una breve lista de señales que indiquen que debes dejar de intentar hacer algo en lo que crees. ¿Cuántas de estas señales ya son verdaderas?\n\n\n6.6.11 Haz que falle (individual/15’)\nFarmer (2006) presenta algunas reglas irónicas para lograr que nuevas herramientas no sean adoptadas, todas de las cuales aplican a nuevas prácticas de enseñanza:\n\nHazlo opcional.\nEconomiza en entrenamiento.\nNo las uses en un proyecto real.\nNunca la integres.\nÚsala esporádicamente.\nHazla parte de una iniciativa de calidad.\nMarginaliza al campeón/a.\nCapitaliza los primeros errores.\nHaz una inversión pequeña.\nExplota el miedo, la incertidumbre, la duda, la pereza y la inercia.\n\n¿Cuál de estas reglas has visto implementarse recientemente? ¿Cuáles has utilizado tú mismo/a? ¿De qué forma se usaron esas reglas?\n\n\n6.6.12 Mentoreo (todo la clase/15’)\nEl [Institute for African-American Mentoring in Computer Science][iaamcs] (Instituto de Mentoría Afroamericana en Ciencias de la Computación) ha publicado [guías para mentorear estudiantes de doctorado][iaamcs-guidelines]. Lee estas guías individualmente (en inglés), luego discutan en la clase y califiquen los esfuerzos para tu propio grupo como: +1 (definitivamente lo haría), 0 (no estoy seguro o no es aplicable), o -1 (definitivamente no lo haría).\n\n\n\n\nBarker, Lecia, Christopher Lynnly Hovey, and Jane Gruning. 2015. “What Influences CS Faculty to Adopt Teaching Practices?” In 2015 Technical Symposium on Computer Science Education (SIGCSE’15). Association for Computing Machinery (ACM). https://doi.org/10.1145/2676723.2677282.\n\n\nBauer, Mark S., Laura Damschroder, Hildi Hagedorn, Jeffrey Smith, and Amy M. Kilbourne. 2015. “An Introduction to Implementation Science for the Non-Specialist.” BMC Psychology 3 (1). https://doi.org/10.1186/s40359-015-0089-9.\n\n\nBorrego, Maura, and Charles Henderson. 2014. “Increasing the Use of Evidence-Based Teaching in STEM Higher Education: A Comparison of Eight Change Strategies.” Journal of Engineering Education 103 (2): 220–52. https://doi.org/10.1002/jee.20040.\n\n\nDiSalvo, Betsy, Cecili Reid, and Parisa Khanipour Roshan. 2014. “They Can’t Find Us.” In 2014 Technical Symposium on Computer Science Education (SIGCSE’14). Association for Computing Machinery (ACM). https://doi.org/10.1145/2538862.2538933.\n\n\nFarmer, Eugene. 2006. “The Gatekeeper’s Guide, or How to Kill a Tool.” IEEE Software 23 (6): 12–13. https://doi.org/10.1109/ms.2006.174.\n\n\nHenderson, Charles, Renée Cole, Jeff Froyd, Debra Friedrichsen, Raina Khatri, and Courtney Stanford. 2015a. Designing Educational Innovations for Sustained Adoption. Increase the Impact.\n\n\n———. 2015b. “Designing Educational Innovations for Sustained Adoption (Executive Summary).” http://www.increasetheimpact.com/resources.html; Increase the Impact.\n\n\nHu, Helen H., Cecily Heiner, Thomas Gagne, and Carl Lyman. 2017. “Building a Statewide Computer Science Teacher Pipeline.” In 2017 Technical Symposium on Computer Science Education (SIGCSE’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3017680.3017788.\n\n\nKuchner, Marc J. 2011. Marketing for Scientists: How to Shine in Tough Times. Island Press.\n\n\nLabaree, David F. 2008. “The Winning Ways of a Losing Strategy: Educationalizing Social Problems in the United States.” Educational Theory 58 (4): 447–60. https://doi.org/10.1111/j.1741-5446.2008.00299.x.\n\n\nManns, Mary Lynn, and Linda Rising. 2015. Fearless Change: Patterns for Introducing New Ideas. Addison-Wesley.\n\n\nNarayanan, Sathya, Kathryn Cunningham, Sonia Arteaga, William J. Welch, Leslie Maxwell, Zechariah Chawinga, and Bude Su. 2018. “Upward Mobility for Underrepresented Students.” In 2018 Technical Symposium on Computer Science Education (SIGCSE’18). Association for Computing Machinery (ACM). https://doi.org/10.1145/3159450.3159551.\n\n\nSchwarz, Viviane. 2013. Welcome to Your Awesome Robot. Flying Eye Books.\n\n\nScott, James C. 1987. Weapons of the Weak: Everyday Forms of Peasant Resistance. Yale University Press.\n\n\nStark, Philip, and Richard Freishtat. 2014. “An Evaluation of Course Evaluations.” ScienceOpen Research, September. https://doi.org/10.14293/s2199-1006.1.sor-edu.aofrqa.v1.\n\n\nUttl, Bob, Carmela A. White, and Daniela Wong Gonzalez. 2017. “Meta-Analysis of Faculty’s Teaching Effectiveness: Student Evaluation of Teaching Ratings and Student Learning Are Not Related.” Studies in Educational Evaluation 54 (September): 22–42. https://doi.org/10.1016/j.stueduc.2016.08.007.\n\n\nWang, April Y., Ryan Mitts, Philip J. Guo, and Parmit K. Chilana. 2018. “Mismatch of Expectations: How Modern Learning Resources Fail Conversational Programmers.” In 2018 Conference on Human Factors in Computing Systems (CHI’18). Association for Computing Machinery (ACM). https://doi.org/10.1145/3173574.3174085.\n\n\nYadav, Aman, Sarah Gretter, Susanne Hambrusch, and Phil Sands. 2016. “Expanding Computer Science Education in Schools: Understanding Teacher Experiences and Challenges.” Computer Science Education 26 (4): 235–54. https://doi.org/10.1080/08993408.2016.1257418."
  },
  {
    "objectID": "paid.html#introducción",
    "href": "paid.html#introducción",
    "title": "7  Como vivir de enseñar",
    "section": "7.1 Introducción",
    "text": "7.1 Introducción\nLa primera opción para trabajar como docente es pertener a alguna institución formal de educación, como las escuelas y las universidades. Pero estas instituciones no son los únicos lugares en donde la gente va a aprender programación (u otro tipo de tecnología); en los últimos años, un número creciente de personas ha acudido a talleres free-range y programas de entrenamiento intensivo. Estos últimos suelen tener entre uno y seis meses de duración, son llevados a cabo por grupos de personas voluntarias o por empresas con un fin de lucro y apuntan a un mercado de personas que quieren cambiar de carrera o se están re-entrenando para ingresar al mercado laborar de la tecnología.\nYa sea como docente independiente o como representante de una comunidad de práctica de enseñanza, vas a tener que empezar de alguna manera, hacerte conocer y lograr que te paguen por tus actividades para que puedas enseñar de forma sustentable.\nEn este capitulo repasamos diferentes modelos para hacer el bien enseñando y lograr que te paguen por eso lo suficiente para hacerlo tu profesión.\nNo vamos a cubrir ningún aspecto legal, impositivo o de contaduría porque son específicos a cada lugar y por eso te recomendamos que busques asesoramiento profesional en tu localidad. El libro de (Gunderloy2009?) tiene consejos sobre estos temas enfocados en Estados Unidos, puede ser una referencia útil si tu negocio de enseñanza es internacional."
  },
  {
    "objectID": "paid.html#por-donde-empezar",
    "href": "paid.html#por-donde-empezar",
    "title": "7  Como vivir de enseñar",
    "section": "7.2 Por donde empezar",
    "text": "7.2 Por donde empezar\nAqui hay un par de opciones sobre como empezar a ofrecer tus servicios y dar clases como docente autónomo.\n\nEmpieza como parte del grupo de apoyo.\n\nSé ayudante en el curso o evento que otras personas hayan organizado. Te servirá para aprender como funciona este negocio y para hacer contactos.\nSi se trata de una capacitación paga, la persona responsable debería cubrir los costos de tu participación (Ej: viaje, alojamiento) y pagarte una tarifa por tu tiempo. Si la capacitación no es comercial, puedes preguntar si te dejan enseñar una parte de la clase y luego te den su opinión de tu desempeño y te aconsejen como mejorar.\n\nEmpieza con personas conocidas.\n\n¿Conoces a alquien que trabaje en algún lugar que se beneficiaría del tipo de formación que ofreces? Si es así, pregunta si te puede presentar con la persona a cargo o con alguien de recursos humanos (que suelen encargarse de organizar las capacitaciones), para que puedas ofrecer tus servicios.\n\nContacta a las asociaciones, consejos y colegios de profesionales y a los gremios.\n\nEstas organizaciones nuclean personas que se dedican a ejercer una disciplina. En general, tienen un área de capacitación que ofrece cursos y actualizaciones sus miembros. Puedes ponerte en contacto con las personas responsables de esta actividad y ofrecer tus servicios. Además, son un buen lugar para generar contactos y experiencia. Si sos parte de alguna de estas organzaciones, empieza por allí.\n\nEmpieza por las conferencias.\n\nLas conferencias, hackatones y eventos similares son una gran oportunidad para hacer contactos y conocer clientes potenciales. Muchas conferencias tienen una sección o día destinado a tutoriales; busca que eventos y conferencias se van a realizar entre los próximos 6 a 12 meses y revisa si hay un llamado a propuestas de tutoriales. Contacta a las personas responsables de la organización de la conferencia (o directamente con la persona responsable de organizar las capacitaciones) para ver qué buscan o si quieren lo que tú ya tienes. Si hay un llamado a presentación de tutoriales, este suele solicitar algunos detalles sobre tu propuesta, que también vas a necesitar si te invitan a participar. Te sugerimos que tu propuesta presente al menos los siguientes puntos:\n\nAudiencia: podes presentar esta parte usando personas tipo (referencia).\nObjetivos de aprendizaje: lista que van a aprender tus estudiantes (referencia).\nPropuestas pedagógica: detalla como será la dinámica del curso, que tipo de herramientas de enseñanza activa vas a utilizar (ej: evaluaciones formativas, trabajo en grupo, codificación participatoria en vivo, etc.)\nEsquema y duración: una agenda tentativa del curso donde se vea explicitamente los cortes y las ejercicitaciones.\nPre-requisitos: para quienes tomen el curso en cuanto a hardware, software y conocimientos previos.\n\n\n\nEstos puntos muestran que tienes conocimiento sobre como enseñar el tema, además del tema en si. En el FIXME:  podes ver algunas plantillas para generar estos documentos.\n\nEnseña en comunidades de práctica, organizaciones sin fines de lucro e instituciones públicas.\n\ny su puedes, hazlo sin cobrar dinero. Greg ha impartido media docena de clases gratuitas para bibliotecas públicas en los últimos años porque cree que las bibliotecas públicas son una de las mejores invenciones de la civilización y quiere ayudarlas tanto como pueda. También ha impartido clases para empresas locales a cambio de donaciones a organizaciones benéficas que quiere apoyar.\nYanina ha ofrecido sus cursos de forma gratuita a agrupaciones como R-Ladies y como cursos extracurriculares en universidades públicas en Argentina. De esta manera puede devolver un poco de todo lo que ha recibido de la educación pública de su país y de las comunidades de práctica de las cuales es parte. Además, esta práctica, les permite generar nuevos contactos, probar material nuevo, ver cómo enseñan con una persona con la que no han enseñado antes y formar personas para que enseñen utilizando las técnicas y herramientas que aprendimos en este libro.\n\nVe donde no están los demás.\n\nhoy todas las industrias necesitan ayuda con el manejo y explotación de sus datos; no es necesario ofrecer tus servicios a los negocios más conocidos o de moda. Cualquiera sea el mercado donde ofrezcas tus servicios, usa ejemplos que sean directamente relevantes para su campo y conoce a tu audiciencia hablando con más personas además de tus contactos iniciales para poder hacerte una idea de como son las personas tipo de esa comunidad y que conocimientos previos ya tienen.\n\nProgramas de entrenamiento intensivos (bootcamps)\n\nSi te estás aproximando a un programa de entrenamiento intensivo que ya existe, tu mejor estrategia podría ser enfatizar lo que sabes sobre enseñanza, en lugar de lo que sabes sobre tecnología, ya que gran parte de las personas que trabajan en estos emprendimientos tiene experiencia en programación pero poca o ninguna formación en educación. Puedes demostrar lo que sabes usando el material presentado en los primeros capítulos de este libro (que ya a funcionado con estos espacios en el pasado). Además Lang (2016) describe prácticas de enseñanza basadas en evidencia que pueden implementarse con un esfuerzo mínimo y a bajo costo. Aunque estas prácticas no son las de mayor impacto, pueden ser útiles para lograr éxitos iniciales que te ayuden a lograr apoyo para prácticas que requieren mayor esfuerzo.\n\n\nUna nota de precaución: Debes tener en cuenta que algunos de estos programas son de muy alta calidad, pero otros existen esencialmente para sacarle dinero a la gente McMillan Cottom (2017). Thayer and Ko (2017) entrevistó a 26 personas graduadas de entrenamientos intensivos que tienen como objetivo dar una segunda oportunidad a quienes ya intentaron aprender computación. Estas personas enfrentan grandes costos y riesgos personales porque deben invertir una cantidad significativa de tiempo, dinero y esfuerzo durante todo el proceso de entrenamiento y el cambio de carrera, posterior a graduarse, puede tomar un año o más. Varias de las personas entrevistadas sienten que sus certificados fueron subestimados por sus empleadores, algunas expresaron que obtener un trabajo significa aprobar una entrevista, pero dado que quienes te entrevistan, en general, no comparten los motivos del rechazo, es difícil saber qué mejorar o qué más aprender. Muchas personas han tenido que recurrir a pasantías (pagas o de otro tipo) y pasan mucho tiempo construyendo sus porfolios y desarrollando su red de contactos. Las tres barreras informales que más fácilmente identificaron las personas entrevistadas fueron la jerga, el síndrome del impostor/a y una sensación de no encajar. Burke et al. (2018) profundizó en este tema al comparar las habilidades y credenciales que la industria tecnológica busca con aquellas habilidades provistas por carreras universitarias de cuatro años y programas de entrenamiento intensivo. A partir de entrevistas con 15 responsables de contratación de empresas de varios tamaños y algunos grupos focales, encontraron que las personas que reclutan enfatizaban uniformemente en habilidades blandas (especialmente trabajo en equipo, comunicación y la habilidad para continuar aprendiendo). Muchas compañías requerían un título de cuatro años (aunque no necesariamente en ciencias de la computación), pero muchas también elogiaron a quienes han egresado de estos programas de entrenamiento intensivo por tener más madurez y poseer conocimientos más actualizados.\nEn resumen, presta atención a que tipo de proyecto y emprendimiento te estas sumando.\n\nReusa y traduce materiales de enseñanza exitosos a tu lenguaje\n\nEl lenguaje puede ser una barrera importante a la hora de acceder a contenido actualizado. Hay muchas personas que comparten sus materiales educativos en linea, algunos de estos materiales han sido reutilizados y refinados, logrando lecciones de calidad que funcionan muy bien (por ejemplo las lecciones de The Carpentries y MetaDocencia). Si la licencia de uso lo permite, podrías aprovecharlos para tus propias clases y materiales, adaptándolos si es necesario. Parte de esas adaptaciones puede ser la traducción a tu idioma, si cuentan con una licencia que permite obras derivadas. Siempre es una buena idea contactar a la persona autora de los materiales y hacerle saber tus intenciones de uso, adaptación y traducción.\nSi ya están trabajando en eso tal vez puedas sumarte al equipo. Este reuso puede ahorrarte trabajo en el desarrollo y diseño de lecciones, puede darte buenas ideas para lecciones propias y puedes aportar a tu comunidad haciendo el material más accesible por medio de la traducción. Además, si has traducido materiales conocidos y útiles, serás una de las personas autoras de la traducción, lo que es una buena forma de hacerte conocer y generar contactos.\n\nHabla con tu empleador.\n\nSi, como muchas otras personas, vas a dedicarte a enseñar mientras tienes otro trabajo (hasta que puedas dedicarte a tiempo completo a enseñar), es buena idea que tu empleador lo sepa. Es muy probable es que se entere de todas maneras y siempre es mejor que se entere primero por ti. Es recomendable mantener tu negocio de docente de tus otros trabajos. Tango Greg como Yanina, realizaban tareas relacionadas con su servicio de enseñanza (como desarrollar los materiales de sus cursos o responder a correos electrónicos) fuera del horario laboral y usando sus usuarios y equipos personales. Además, ofrécele a tu actual empleador realizar alguna formación interna de forma gratuita (donde gratuita significa “durante horas de trabajo, como parte de su empleo regular remunerado”)."
  },
  {
    "objectID": "paid.html#como-determinar-cuanto-cobrar-negociando-el-pago",
    "href": "paid.html#como-determinar-cuanto-cobrar-negociando-el-pago",
    "title": "7  Como vivir de enseñar",
    "section": "7.3 Como determinar cuanto cobrar / Negociando el pago",
    "text": "7.3 Como determinar cuanto cobrar / Negociando el pago\nMuchas veces el pago está fijado con antelación, por ejemplo, en una institución formal hay convenios colectivos de trabajo que determinan el sueldo de un docente.\nTambién puede ser que en conferencias y algunas comunidades de práctica el pago sea determinado por quienes organizan el evento. En otras ocasiones las contrataciones gubernamentales o en empresas cuentan con un presupuesto prefijado destinado a capacitaciones, por ejmplo un monto máximo al año o un valor fijo de la hora de enseñanza. En estos casos, como el precio no se puede negociar, tienes que analizar si el arreglo es conveniente o no para ti, teniendo en cuenta algunos de los puntos de la sección anterior.\nOtras veces te van a pedir un presupuesto por tu trabajo docente. Determinar este precio depende de diversos factores, como por ejemplo la región del mundo donde vas a vender tu curso, el tipo de empresa u organización que te lo pide, la duración del curso, la modalidad (presencial, online o híbrida) o el nivel de personalización requerido, por mencionar algunos.\nEn esta sección te presentamos una serie de pasos para determinar el precio de tu tarea docente.\n\nCalcular el precio (por hora)\n\nun primer paso es asignar un precio a la hora de trabajo. Los colegios profesionales y los gremios suelen brindar listados de precios por hora para las tareas de sus profesionales, muchas veces están publicados en sus sitios web. Otra fuente puede ser el valor por hora de un docente de nivel superior (universitario/terciario), al cual se debe multiplicar por 2.5 o 3 para obtener un precio que contemple los costos que tiene trabajar de forma autónoma (Gunderloy2009?). También podes consultar con colegas qué precio por hora cobran y analizar el precio promedio en las publicaciones y ofertas de cursos similares a los tuyos. En 2021 se lanzó 500 Women Scientists’ Fix The Gap initiative para generar una base de datos pública con una lista de honorarios por dar charlas en CTIM (Ciencia, Tecnología, Ingeniería y Matemáticas), aunque la mayoría de los datos se concentra en el norte global es una buena fuente de consulta.\n\nDeterminar una tarifa base\n\nenseñar un curso no es solo ir en la fecha acordada, pararse delente de la clase y empezar a enseñar. La preparación del material corresponde a un porcentaje importante del tiempo invertido en el curso. En general los clientes no van a aceptar pagarte ese tiempo, por lo que incorporarlo en el costo del curso es una forma de cobrar por esa tarea. Una hora de curso corresponde entre una y tres horas de preparación. Esta relación puede cambiar si el curso es totalmente nuevo o ya tienes algo de material preparado. Por ejemplo, podrías iniciar con una tarifa base de dos horas adicional de costo por cada hora frente a estudiantes.\n\nMás pedidos, más costo\n\nA esa tarifa de base se le pueden agregar más horas de acuerdo a los pedidos del cliente. Agregar entre una a tres horas en el costo para la personalización del material (ejemplos, ejercicios, desafíos o ejercitación extra) utilizando datos relacionados con su actividad. También añadir entre dos a cuatro horas de costo extra si solicitan grabar la clase para uso futuro o para publicarla. No aceptes agregás “una cosa más” sin confirmar primero que vas a vas a cobrar por el trabajo. Si lo que estás enseñando es especializado o avanzado y requiere una preparación extra (por ejemplo, incorporar las APIs de la empresa en el material del curso sobre como usar R para análisis de datos) o contar con conocimientos avanzados y actualizados puedes agregar entre dos a cuatro horas al costo total.\n\nEnseñando en equipo\n\nYa hemos mencionado que es mejor si enseñamos con otras personas. Ya sea porque siempre enseñas en equipo, por que por el numero de estudiantes que va a tener tu curso necesitas ayuda, debes agregar al costo las horas de clase de quienes enseñaran contigo. Si el curso es presencial también se agregan los costos de viaje y alojamiento, tanto tuyo como de tus co-docentes y ayudantes.\n\nUltimos ajustes\n\npuede ser que no quieras tener la misma tarifa para una universidad pública que para una empresa; para una organización sin fines de lucro que para un banco o compañía de seguros. Puedes tener un valor de la hora diferente para diferente tipos de organizaciones. También puedes ofrecer tus servicios de forma gratuita o acordar un precio diferente si donan tu pago a una organización que desees ayudar. Finalmente, no trabajes barato con la esperanza de que la capacitación te lleve a un trabajo de consultoría: ocurre, pero es muy infrecuente como para apostar por ello."
  },
  {
    "objectID": "paid.html#dándote-a-conocer",
    "href": "paid.html#dándote-a-conocer",
    "title": "7  Como vivir de enseñar",
    "section": "7.4 Dándote a conocer",
    "text": "7.4 Dándote a conocer\nTus clientes deben poder encontrarte y conocer lo que ofreces para poder contratarte. En esta sección veremos algunas opciones para tener una presencia online que te ayude a realizar tu trabajo de enseñanza.\n\nManten tus redes sociales actualizadas\n\nasegúrate de que tu perfil de LinkedIn está actualizado, los potenciales clientes van a consultarlo antes de contratarte. Con respecto de las otras redes sociales, es preferible tener menos redes sociales activas que muchas redes que luego no se mantienen. Algunas comunidades o negocios usan una red social más que otra, tener una presencia en ellas es una forma que te encuentren y te conozcan. Considera estas cuentas parte de tu marca personal, porque asi lo considerarán tus futuros clientes. Si te es posible utiliza el mismo nombre de usuario en todas las redes donde estés presente. Esto hace que sea más sencillo para las personas encontrarte online. Por ejemplo, Greg es gvwilson en casi todas sus redes sociales, mientras que Yanina es yabellini.\n\nCrea un sitio web de aspecto profesional.\n\nTu página web debería tener - información de contacto (no uses el correo electrónico de tu trabajo si empiezas a dedicarte a esto a medio tiempo); - una breve biografía; - muestras de tus cursos (vamos a ver más detalle en la próxima sección); - un par de vídeos cortos donde estés enseñando o dando charlas; - un blog con algunas publicaciones recientes relacionadas con lo que enseñas o que describan compromisos recientes (con énfasis en recientes: si el último post tiene dos años, puede ser contraproducente); - comentarios positivos de clientes anteriores (o de profesores para los que has sido asistente, o personas con las cuales has trabajado antes) y - el código de conducta de tus talleres. - opcionalmente, y si te sientes cómoda/o, puedes compartir un calendario de los próximos compromisos, como por ejemplo las conferencias a las que vas a asistir, porque aunque no estés enseñando hay personas que pueden aprovechar la oportunidad para contactarte.\n\n\n\n7.4.1 Materiales\nEn el punto anterior mencionamos que es una buena idea tener una muestra de tus materiales de enseñanza en tu sitio web. Como se detalla en Devenyi et al. (2018) generar material educativo requieren un esfuerzo significativo tanto para su desarrollo inicial como para mantenerlo actualizado.\nA pesar que existe la paradoja de la reusabilidad ( (Frantiska2016?)) que postula que un material didáctico será más reutilizables cuando sea lo más genérico posible pero será más efectivo cuando esté personalizado para una audiencia particular, en un contexto particular ( (Wiley2004?)); compatir nuestro material de una manera que otras personas puedan encontrarla, utilizarla, mejorarla y citarla es una actividad que vale la pena el esfuerzo. Además, si los materiales son buenos, hay una alta probabilidad que terminen en internet de todas maneras, poder compartirlo bajo tus propios términos es una mejor opción.\nSumemos a esto que tanto Devenyi et al. (2018) como (Wilson2019?), mencionan que tratar las lecciones como un recurso comunitario que debe actualizarse, adaptarse y mejorarse gradualmente puede incrementar la calidad del material educativo y liberar un tiempo valioso en el diseño del propio material. Compartiendo nuestro material, estamos ayudando a nuestros colegas y también a nuestros estudiantes, que pueden acceder a nuestras lecciones sin costo y en el momento que lo necesiten.\nFinalmente, si seguimos una serie de pasos, tendríamos un producto citable, es decir, podríamos pedir y obtener crédito por el material que desarrollamos, y también podríamos saber quién está usando este material y dónde, lo que muchas veces nos ayudará a mejorarlo.\nTres simples pasos para compartir lecciones\n\nPaso 1: seleccionar una licencia abierta que sea clara con respecto a como usar el material.\nLos materiales que cuentan con una licencia permiten ser utilizados correctamente. Si la licencia no figura explicitamente, por defecto el contenido es cerrado. Sugerimos seleccionar una licencia abierta tanto para el material (texto, imágenes, videos) como para el software.\n\nMaterial: las licencias Creative Commons proveen diversos tipos dependiendo de lo que deseamos que pueda hacer quien use nuestros materiales. Este selector de licencias puede ayudarnos a elegir la licencia que mejor se adapta a nuestras necesidades.\nSoftware: Para el software, existen múltiples opciones. Te presentamos tres: 1) La licencia MIT, que permite dar cualquier uso al código. 2) la Licencia Pública General de GNU (GPL), que también permite hacer cualquier uso que quieran exigiendo que compartan su propio código bajo esta licencia y\n\n\nla licencia hipocrática, que permite usar el código libremente siempre que el uso no viole los tratados básicos de derechos humanos. Hay que tener en cuenta que si utilizamos código de otras personas pueden existir restricciones con respecto a que licencia podemos asignar a nuestro propio código.\n\nPaso 2: almacenar el material en un repositorio que nos permita publicarlo.\nUn lugar que nos permite realizar esta tarea es GitHub que se usa para desarrollar una variedad de materiales porque nos permite tener diferentes tipos de contenido como diapositivas, documentos, código fuente, imágenes y también nos permite desarrollarlo continuamente a través de un proceso iterativo y con comentarios de otros, ya que GitHub implementa un sistema de control de versiones. Si no has usado GitHub, podes utilizar este tutorial inicial sobre Git.\nPaso 3: agregar un indentificador de objeto digital (DOI) para que sea citable.\nPodemos hacer esto linkeando nuestro material en GitHub con la plataforma Zenodo. Este artículo tiene una explicación paso a paso para agregar el DOI a tus materiales.\n\nTambién contamos con la posibilidad de publicar nuestros materiales en el Journal of Open Source Education (Revista de Software Libre de Educación). JOSE es una revista de software educativo abierto y contenidos educativos de código abierto. Publica artículos breves que describen materiales educativos de código abierto o herramientas de software educativo de código abierto. El proceso de publicación es similar a otras revistas, con una revisión por pares y una publicación del artículo en caso que sea aceptado.\nUn par de puntos más sobre los materiales\n\nNunca cedas los derechos de tu material.\n\nTanto como si prefieres publicar tus materiales o guardarlos para ti, no dejes que un cliente te diga que tu material le pertenece o que tiene el derecho exclusivo a usarlo, a menos que que te haya pagado (muy bien) por ese privilegio.\n\nMateriales armados durante tu trabajo de empleado\n\nSi quiere utilizar externamente el material que has desarrollado en tu trabajo como empleado (por ejemplo, si has creado un curso para una universidad y ahora quieres utilizar esas lecciones en una conferencia), asegúrate de confirmar por escrito o por correo electrónico que tu empleador está de acuerdo antes de hacerlo."
  },
  {
    "objectID": "paid.html#getting-paid-exercises",
    "href": "paid.html#getting-paid-exercises",
    "title": "7  Como vivir de enseñar",
    "section": "7.5 Ejercicios",
    "text": "7.5 Ejercicios\n\n7.5.1 Sobre hombros de gigantes (individual/15’)\nEn la web del Journal of Open Source Education busca publicaciones relacionadas con los temas que enseñas. Analiza el formato y contenido de los artículos.\n\n¿Podrías presentar tus cursos de esta manera?\n¿Alguna de las publicaciones podría serte útil para tus propios cursos?\n¿Es claro la licencia de los trabajos? ¿Y como citarlos?\n\n\n\n7.5.2 Licencias (individual/15’)\nUtiliza el selector de licencias de Creative Commons para decidir que tipo de licencia usarías con tus materiales.\n\n¿Cuál elegiste? ¿Porqué?\n¿Usarías la misma para todos tus cursos?\n\n\n\n7.5.3 Cuanto cobrar (clase completa/15’)\n\nUtilicen el sitio web 500 Women Scientists’ Fix The Gap initiative para analizar cuanto se cobra por diferentes actividades de enseñanza.\n¿Es útil esta información? ¿Te parece que son necesarios estos sitios?\nComparen esos precios con los que ustedes cobran.\n(opcional) Agreguen sus datos y experiencias a la base de datos para ayudar a más personas a determinar un costo ético y justo para su actividad.\n\n\n\n7.5.4 Determinando la licencia de un material (en grupos/15’)\nRecorre las lecciones de The Carpentries y contesta:\n\n¿Dónde se especifica la licencia? ¿Cuál es?\n¿Qué podrías hacer con este material?\n\n\n\n7.5.5 Contribuyendo (en grupos/15’)\nEn el repositorio de este libro hay una lista de issues a resolver.\n\nSi ves alguno que te interesa, agrega tus comentarios o la solución al problema si es que la tienes.\nCrea un nuevo issue si tienen una sugerencia, arreglo, mejora, que no está en los issues existentes.\n\n\n\n\n\nBurke, Quinn, Cinamon Bailey, Louise Ann Lyon, and Emily Greeen. 2018. “Understanding the Software Development Industry’s Perspective on Coding Boot Camps Versus Traditional 4-Year Colleges.” In 2018 Technical Symposium on Computer Science Education (SIGCSE’18). Association for Computing Machinery (ACM). https://doi.org/10.1145/3159450.3159485.\n\n\nDevenyi, Gabriel A., Rémi Emonet, Rayna M. Harris, Kate L. Hertweck, Damien Irving, Ian Milligan, and Greg Wilson. 2018. “Ten Simple Rules for Collaborative Lesson Development.” PLoS Computational Biology 14 (3). https://doi.org/10.1371/journal.pcbi.1005963.\n\n\nLang, James M. 2016. Small Teaching: Everyday Lessons from the Science of Learning. Jossey-Bass.\n\n\nMcMillan Cottom, Tressie. 2017. Lower Ed: The Troubling Rise of for-Profit Colleges in the New Economy. The New Press.\n\n\nThayer, Kyle, and Amy J. Ko. 2017. “Barriers Faced by Coding Bootcamp Students.” In 2017 International Computing Education Research Conference (ICER’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3105726.3106176."
  },
  {
    "objectID": "rules.html#las-reglas",
    "href": "rules.html#las-reglas",
    "title": "1  Las Reglas",
    "section": "1.1 Las reglas",
    "text": "1.1 Las reglas\n\nSé amable: todo lo demás son detalles.\nRecuerda que tú no eres tus estudiantes…\n…que la mayoría de la gente prefiere fracasar antes que cambiar…\n…y que el 90% de la magia consiste en saber una cosa más (que tu público).\nNunca enseñes solo/a.\nNunca dudes en sacrificar la verdad por la claridad.\nHaz de cada error una lección.\nRecuerda que ninguna clase sobrevive al primer contacto con estudiantes…\n…que cada clase es demasiado corta para quien enseña y demasiado larga para quien la recibe…\n…y que nadie tendrá más entusiasmo que tú por tu clase."
  },
  {
    "objectID": "architecture.html#architecture-brain",
    "href": "architecture.html#architecture-brain",
    "title": "4  Arquitectura Cognitiva",
    "section": "4.1 ¿Qué es lo que sucede allí?",
    "text": "4.1 ¿Qué es lo que sucede allí?\n\n\n\nFigura 4.1— Arquitectura cognitiva\n\n\nLa Figure 4.1 es un modelo simplificado de la arquitectura cognitiva humana. El núcleo de este modelo es la separación entre la memoria a corto y a largo plazo vistas en la ?sec-memory-seven-plus-or-minus. La memoria a largo plazo es como tu sótano: almacena objetos de forma más o menos permanente pero tu conciencia no puede acceder a ella directamente. En cambio, confías en tu memoria a corto plazo, que es como el escritorio de tu mente.\nCuando necesitas algo, tu cerebro lo rescata de la memoria a largo plazo y lo coloca en la memoria a corto plazo. Por el contrario, la nueva información que llega a la memoria a corto plazo debe codificarse para poder ser almacenada en la memoria a largo plazo. Si esa información no está codificada y almacenada, no se recuerda y esto significa que no se ha aprendido.\nLa información ingresa a la memoria a corto plazo principalmente a través de tu canal verbal (para el habla) y del canal visual (para las imágenes) Un modelo más completo también incluiría el sentido del tacto, del olfato y del gusto, pero por ahora los ignoraremos.. Si bien la mayoría de las personas confía principalmente en su canal visual, cuando las imágenes y las palabras se complementan entre sí el cerebro hace un mejor trabajo al recordarlas: se codifican juntas, de modo que el recuerdo de una ayuda a activar el recuerdo de la otra.\nLas entradas lingüísticas y visuales son procesadas por diferentes partes del cerebro humano y a su vez los recuerdos lingüísticos y visuales son almacenados también de manera separada. Esto significa que correlacionar flujos de información lingüísticos y visuales requiere esfuerzo cognitivo: si alguien lee algo mientras lo escucha en voz alta, su cerebro no puede evitar comprobar que obtiene la misma información por ambos canales.\nPor lo tanto, el aprendizaje aumenta cuando la información se presenta de manera simultánea por dos canales diferentes, pero se reduce cuando esa información es redundante, en lugar de ser complementaria: tal fenómeno es conocido como efecto de atención dividida Mayer and Moreno (2003). Por ejemplo, en general las personas encuentran más difícil aprender de un video que tiene narración y capturas de pantalla que aprender de un video que únicamente tiene narración ó capturas (pero no ambos elementos), porque en el primer caso parte de su atención ha sido utilizada para chequear que la narración y las capturas se correspondan entre sí. Dos notables excepciones son las personas que aún no hablan bien un idioma y las que tienen algún impedimento auditivo u otras necesidades especiales, quienes quizás encuentren que el valor de la información redundante supera el esfuerzo de procesamiento adicional.\n\n4.1.1 Fragmento a fragmento\nEl efecto de la atención dividida explica por qué es más efectivo dibujar un diagrama fragmento a fragmento mientras enseñas, en lugar de presentar todo el gráfico de una sola vez. Si las partes de un diagrama aparecen al mismo tiempo en que los gráficos son explicados, el/la estudiante correlaciona ambos elementos en su memoria. Así que luego, al enfocarte en una parte del diagrama, es más probable que tu estudiante active la recuperación de lo que fue dicho cuando esa parte fue dibujada.\n\nEl efecto de la atención dividida no significa que los/las estudiantes no deberían intentar conciliar múltiples flujos de información entrantes — después de todo, esto es lo que tienen que hacer en el mundo real Atkinson et al. (2000) —. En cambio, significa que la instrucción no debería solicitar a las personas que lo hagan mientras están incorporando habilidades por primera vez: el uso de múltiples fuentes de información de manera simultánea debe tratarse como una tarea de aprendizaje separada.\n\n4.1.2 No todos los gráficos son equivalentes\nSung and Mayer (2012) presenta un elegante estudio que distingue los gráficos seductores (los cuales son altamente interesantes pero no son directamente relevantes al objetivo de la enseñanza), los gráficos decorativos (los cuales son neutros pero no son directamente relevantes al objetivo de la enseñanza), y por último los gráficos instructivos (los cuales sí son directamente relevantes al objetivo de la enseñanza). Los/las estudiantes que recibieron cualquier tipo de gráfico calificaron al material con un mayor puntaje, pero en verdad solo quienes recibieron gráficos instructivos obtuvieron mejores resultados.\nDel mismo modo, Stampfer and Koedinger (2013), @Stam2014 descubrió que tener más información en realidad puede disminuir el rendimiento. Les mostraron a niños/as: imágenes, imágenes más números, o simplemente números, para que realicen dos tareas. Para algunos/as niños/as, recibir imágenes o bien imágenes más números fue mejor que recibir únicamente números; pero para otros/as, recibir imágenes superó a recibir imágenes más números, lo que superó a solo tener números."
  },
  {
    "objectID": "architecture.html#architecture-load",
    "href": "architecture.html#architecture-load",
    "title": "4  Arquitectura Cognitiva",
    "section": "4.2 Carga cognitiva",
    "text": "4.2 Carga cognitiva\nEn Kirschner, Sweller, and Clark (2006), Kirschner, Sweller y Clark escribieron:\n\nAunque los enfoques educativos no guiados o mínimamente guiados son muy populares e intuitivamente atractivos…estos enfoques ignoran las estructuras que constituyen la arquitectura cognitiva humana así como la evidencia de estudios empíricos de los últimos cincuenta años. Dichas evidencias indican sistemáticamente que la instrucción guiada mínimamente es menos eficaz y menos eficiente que los enfoques educacionales con un fuerte énfasis en la orientación del proceso de aprendizaje del estudiante. La ventaja de la orientación disminuye sólo cuando los/las estudiantes tienen un conocimiento previo suficientemente elevado para proporcionar una orientación “interna”.\n\nMás allá de la jerga, lo que estos autores afirmaban es que el hecho de que los/las estudiantes hagan sus propias preguntas, establezcan sus propias metas y encuentren su propio camino a través de un tema es menos efectivo que mostrarles cómo hacer las cosas paso a paso. El enfoque “elige tu propia aventura” se conoce como aprendizaje basado en la indagación y es intuitivamente atractivo: después de todo, ¿quién se opondría a tener estudiantes que utilicen su propia iniciativa para resolver problemas del mundo real de forma realista? Sin embargo, pedir a los/las estudiantes que lo hagan en un nuevo dominio es una sobrecarga, ya que les exige que dominen al mismo tiempo el contenido fáctico de un dominio y las estrategias de resolución de problemas. Más específicamente, la teoría de la carga cognitiva propone que las personas tienen que lidiar con tres cosas cuando está aprendiendo:\n\nCarga intrínseca\n\nes lo que las personas tienen que tener en cuenta para aprender el material nuevo.\n\nCarga pertinente\n\nes el esfuerzo mental (deseable) requerido para vincular la nueva información con la antigua, que es una de las distinciones entre el aprendizaje y la memorización.\n\nCarga extrínseca\n\nes cualquier cuestión que distraiga del aprendizaje.\n\n\nLa teoría de la carga cognitiva sostiene que las personas tienen que dividir una cantidad fija de memoria de trabajo entre estas tres cosas. Nuestro objetivo como docentes es maximizar la memoria disponible para manejar la carga intrínseca, lo cual significa reducir la carga pertinente en cada paso y eliminar la carga extrínseca.\n\n4.2.1 Problemas de Parsons\nUn tipo de ejercicio que puede ser explicado en términos de carga cognitiva se utiliza a menudo en la enseñanza de idiomas. Supongamos que le pides a alguien que traduzca la frase “¿Cómo está tu rodilla hoy?” de castellano a catalán. Para resolver el problema, necesitan recordar tanto el vocabulario como la gramática, que es una carga cognitiva doble. Si, en lugar de traducir desde cero, les pides que pongan “com”, “està”, “el”, “teu”, “genoll” y “avui” en el orden correcto, les permites que se centren únicamente en el aprendizaje de la gramática. Sin embargo, si escribes estas palabras en seis fuentes o colores diferentes, has aumentado la carga cognitiva extrínseca, porque involuntariamente (y posiblemente de manera inconsciente) invertirán algo de esfuerzo tratando de averiguar si las diferencias entre las palabras son significativas de acuerdo a sus colores Figure 4.2.\n\n\n\nFigura 4.2— Construyendo una oración\n\n\nEl equivalente en programación de este ejemplo se llama problema de ParsonsNombrado así debido a uno de sus creadores. Parsons and Haden (2006).\nCuando enseñes a programar, puedes darles a tus estudiantes las líneas de código que necesitan para resolver un problema y pedirles que las ordenen en el orden correcto. Esto les permite concentrarse en el flujo de control y en las dependencias de datos, sin distraerse con la denominación de las variables o tratando de recordar qué funciones llamar. Múltiples estudios han demostrado que los problemas de Parsons demandan menos tiempo de resolución y producen resultados educativos equivalentes @Eric2017\n\n\n4.2.2 Ejemplos desvanecidos (o con espacios en blanco)\nOtro tipo de ejercicio que se puede explicar en términos de carga cognitiva es dar a tus estudiantes una serie de ejemplos desvanecidos (faded examples en inglés). El primer ejemplo de una serie presenta un uso completo de una estrategia particular de resolución de problemas. El siguiente problema es del mismo tipo, pero tiene algunas lagunas que tu estudiante debe llenar. Cada problema sucesivo da menos andamiaje (scaffolding en inglés), hasta que se pide resolver un problema completo desde cero. Al enseñar álgebra en la escuela secundaria, por ejemplo, podríamos comenzar con esto:\n\n\n\n(4x + 8)/2\n=\n5\n\n\n4x + 8\n=\n2 * 5\n\n\n4x + 8\n=\n10\n\n\n4x\n=\n10 - 8\n\n\n4x\n=\n2\n\n\nx\n=\n2 / 4\n\n\nx\n=\n1 / 2\n\n\n\ny luego pedir que los/las estudiantes resuelvan esto:\n\n\n\n(3x - 1)*3\n=\n12\n\n\n3x - 1\n=\n_ / _\n\n\n3x - 1\n=\n4\n\n\n3x\n=\n_\n\n\nx\n=\n_ / 3\n\n\nx\n=\n_\n\n\n\ny esto:\n\n\n\n(5x + 1)*3\n=\n4\n\n\n5x + 1\n=\n_\n\n\n5x\n=\n_\n\n\nx\n=\n_\n\n\n\ny, finalmente, esto:\n\n\n\n(2x + 8)/4\n=\n1\n\n\nx\n=\n_\n\n\n\nUn ejercicio similar para enseñar Python podría comenzar mostrando a estudiantes cómo encontrar la longitud total de una lista de palabras:\n# largo_total([\"rojo\", \"verde\", \"azul\"]) => 12\ndefine largo_total(lista_de_palabras):\n    total = 0\n    for palabra in lista_de_palabras:\n        total = total + length(palabra)\n    return total\ny luego pidiendo que llenen los espacios en blanco en este otro código (lo que centra su atención en las estructuras de control):\n# largo_palabra([\"rojo\", \"verde\", \"azul\"]) => [3, 5, 4]\ndefine largo_palabra(lista_de_palabras):\n    lista_de_longitudes = []\n    for ____ in ____:\n        append(lista_de_longitudes, ____)\n    return lista_de_longitudes\nEl siguiente problema podría ser este (que centra su atención en actualizar el resultado final):\n# juntar_todo([\"rojo\", \"verde\", \"azul\"]) => \"rojoverdeazul\"\ndefine juntar_todo(lista_de_palabras):\n    palabras_unidas = ____\n    for ____ in ____:\n        ____\n    return palabras_unidas\nFinalmente, los/las estudiantes tendrán que escribir una función completa por su cuenta:\n# generar_acronimo([\"rojo\", \"verde\", \"azul\"]) => \"RVA\"\ndefine generar_acronimo(lista_de_palabras):\n    ____\nLos ejemplos desvanecidos funcionan porque presentan la estrategia de resolución de problemas fragmento por fragmento. En cada paso, los/las estudiantes tienen un nuevo problema que abordar, lo cual es menos intimidante que una pantalla en blanco o una hoja de papel en blanco (?sec-classroom-practices). También anima a que los/las estudiantes piensen en las similitudes y diferencias entre varios enfoques, lo que ayuda a crear los vínculos en sus modelos mentales y de ese modo facilita la recuperación de la información.\nLa clave para construir un buen ejemplo desvanecido es pensar en la estrategia de resolución de problemas que se pretende enseñar. Por ejemplo, los problemas de programación sobre todo utilizan el patrón de diseño acumulativo, en el que los resultados del procesamiento de elementos de una colección se agregan repetidamente a una sola variable de alguna manera para crear el resultado final.\n\n4.2.3 Aprendizaje cognitivo\nUn modelo alternativo de aprendizaje e instrucción que también usa andamiaje y desvanecimiento es el aprendizaje cognitivo, que enfatiza la forma en que un/a docente transmite habilidades y conocimientos a un/a estudiante. El/la docente proporciona modelos de desempeño y resultados, luego entrena a las personas novatas explicando qué están haciendo y por qué Collins, Brown, and Holum (1991), Caspersen and Bennedsen (2007). El/la estudiante reflexiona sobre su propia resolución de problemas, por ejemplo, pensando en voz alta o criticando su propio trabajo, y finalmente explora problemas de su propia elección.\nEste modelo nos dice que los/las docentes deben presentar varios ejemplos al explicar una nueva idea para que los/las estudiantes puedan ver qué generalizar, y que deben variar la forma del problema para dejar en claro cuáles son y cuáles no son características superficialesPor mucho tiempo creí que la variable que contenía el valor que una función iba a devolver tenía que llamarse resultado, porque mi docente siempre usaba ese nombre en los ejemplos.. Los problemas deben presentarse en contextos del mundo real, y debemos fomentar la autoexplicación para ayudar a los/las estudiantes a organizarse y dar sentido a lo que se les acaba de enseñar (?sec-individual-strategies).\n\n\n\n4.2.4 Sub-objetivos etiquetados\nEtiquetar sub-objetivos significa dar nombre a los pasos en una descripción paso a paso de un proceso de resolución de problemas. Margulieux, Catrambone, and Guzdial (2016) , Morrison et al. (2016) descubrieron que al etiquetar los sub-objetivos, los/las estudiantes resolvían mejor los problemas de Parsons, y se observa el mismo beneficio en otros dominios Margulieux, Guzdial, and Catrambone (2012). Volviendo al ejemplo de Python usado anteriormente, los objetivos secundarios para encontrar la longitud total de una lista de palabras o construir un acrónimo son:\n\nCrea un valor vacío del tipo a obtener.\nA partir de la variable del bucle, obtén el valor que se agregará al resultado.\nActualiza el resultado con ese valor.\n\nEtiquetar sub-objetivos funciona porque agrupar los pasos relacionados en fragmentos con nombre (?sec-memory-seven-plus-or-minus) ayuda a tus estudiantes a distinguir lo que es genérico de lo que es específico del problema en cuestión. También les ayuda a construir un modelo mental de ese tipo de problema, de modo que luego pueden resolver otros problemas de ese tipo, y les da una oportunidad natural para la auto-explicación (?sec-individual-strategies).\n\n\n4.2.5 Manuales mínimos\nLa aplicación más pura de la teoría de la carga cognitiva puede ser el manual mínimo de John Carroll Carroll et al. (1987), Carroll (2014). Su punto de partida es una cita de un usuario: “Quiero aprender a hacer algo, no aprender a hacer todo”. Carroll y sus colegas rediseñaron la capacitación para presentar cada idea como una tarea autónoma de una sola página: un título que describa de qué trata la página, instrucciones paso a paso sobre cómo hacer una sola cosa (por ejemplo, cómo eliminar una línea en blanco en un editor de texto) y luego varias notas sobre cómo reconocer y resolver problemas comunes. Descubrieron que reescribir los materiales de capacitación de esta manera los hacía más cortos en general y que las personas que los usaban aprendían más rápido. Estudios posteriores confirmaron que este enfoque superó al enfoque tradicional independientemente de la experiencia previa con computadoras Lazonder and van der Meij (1993). Carroll (2014) resumieron este trabajo diciendo:\n\nNuestros diseños “minimalistas” buscaban aprovechar la iniciativa de cada usuario/a y el conocimiento previo, en lugar de controlarlo mediante advertencias y pasos ordenados. Se enfatizaba que los/las usuarios/as generalmente aportan mucha experiencia y conocimiento a este aprendizaje, por ejemplo, conocimiento sobre el dominio de la tarea, y que dicho conocimiento podría ser un recurso para los/as diseñadores/as de instructivos. El minimalismo aprovechó los episodios de reconocimiento, diagnóstico y corrección de errores, en lugar de intentar simplemente prevenirlos. Es decir, enmarcó la resolución de problemas y la corrección como oportunidades de aprendizaje en lugar de aberraciones."
  },
  {
    "objectID": "architecture.html#architecture-theory",
    "href": "architecture.html#architecture-theory",
    "title": "4  Arquitectura Cognitiva",
    "section": "4.3 Otros modelos de aprendizaje",
    "text": "4.3 Otros modelos de aprendizaje\nQuienes critican la teoría de la carga cognitiva a veces han argumentado que cualquier resultado puede justificarse a posteriori al etiquetar como carga extrínseca a aquello que perjudica el rendimiento y como carga intrínseca o pertinente a aquello que no lo perjudica. Sin embargo, la instrucción basada en la teoría de la carga cognitiva es innegablemente efectiva. Por ejemplo, Mason, Seton, and Cooper (2016) rediseñó un curso de base de datos para eliminar la atención dividida y los efectos de redundancia y para proporcionar ejemplos prácticos y con sub-objetivos. El nuevo curso redujo la tasa de reprobación del examen en un 34% y aumentó la satisfacción de los/las estudiantes.\nUna década después de la publicación de Kirschner, Sweller, and Clark (2006), un número creciente de personas cree que la teoría de la carga cognitiva y los enfoques basados en la investigación son compatibles si se ven de la manera correcta. Kalyuga and Singh (2015) sostiene que la teoría de la carga cognitiva es básicamente una microgestión del aprendizaje dentro de un contexto más amplio que considera cuestiones como la motivación, mientras que Kirschner et al. (2018) extiende la teoría de la carga cognitiva para incluir aspectos colaborativos del aprendizaje. Al igual que con Markovits and Weinstein (2018) (discutido en la ?sec-individual-strategies), las perspectivas de los/las investigadores/as pueden diferir, pero la implementación práctica de sus teorías a menudo termina siendo la misma.\nUno de los desafíos en la investigación educativa es que lo que queremos decir con “aprendizaje” resulta complicado una vez que se mira más allá del aula occidental estandarizada. Dos perspectivas específicas de la psicología educacional han influido en este libro. La que hemos utilizado hasta ahora es el cognitivismo, que se centra en conceptos como el reconocimiento de patrones, la formación de la memoria y el recuerdo. Es bueno para responder preguntas de bajo nivel, pero generalmente ignora cuestiones más importantes como, “¿Qué queremos decir con ‘aprendizaje’?” y “¿Quién tiene poder de decisión?” La segunda perspectiva utilizada es el aprendizaje situado, que se centra en integrar a las personas en una comunidad y reconoce que la enseñanza y el aprendizaje siempre están arraigados en quiénes somos y quiénes aspiramos a ser. Lo discutiremos con más detalle en el ?sec-community.\nEl sitio web de [Teorías de Aprendizaje][learning-theories] (Learning Theories en inglés) y Wiburg et al. (2016) tienen buenos resúmenes de estas y otras perspectivas. Además del cognitivismo, las que se encuentran con mayor frecuencia incluyen el conductismo (que trata la educación como un condicionamiento de estímulo/respuesta), el constructivismo (que considera al aprendizaje como un proceso activo durante el cual los/las estudiantes construyen conocimiento por sí mismos/as) y el conectivismo (que sostiene que el conocimiento se distribuye, que el aprendizaje es el proceso de navegar, crecer y podar conexiones, y que enfatiza los aspectos sociales del aprendizaje que internet hace posible). Estas perspectivas pueden ayudarnos a organizar nuestros pensamientos, pero en la práctica siempre tenemos que probar nuevos métodos en clase, con estudiantes reales, para descubrir qué tan bien equilibran las muchas fuerzas en juego."
  },
  {
    "objectID": "architecture.html#architecture-exercises",
    "href": "architecture.html#architecture-exercises",
    "title": "4  Arquitectura Cognitiva",
    "section": "4.4 Ejercicios",
    "text": "4.4 Ejercicios\n\n4.4.1 Crear un ejemplo desvanecido (parejas/30’)\nEs muy común que en los programas se cuenten cuántas cosas caen en diferentes categorías: por ejemplo, cuántas veces aparecen colores diferentes en una imagen o cuántas veces aparecen palabras diferentes en un párrafo de texto.\n\nCrea un ejemplo breve (no más de 10 líneas de código) que muestre a las personas cómo hacer esta tarea. Luego, crea un segundo ejemplo que resuelva un problema similar de una manera similar, pero que tenga un par de espacios en blanco para que los/las estudiantes los completen. ¿Cómo decides qué desvanecer? ¿Cuál sería el siguiente ejemplo de la serie?\nDefine el público de tus ejemplos. Por ejemplo, ¿son personas novatas que solo conocen algunos conceptos básicos de programación? ¿O son estudiantes con alguna experiencia en programación?\nMuestra tu ejemplo a tu pareja, pero no le digas para qué nivel crees que es. Una vez que tu pareja haya llenado los espacios en blanco, pídele que adivine el nivel de estudiante previsto.\n\nSi entre tus estudiantes hay personas que no programan en absoluto, intenta ubicarlos en diferentes grupos y pídeles que hagan el papel de estudiantes en sus grupos. Alternativamente, elige un dominio de problema diferente con el que desarrollar tu ejemplo desvanecido.\n\n\n4.4.2 Clasificación de carga (grupos pequeños/15’)\n\nElige una lección corta que alguna persona de tu grupo haya enseñado o tomado recientemente.\nHaz un listado con viñetas de las ideas, instrucciones y explicaciones que contiene la lección.\nClasifica cada elemento de tu listado como carga intrínseca, pertinente o extrínseca. ¿En qué ítems todas las personas del grupo estuvieron de acuerdo? ¿En cuáles estuvieron en desacuerdo y por qué?\n\n(El ejercicio “Notar tus puntos ciegos” en la ?sec-memory-exercises te dará una idea de cuán detallado debe ser tu listado de ítems).\n\n\n4.4.3 Crear un problema de Parsons (en parejas/20’)\nEscribe cinco o seis líneas de código que hagan algo útil, mézclalas y pídele a tu pareja que las ponga en orden. Si estás utilizando un lenguaje basado en indentación como Python, no utilices sangría en ninguna de las líneas; si estás utilizando un lenguaje de llaves como Java, no incluyas ninguna de las llaves. (Si tu grupo incluye personas que no programan, usa un dominio de problema diferente, como, por ejemplo, hacer budín de pan).\n\n\n4.4.4 Manuales mínimos (individual/20’)\nEscribe una guía de una página para hacer algo que tus estudiantes puedan encontrar en una de tus clases, como centrar el texto horizontalmente o imprimir un número con un cierto número de dígitos después del punto decimal. Intenta enumerar al menos tres o cuatro resultados incorrectos que tu estudiante pueda obtener e incluye una explicación de una o dos líneas de por qué ocurre cada uno y cómo corregirlo.\n\n\n4.4.5 Aprendizaje cognitivo (parejas/15’)\nElige un problema de codificación que puedas resolver en dos o tres minutos y piensa en voz alta mientras lo resuelves, al mismo tiempo tu pareja te hace preguntas sobre lo que estás haciendo y por qué. No solo explica lo que estás haciendo, sino también por qué lo estás haciendo, cómo sabes que es lo correcto y qué alternativas has considerado pero descartado. Cuando hayas terminado, intercambia roles con tu pareja y repite el ejercicio.\n\n\n4.4.6 Ejemplos resueltos (parejas/15’)\nVer ejemplos resueltos ayuda a las personas a aprender a programar más rápido que simplemente escribiendo mucho código Skudder and Luxton-Reilly (2014), y desconstruir el código rastreándolo o depurándolo también aumenta el aprendizaje Griffin (2016). Trabajando en parejas, revisa un fragmento de código de 10 a 15 líneas y explica qué hace cada declaración y por qué es necesaria. ¿Cuánto tiempo demoras? ¿Cuántas cosas crees que necesitas explicar por línea de código?\n\n\n4.4.7 Gráficos críticos (individual/30’)\nMayer (2009) , Miller (2016) presentan seis principios para una buena enseñanza de gráficos:\n\nSeñalización:\n\nresalta visualmente los puntos más importantes para que se destaquen del material menos crítico.\n\nContigüidad espacial:\n\ncoloca los subtítulos lo más cerca posible de los gráficos para compensar el costo de cambiar entre la imagen y el texto.\n\nContigüidad temporal:\n\nPresenta narraciones habladas y gráficos tan seguidos en el tiempo como sea práctico. (Presentar ambos a la vez es mejor que presentarlos uno tras otro).\n\nSegmentación:\n\nCuando presentes una secuencia larga de material o cuando tus estudiantes no tengan experiencia en el tema, divide la presentación en segmentos cortos y deja que los/las estudiantes controlen la rapidez con que avanzan al siguiente.\n\nPre-entrenamiento:\n\nSi tus estudiantes no conocen los conceptos y la terminología principales que utilizas en la presentación, enseña solo esos conceptos y términos de antemano.\n\nModalidad:\n\nlas personas aprenden mejor de las imágenes con narración que de las imágenes con texto, a menos que no sean hablantes nativas del idioma de la lección o que haya palabras o símbolos técnicos.\n\n\nElige un video de una lección o charla en línea que utilice diapositivas u otras presentaciones estáticas y califica sus gráficos como “deficientes”, “promedio” o “buenos” de acuerdo con estos seis criterios."
  },
  {
    "objectID": "architecture.html#revisión",
    "href": "architecture.html#revisión",
    "title": "4  Arquitectura Cognitiva",
    "section": "4.5 Revisión",
    "text": "4.5 Revisión\n\n\n\nConceptos: Carga cognitiva\n\n\n\n\n\n\nAtkinson, Robert K., Sharon J. Derry, Alexander Renkl, and Donald Wortham. 2000. “Learning from Examples: Instructional Principles from the Worked Examples Research.” Review of Educational Research 70 (2): 181–214. https://doi.org/10.3102/00346543070002181.\n\n\nCarroll, John. 2014. “Creating Minimalist Instruction.” International Journal of Designs for Learning 5 (2). https://doi.org/10.14434/ijdl.v5i2.12887.\n\n\nCarroll, John, Penny Smith-Kerker, James Ford, and Sandra Mazur-Rimetz. 1987. “The Minimal Manual.” Human-Computer Interaction 3 (2): 123–53. https://doi.org/10.1207/s15327051hci0302_2.\n\n\nCaspersen, Michael E., and Jens Bennedsen. 2007. “Instructional Design of a Programming Course.” In 2007 International Computing Education Research Conference (ICER’07). Association for Computing Machinery (ACM). https://doi.org/10.1145/1288580.1288595.\n\n\nCollins, Allan, John Seely Brown, and Ann Holum. 1991. “Cognitive Apprenticeship: Making Thinking Visible.” American Educator 6: 38–46.\n\n\nGriffin, Jean M. 2016. “Learning by Taking Apart.” In 2016 Conference on Information Technology Education (SIGITE’16). ACM Press. https://doi.org/10.1145/2978192.2978231.\n\n\nKalyuga, Slava, and Anne-Marie Singh. 2015. “Rethinking the Boundaries of Cognitive Load Theory in Complex Learning.” Educational Psychology Review 28 (4): 831–52. https://doi.org/10.1007/s10648-015-9352-0.\n\n\nKirschner, Paul A., John Sweller, and Richard E. Clark. 2006. “Why Minimal Guidance During Instruction Does Not Work: An Analysis of the Failure of Constructivist, Discovery, Problem-Based, Experiential, and Inquiry-Based Teaching.” Educational Psychologist 41 (2): 75–86. https://doi.org/10.1207/s15326985ep4102_1.\n\n\nKirschner, Paul A., John Sweller, Femke Kirschner, and Jimmy Zambrano R. 2018. “From Cognitive Load Theory to Collaborative Cognitive Load Theory.” International Journal of Computer-Supported Collaborative Learning, April. https://doi.org/10.1007/s11412-018-9277-y.\n\n\nLazonder, Ard W., and Hans van der Meij. 1993. “The Minimal Manual: Is Less Really More?” International Journal of Man-Machine Studies 39 (5): 729–52. https://doi.org/10.1006/imms.1993.1081.\n\n\nMargulieux, Lauren E., Richard Catrambone, and Mark Guzdial. 2016. “Employing Subgoals in Computer Programming Education.” Computer Science Education 26 (1): 44–67. https://doi.org/10.1080/08993408.2016.1144429.\n\n\nMargulieux, Lauren E., Mark Guzdial, and Richard Catrambone. 2012. “Subgoal-Labeled Instructional Material Improves Performance and Transfer in Learning to Develop Mobile Applications.” In 2012 International Computing Education Research Conference (ICER’12), 71–78. ACM Press. https://doi.org/10.1145/2361276.2361291.\n\n\nMarkovits, Rebecca A., and Yana Weinstein. 2018. “Can Cognitive Processes Help Explain the Success of Instructional Techniques Recommended by Behavior Analysts?” NPJ Science of Learning 3 (1). https://doi.org/10.1038/s41539-017-0018-1.\n\n\nMason, Raina, Carolyn Seton, and Graham Cooper. 2016. “Applying Cognitive Load Theory to the Redesign of a Conventional Database Systems Course.” Computer Science Education 26 (1): 68–87. https://doi.org/10.1080/08993408.2016.1160597.\n\n\nMayer, Richard E. 2009. Multimedia Learning. Second. Cambridge University Press.\n\n\nMayer, Richard E., and Roxana Moreno. 2003. “Nine Ways to Reduce Cognitive Load in Multimedia Learning.” Educational Psychologist 38 (1): 43–52. https://doi.org/10.1207/s15326985ep3801_6.\n\n\nMiller, Michelle D. 2016. Minds Online: Teaching Effectively with Technology. Harvard University Press.\n\n\nMorrison, Briana B., Lauren E. Margulieux, Barbara J. Ericson, and Mark Guzdial. 2016. “Subgoals Help Students Solve Parsons Problems.” In 2016 Technical Symposium on Computer Science Education (SIGCSE’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2839509.2844617.\n\n\nParsons, Dale, and Patricia Haden. 2006. “Parson’s Programming Puzzles: A Fun and Effective Learning Tool for First Programming Courses.” In 2006 Australasian Conference on Computing Education (ACE’06), 157–63. Australian Computer Society.\n\n\nSkudder, Ben, and Andrew Luxton-Reilly. 2014. “Worked Examples in Computer Science.” In 2014 Australasian Computing Education Conference, (ACE’14).\n\n\nStampfer, Eliane, and Kenneth R. Koedinger. 2013. “When Seeing Isn’t Believing: Influences of Prior Conceptions and Misconceptions.” In 2013 Annual Meeting of the Cognitive Science Society (CogSci’13).\n\n\nSung, Eunmo, and Richard E. Mayer. 2012. “When Graphics Improve Liking but Not Learning from Online Lessons.” Computers in Human Behavior 28 (5): 1618–25. https://doi.org/10.1016/j.chb.2012.03.026.\n\n\nWiburg, Karin, Julia Parra, Gaspard Mucundanyi, Jennifer Green, and Nate Shaver, eds. 2016. The Little Book of Learning Theories. Second. CreateSpace."
  },
  {
    "objectID": "community.html#community-learn-then-do",
    "href": "community.html#community-learn-then-do",
    "title": "5  Construyendo una comunidad de práctica",
    "section": "5.1 Aprende, luego hazlo",
    "text": "5.1 Aprende, luego hazlo\nEl primer paso para construir una comunidad es decidir si deberías construirla o si sería más efectivo unirte a una organización existente. Miles de grupos ya están enseñando habilidades tecnológicas, desde el [4-H Club][4h-club] y [programas de alfabetización][frontier-college] hasta organizaciones de programación sin fines de lucro como [Black Girls Code][black-girls-code] (Chicas Negras Programan, en inglés) y [Bridge][bridge] (Puente, en inglés). En los últimos años estas comunidades de práctica se han desarrollado también en Latinoamérica, desde aquellas que enseñan habilidades para enseñar como [MetaDocencia][metadocencia], las que intentan achicar la brecha de genero en STEAM como [GeoLatinas][geolatinas], [Las de Sistemas][las-de-sistemas] y [Mujeres en Tecnología][mujeres-en-tecnologia] hasta las que son parte de las organizaciones globales como los capítulos de [R-Ladies][r-ladies] (Mujeres de R en inglés) y [PyLadies][pyladies] (Mujeres de Python en inglés). Unirse a un grupo existente te dará ventajas en la enseñanza, un conjunto inmediato de colegas y la oportunidad de aprender más sobre cómo manejar las cosas; Con suerte, aprender esas habilidades a la par que haces una contribución inmediata será más importante que poder decir que eres la persona que fundó algo nuevo.\nYa sea que te unas a un grupo existente o inicies uno propio, tu efectividad será mayor si investigas un poco sobre organización de comunidades. Alinsky (1989), Lakey (2018) son probablemente los trabajos más conocidos sobre organización de grupos de base, mientras que Brown (2007), Midwest Academy (2010), Lakey (2018) son manuales prácticos basados en décadas de experiencia. Si quieres leer más profundamente, Adams and Horton (1975) es la historia de la Highlander Folk School, cuyo enfoque ha sido emulado por muchos grupos exitosos, mientras que Spalding (2014) es una guía para enseñar a personas adultas escrita por alguien con profundas raíces personales en la organización de grupos de base y [NonprofitReady.org][non-profit-ready] ofrece capacitación profesional gratuita."
  },
  {
    "objectID": "community.html#community-four-steps",
    "href": "community.html#community-four-steps",
    "title": "5  Construyendo una comunidad de práctica",
    "section": "5.2 Cuatro pasos",
    "text": "5.2 Cuatro pasos\nTodas las personas que se involucren con tu organización (incluyéndote) pasan por cuatro fases: reclutamiento, incorporación, retención y retiro. No necesitas preocuparte por este ciclo cuando estés gestando una comunidad, pero sí cuando llegues al punto en que se involucren más de un puñado de personas no fundadoras.\nEl primer paso es reclutar voluntarias/os. Tu estrategia de marketing debería ayudarte con esto, al garantizar que tu organización sea localizable y al lograr que la misión y valor sean claros para las personas que quieran involucrarse (?sec-outreach). Comparte historias que ejemplifiquen el tipo de ayuda que buscas así como historias sobre las personas a las que estás ayudando, y deja en claro que hay muchas maneras de involucrarse (discutiremos esto con más detalle en la siguiente sección).\nLa mejor fuente de potenciales reclutas son tus propias clases: el método “verlo, practicarlo, enseñarlo” ha funcionado bien para organizaciones voluntarias desde que las organizaciones voluntarias existen. Asegúrate de que cada clase u otro tipo de encuentro termine informando a las personas cómo pueden ayudar y que su ayuda será bienvenida. De esta manera, las personas que se acerquen a ti sabrán lo que haces y habrán tenido la experiencia reciente de ser receptores de lo que ofreces, lo que contribuye a que tu organización evite el punto ciego de la persona experta a nivel de la comunidad (?sec-memory).\n\n5.2.1 Empieza pequeño\nPedirle a una persona que haga algo pequeño por ti es un buen paso para lograr que haga algo más grande. Esto se basa en el [efecto Ben Franklin][ben-franklin-effect]: quien ya le ha hecho un favor a alguien es más propensa/o a hacerle otro favor a la misma persona, (en comparación con la disposisión que tiene quien ha recibido un favor). En el marco de una comunidad de enseñanza, puedes solicitar correcciones de redacción o de errores ortográficos en los materiales de tus lecciones, o sugerencias de nuevos ejercicios o ejemplos. Escribir tus materiales de una manera mantenible (?sec-process-maintainability), le da a tu comunidad la oportunidad de practicar algunas habilidades útiles y te permite a ti comenzar una conversación que podría conducir a sumar una nueva persona.\n\nLa mitad del ciclo de vida de una persona voluntaria es la incorporación y la retención, que cubriremos en ?sec-community-onboarding> y ?sec-community-retention>. El último paso es cuando alguien deja de ser parte de la organización: eventualmente, el resto de las personas siguen adelante, y las organizaciones saludables se preparan para ese momento. Algunas cosas simples pueden generar una sensación positiva ante el cambio, tanto para la persona que se va como para todas las que se quedan:\n\nPide a las personas ser explícitas sobre su partida\n\npara que el resto sepa que realmente se han ido.\n\nAsegúrate de que no se sientan con vergüenza por irse\n\no por cualquier otro motivo.\n\nDales la oportunidad de transmitir sus conocimientos.\n\nPor ejemplo, puedes pedirles que asesoren a alguien durante algunas semanas como su última contribución, o que sean entrevistadas/os por alguien que se queda en la organización para recopilar cualquier historia que valga la pena volver a contar.\n\nAsegúrate de que entreguen las llaves.\n\nEs incómodo descubrir, seis meses después de que alguien se fue, que esa era la única persona que sabía cómo reservar un lugar para el picnic anual.\n\nHaz un seguimiento 2 a 3 meses después de que se vayan\n\npara ver si tienen más ideas sobre lo que funcionó y lo que no funcionó mientras estuvieron contigo, o algún consejo para ofrecer que tampoco pensaron dar o que se sentían incómodas/os de dar mientras se iban.\n\nAgradéceles,\n\ntanto cuando se van como la próxima vez que tu grupo se reúna.\n\n\n\n5.2.2 El manual que falta\nSe han escrito miles de libros sobre cómo iniciar una empresa. Solo unos pocos describen cómo cerrar una o cómo dejarla sin problemas, a pesar de que existe un final para cada comienzo. Si alguna vez escribes uno, por favor házmelo saber."
  },
  {
    "objectID": "community.html#community-onboarding",
    "href": "community.html#community-onboarding",
    "title": "5  Construyendo una comunidad de práctica",
    "section": "5.3 Incorporación",
    "text": "5.3 Incorporación\nDespués de decidir formar parte de un grupo, la gente necesita ponerse al día, y Sholler et al. (2019) resume lo que sabemos al respecto. La primera regla es tener y hacer cumplir un código de conducta (?sec-classroom-coc) y encontrar alguien independiente a tu comunidad que acepte recibir y revisar informes de comportamiento inapropiado. Alguien fuera de la organización tendrá la objetividad de la que las/los integrantes pueden carecer. Además, una persona externa puede proteger a quienes dudan si denunciar incidentes relacionados a las personas a cargo de proyectos por temor a represalias o daños a su reputación. El equipo que lidera el proyecto debe hacer públicas las decisiones donde se aplique el código de conducta para que la comunidad reconozca que realmente se toma en serio, que se aplica y se le da relevancia.\nLa siguiente regla más importante es ser amigable. Como dijo Fogel Fogel (2005), “Si un proyecto no hace una buena primera impresión, quienes recién llegan van a esperar mucho tiempo antes de darle una segunda oportunidad.” Otras investigaciones han confirmado empíricamente la importancia de entornos sociales, amables y educados en proyectos abiertos Singh (2012),Steinmacher et al. (2013),Steinmacher et al. (2018):\n\nPublica un mensaje de bienvenida\n\nen las páginas de redes sociales, canales de comunicación de tu comunidad, foros o listas de correo electrónico del proyecto. Los proyectos podrían considerar mantener un canal o lista de “Bienvenida”, donde alguna de las personas que lideran el proyecto o gestiona la comunidad escribe una breve publicación pidiendo que quienes recién llegan se presenten.\n\nAyuda a las personas a hacer una contribución inicial,\n\npor ejemplo, puedes etiquetar lecciones particulares o talleres que necesitan trabajo como “adecuados para las personas recién llegadas” y pedir a miembros ya establecidos que no las arreglen. De esta forma se aseguran lugares adecuados para que las personas recién llegadas comiencen a trabajar.\n\nDirige a las personas recién llegadas hacia miembros similares a ellas\n\npara demostrarles que pertenecen a tu comunidad.\n\nComparte los recursos esenciales del proyecto con las personas recién llegadas,\n\ntal como las normas y pautas para contribuir.\n\nDesigna una o dos personas del proyecto como contacto\n\npara cada persona nueva. Esto puede hacer que quienes recién llegan sean menos reticentes a formular preguntas.\n\n\nUna tercera regla que ayuda a todas las personas (no solo a quienes recién llegan) es hacer que el conocimiento esté actualizado y a disposición. Las personas nuevas son como exploradoras/es que deben orientarse dentro de un paisaje desconocido Dagenais et al. (2010). La información dispersa hace que las nuevas personas se sientan perdidas y desorientadas. Considerando las diferentes opciones de lugares para mantener información, (por ejemplo, wikis, archivos en un repositorio con control de versiones, documentos compartidos, tweets antiguos, mensajes en un chat grupal o archivos de correo electrónico) es importante mantener la información sobre un tema específico consolidada en un único lugar, de modo que las personas nuevas no naveguen por múltiples fuentes de datos para encontrar lo que necesitan. Organizar la información hace que las personas recién llegadas tengan más confianza y mejor orientación Steinmacher et al. (2016).\nFinalmente, reconoce las primeras contribuciones de quienes recién comienzan y piensa dónde y cómo podrían ayudar a largo plazo. Una vez realizada su primera contribución, es probable que tengan una mejor idea de lo que pueden ofrecer y cómo el proyecto puede ayudarles. Ayuda a las personas nuevas a encontrar el siguiente problema en el que tal vez quieran trabajar o guiales hacia el siguiente tema que podrían disfrutar leyendo. En particular, animarles a ayudar a la próxima ola de nuevas personas es una buena manera de reconocer lo que han aprendido y una forma efectiva de transmitirlo."
  },
  {
    "objectID": "community.html#community-retention",
    "href": "community.html#community-retention",
    "title": "5  Construyendo una comunidad de práctica",
    "section": "5.4 Retención",
    "text": "5.4 Retención\n\nSi tu gente no la está pasando bien, algo está muy mal. — Saul Alinsky\n\nQuienes participan de la comunidad no deberían esperar disfrutar cada momento de su trabajo con tu organización, pero si no disfrutan ninguno no se quedarán. Disfrutar no significa necesariamente tener una fiesta anual: la gente puede disfrutar cocinar, entrenar a otras personas o simplemente trabajar en silencio junto al resto del grupo. Hay varias cosas que toda organización debe hacer para garantizar que las personas tengan algo que valoran de su trabajo:\n\nPregunta a las personas qué quieren en vez de adivinar.\n\nAsí como no eres tus estudiantes (?sec-process-personas), probablemente seas diferente a otras personas de tu organización. Pregunta a las personas qué quieren hacer, qué se sienten cómodas haciendo (que puede no ser lo mismo), y qué limitaciones de tiempo tienen. Pueden decir: “Cualquier cosa”, pero incluso una breve conversación probablemente ayude a descubrir que les gusta interactuar con las personas pero preferirían no administrar las finanzas del grupo, o viceversa.\n\nProporciona muchas formas de contribuir.\n\nCuantas más formas haya para que las personas ayuden, más gente podrá hacerlo. Alguien a quien no le gusta estar frente a público puede mantener el sitio web de su organización, manejar sus cuentas o corregir las lecciones.\n\nReconoce las contribuciones.\n\nA todas/os nos gusta que nos aprecien, así que las comunidades deben reconocer las contribuciones de sus miembros, tanto en público como en privado, mencionándolas/os en presentaciones, poniéndolas en el sitio web, etc. Cada hora que alguien le haya dado a tu proyecto puede ser una hora restada de su vida personal o de su empleo oficial; reconoce ese hecho y deja en claro que, si bien más horas serían bienvenidas, no esperas que hagan sacrificios insostenibles.\n\nHaz espacio.\n\nCrees que estás siendo útil, pero intervenir en cada decisión priva de autonomía a las demás personas, lo que reduce su motivación (?sec-motivation). En particular, si siempre eres quien responde primero a correos electrónicos o mensajes de chat, las personas tienen menos oportunidades de crecer como miembros y crear colaboraciones horizontales. Como resultado, la comunidad continuará centrada en una o dos personas en lugar de convertirse en una red altamente conectada en la que otras/os se sientan cómodas/os participando.\n\n\nOtra forma de recompensar la participación es ofrecer capacitación. Las organizaciones necesitan presupuestos, propuestas de subsidios y resolución de disputas. A la mayoría de las personas no se les enseña cómo hacer estas tareas más de lo que se les enseña a enseñar, así que la oportunidad de adquirir habilidades transferibles es una razón poderosa para que las personas se involucren y se mantengan involucradas. Si vas a hacer esto, no intentes proporcionar la capacitación por tu cuenta a menos que sea en lo que te especializas. Muchos grupos cívicos y comunitarios tienen programas de este tipo y probablemente puedas llegar a un acuerdo con alguno de ellos.\nFinalmente, si bien las personas voluntarias pueden hacer mucho, tareas como la administración del sistema y la contabilidad eventualmente necesitan personal remunerado. Cuando llegues a este punto, o no pagas nada o pagas un salario adecuado. Si no les paga nada, su verdadera recompensa es la satisfacción de hacer el bien; por otro lado, si les pagas una cantidad simbólica, le quitas esa satisfacción sin darles la posibilidad de ganarse la vida."
  },
  {
    "objectID": "community.html#community-governance",
    "href": "community.html#community-governance",
    "title": "5  Construyendo una comunidad de práctica",
    "section": "5.5 Gobernanza",
    "text": "5.5 Gobernanza\nCada organización tiene una estructura de poder: la única pregunta es si es formal y deriva en responsabilidades, o informal y, por lo tanto, no hay responsabilidades explícitas Freeman (1972). La estructura informal funciona bastante bien para grupos de hasta media docena de personas en los que todas las personas se conocen. Si el grupo es más grande, necesitas reglas para explicar quién tiene la autoridad para tomar qué decisiones y cómo lograr consensos (?sec-meetings-marthas-rules).\nEl modelo de gobernanza que prefiero es del tipo cooperativo, conocido como commons en inglés. La gobernanza cooperativa es una manera de gestión conjunta realizada por una comunidad de acuerdo a las reglas que ella misma ha desarrollado y adoptado Ostrom (2015). Como subraya Bollier (2014), las tres partes de esta definición son esenciales: la gobernanza es cooperativa no solo porque hay un bien compartido, como una propiedad o un conjunto de bibliotecas de software, sino que también se incluye a la comunidad que comparte estos recursos y a las reglas que usan para hacerlo.\nLos modelos más populares son los de corporaciones con fines de lucro y los de organizaciones sin fines de lucro (aunque no todos son necesariamente de gobernanza cooperativa). La mecánica varía de una jurisdicción a otra, por lo que debes buscar asesoramiento antes de elegir Este es uno de los momentos en que vale la pena tener vínculos con el gobierno local u otras organizaciones afines.. Ambos tipos de organización otorgan la máxima autoridad a su directorio. En términos generales, se trata de un directorio de servicio con miembros que también asumen otras funciones en la organización o un directorio de gobernanza o simplemente directorio cuya responsabilidad principal es contratar, supervisar y, si es necesario, despedir a quien dirige la organización. Las/los integrantes del directorio pueden ser elegidos por la comunidad o nombrados; en cualquier caso, es importante priorizar la capacidad sobre la pasión (la última es más importante para las bases) y tratar de reclutar habilidades particulares como contabilidad, marketing, etc.\n\n5.5.1 Elige la democracia\nCuando llegue el momento, haz de tu organización una democracia: tarde o temprano (generalmente más temprano que tarde), cada directorio o junta designada se convierte en una sociedad de mutuo acuerdo. Darle poder a tus miembros es complicado, pero es la única forma inventada hasta ahora para garantizar que las organizaciones continúen satisfaciendo las necesidades reales de las personas."
  },
  {
    "objectID": "community.html#community-care",
    "href": "community.html#community-care",
    "title": "5  Construyendo una comunidad de práctica",
    "section": "5.6 Cuidarte y cuidar a tu comunidad",
    "text": "5.6 Cuidarte y cuidar a tu comunidad\nEl síndrome de desgaste ocupacional (burnout en inglés) es un riesgo crónico en cualquier actividad comunitaria Pigni (2016), así que aprende a decir no más seguido de lo que dices sí. Si no te cuidas, no podrás cuidar a tu comunidad.\n\n5.6.1 Quedándose sin “No”\nInvestigaciones en la década de 1990 parecían mostrar que nuestra capacidad de ejercer fuerza de voluntad es finita: si tenemos que resistirnos a comer el último bombón de la caja cuando tenemos hambre, somos menos propensas/os a doblar la ropa, y viceversa. Este fenómeno se llama agotamiento del ego y si bien estudios recientes no han podido replicar esos primeros resultados Hagger et al. (2016), decir “sí” cuando estamos demasiado cansados para decir “no” es una trampa en la que caen muchos organizadores.\n\nUna forma de asegurarte de cumplir con tu “no” es escribir una lista de no-tareas, en la que anotes cosas que vale la pena hacer pero que no vas a hacer. Al momento de escribir este libro, mi lista incluye cuatro libros, dos proyectos de software, el rediseño de mi sitio web personal y aprender a tocar la flauta irlandesa.\nFinalmente, recuerda de vez en cuando que eventualmente toda organización necesita ideas frescas y nuevo liderazgo. Cuando llegue ese momento, entrena a tus sucesoras/es y sigue adelante con la mayor gracia posible. Indudablemente tomarán decisiones que tú no harías, pero pocas cosas en la vida son tan satisfactorias como ver que algo que ayudaste a construir cobra vida propia. Celebra eso — no tendrás ningún problema para encontrar otra actividad que te mantenga ocupada/o."
  },
  {
    "objectID": "community.html#financiamiento-para-una-comunidad",
    "href": "community.html#financiamiento-para-una-comunidad",
    "title": "5  Construyendo una comunidad de práctica",
    "section": "5.7 Financiamiento para una comunidad",
    "text": "5.7 Financiamiento para una comunidad\nLa estrategia puede cambiar en el caso que tengas la responsabilidad de conseguir el financiamiento para una organización que tiene un grupo de docentes. La forma más directa es cobrar a tus estudiantes una inscripción por ser parte de tus capacitaciones. (citar porqué está bueno cobrar de todas maneras, por el tema de la cantidad de gente que luego no se presenta al curso) En esta sección del capítulo presentamos algunos modelos alternativos utilizados por comunidades de práctica que se dedican a enseñar.\nModelo The Carpentries\nThe Carpentries enseña conocimientos básicos de codificación y ciencia de datos a cientificos/as de todo el mundo. La organización es un proyecto patrocinado fiscalmente por Community Initiatives, una organización registrada como 501(c)3 sin ánimo de lucro con sede en California, Estados Unidos.\nLa organización tiene un esquema de organizaciones miembros y patrocinadores sumado a una activa recaudación de fondos y campañas de donación.\n\nUna Organización Miembro es una organización que se ha comprometido con el crecimiento y la difusión de la organización. Estas instituciones miembro reciben acceso prioritario a la formación de instructores/as y a la orientación para el desarrollo de capacidades en su organización. Con instructores/as locales, las organizaciones miembros pueden organizar fácilmente talleres locales de bajo coste. Además, los/as instructores/as locales reciben apoyo, tutoría y un foro para el desarrollo de lecciones comunitarias por medio de la comunidad global. Las membresías también proporcionan a The Carpentries ingresos para garantizar el desarrollo y el mantenimiento continuos de las lecciones que demandan las comunidades de investigación. Actualmente el programa tiene diferentes niveles de patrocinio que cambia el monto a aportar y este monto se ajusta de acuerdo al país de orígen de la institución que quiere ser miembro.\nEl programa de patrocinio tiene como objetivo ayudar a la organización a asociarse con organizaciones afines que quieran contribuir financieramente para ayudar en los esfuerzos para hacer que las habilidades de codificación y datos sean equitativas a nivel mundial y ampliar nuestras operaciones para satisfacer mejor las necesidades la comunidad.\nExisten diversas oportunidades de financiamiento por medio de subisidios ofrecidos por fundaciones, agencias y asociaciones. La organización se presenta a estos llamados de subsidios que le permiten mantener sus actividades.\n\nLas personas que enseñan lo hacen de forma voluntaria, al igual que quienes desarrollan y mantienen las lecciones. Hay un staff que es empleado de la organización y quienes tienen su trabajo rentado.\nModelo MetaDocencia\nMetaDocencia es una organización sin fines de lucro que nutre una comunidad docente hispanohablante enseñando métodos educativos concretos, basados en evidencia y centrados en tus estudiantes. Desarrolla colaborativamente recursos abiertos, reutilizables y accesibles para fomentar prácticas de enseñanza eficaces.\nEn sus inicios todas las actividades fueron voultarias y sus servicios gratuitos. Dentro de los objetivos siempre estuvo la intención de no cobrar a los estudiantes por los cursos.\nPara poder afrontar los costos de llevar adelante la organización y poder pagar alguna de las actividades de los voluntarios, MetaDocencia también aplicó a llamados de subsidios, los cuales consiguó y le permiten cubrir los costos de funcionamiento y pagar algunas de las actividades de los docentes y generadores de contenido. Por conseguir estos financiamientos hoy es un proyecto patrocinado fiscalmente por Code for Science and Society.\nEsto abrió la posibilidad de recibir donaciones.\nModelo Mumuki\nEn este caso los clientes son las instituciones que quieren capacitar a sus empleados. Estas organizaciones pagan el costo de los cursos, no las personas que toman la capacitación.\nTienen un programa de tutores que son rentados y un esquema de enseñanza asincronica online.\n\n\nAgregar como conceptos que es un fiscal sponsor, que es un project leader, que es la gobernanza y hacer refencias a las diferentes secciones o capítulos correspondientes.\n\n\n\n\nVer sección 14.1, 14.2 y 14.3 pueden aportar algo a esto."
  },
  {
    "objectID": "community.html#community-exercises",
    "href": "community.html#community-exercises",
    "title": "5  Construyendo una comunidad de práctica",
    "section": "5.8 Ejercicios",
    "text": "5.8 Ejercicios\nVarios de estos ejercicios se toman de Brown (2007).\n\n5.8.1 ¿Qué tipo de comunidad? (individual/15’)\nVuelve a leer la descripción de los cuatro tipos de comunidades y decide con cuál o cuáles se identifican o a cuales aspiran.\n\n\n5.8.2 Personas que puedes conocer (grupos pequeños/30’)\nAl organizar una comunidad, parte de tu trabajo es ayudar a las personas a encontrar una manera de contribuir a pesar de sí mismas. En grupos pequeños, elige tres de las personas descriptas a continuación y discute cómo les ayudarías a convertirse en mejores colaboradoras/es para tu organización.\n\nAna\n\nsabe más sobre cada tema que todas las demás personas juntas — al menos, ella cree que lo hace. No importa lo que digas, ella te corregirá; no importa lo que sepas, ella lo sabe mejor.\n\nCatalina\n\ntiene tan poca confianza en su propia habilidad que no tomará ninguna decisión, sin importar qué tan pequeña sea, hasta haber consultado con alguien más.\n\nFernando\n\ndisfruta de saber cosas que otras personas no saben. Puede hacer milagros, pero cuando se le pregunta cómo lo hizo, sonreirá y dirá: “Oh, estoy seguro de que puedes resolverlo”.\n\nAndrea\n\nes tranquila. Nunca habla en las reuniones, incluso cuando sabe que otras personas están equivocadas. Podría contribuir a la lista de correo, pero es muy sensible a las críticas y siempre retrocede en lugar de defender su punto.\n\nCristian\n\naprovecha el hecho de que la mayoría de las personas preferirían hacer su parte del trabajo antes que quejarse de él. Lo frustrante es que él es muy convincente cuando alguien finalmente lo confronta. “Todas las partes han cometido errores,” dice él, o “Bueno, creo que estás siendo un poco quisquillosa/o.”.\n\nMelisa\n\ntiene buenas intenciones pero, por alguna razón, siempre surge algo y termina sus tareas a último momento. Por supuesto, eso significa que quienes dependen de ella no pueden hacer su trabajo hasta después de ese último momento …\n\nJuan José\n\nes grosero. “Esa es la forma en que hablo”, dice. “Si no puedes solucionarlo, ve a buscar otro equipo”. Su frase favorita es: “Eso es estúpido” y dice una obscenidad cada segunda oración.\n\n\n\n\n5.8.3 Valores (grupos pequeños/45’)\nResponde estas preguntas por tu cuenta y luego compara tus respuestas con las del resto del grupo.\n\n¿Cuáles son los valores que expresa tu organización?\n¿Son estos los valores que deseas que la organización exprese?\nSi tu respuesta es no, ¿qué valores te gustaría expresar?\n¿Cuáles son los comportamientos específicos que demuestran esos valores?\n¿Qué comportamientos demostrarían lo contrario de esos valores?\n\n\n\n5.8.4 Procedimientos para reuniones (grupos pequeños/30’)\nResponde estas preguntas por tu cuenta y luego compara tus respuestas con las del resto del grupo.\n\n¿Cómo se manejan las reuniones?\n¿Es así como quieres que se realicen tus reuniones?\n¿Las reglas para conducir reuniones son explícitas o simplemente se asumen?\n¿Estas son las reglas que quieres tener?\n¿Quién tiene derecho a votar o tomar decisiones?\n¿Son estas las personas a quienes quisieras otorgar autoridad para tomar decisiones?\n¿Utilizan la regla de la mayoría, toman decisiones por consenso o usan otro mecanismo?\n¿Es así como quieres tomar decisiones?\n¿Cómo se enteran las personas en una reunión que se ha tomado una decisión?\n¿Cómo saben las personas que no estuvieron en una reunión qué decisiones se tomaron?\n¿Funciona esto para tu grupo?\n\n\n\n5.8.5 Tamaño (grupos pequeños/20’)\nResponde estas preguntas por tu cuenta y luego compara tus respuestas con las del resto del grupo.\n\n¿Qué tan grande es tu grupo?\n¿Es este el tamaño que deseas para su organización?\nSi tu respuesta es no, ¿de qué tamaño te gustaría que fuera?\n¿Tienes algún límite en cuanto a la cantidad de miembros?\n¿Te beneficiarías de establecer ese límite?\n\n\n\n5.8.6 Convertirse en miembro (grupos pequeños/45)\nResponde estas preguntas por tu cuenta y luego compara tus respuestas con las del resto del grupo.\n\n¿Cómo se incorpora alguien a tu grupo?\n¿Qué tan bien funciona este proceso?\n¿Hay cuotas de membresía?\n¿Se requiere que las personas estén de acuerdo con alguna regla de comportamiento al unirse?\n¿Son estas las reglas de comportamiento que quieres?\n¿Cómo descubren las personas recién llegadas lo que hay que hacer?\n¿Qué tan bien funciona este proceso?\n\n\n\n5.8.7 Contrataciones (grupos pequeños/30’)\nResponde estas preguntas por tu cuenta y luego compara tus respuestas con las del resto del grupo.\n\n¿Tienes personal asalariado en tu organización o son todas/os voluntarias/os?\n¿Deberías tener personal asalariado?\n¿Quieres / necesitas más o menos personal?\n¿Qué hace cada integrante de tu personal? ¿A qué se dedica?\n¿Son estos los roles y funciones principales que necesitas que el personal desempeñe?\n¿Quién supervisa a tu personal?\n¿Es este el proceso de supervisión que quieres para tu grupo?\n¿Cuánto le pagan a tu personal?\n¿Es este el salario adecuado para realizar el trabajo necesario?\n\n\n\n5.8.8 Dinero (grupos pequeños/30’)\nResponde estas preguntas por tu cuenta y luego compara tus respuestas con las del resto del grupo.\n\n¿Quién paga qué?\n¿Esa es la persona que quisieras que pague?\n¿De dónde consiguen el dinero?\n¿Es así como quieres conseguirlo?\nSi no, ¿tienes algún plan para conseguirlo de otra manera?\nSi es así, ¿cuáles son esos planes?\n¿Quién da seguimiento a estos planes para asegurarse de que sucedan?\n¿Cuánto dinero tienen?\n¿Cuánto dinero necesitan?\n¿En qué gastan la mayor parte del dinero?\n¿Es así como quieres gastar el dinero?\n\n\n\n5.8.9 Tomando ideas prestadas (toda la clase/15’)\nMuchas de mis ideas sobre cómo construir una comunidad han sido moldeadas por mi experiencia en el desarrollo de software de código abierto. Fogel (2005) (que está [disponible en línea][producing-oss]) es una buena guía de lo que ha funcionado y lo que no ha funcionado para esas comunidades, y el [sitio de Guías de Código Abierto][opensource-guide-es] también tiene una gran cantidad de información útil. Elige una sección de este último recurso, puede ser “Encontrando Usuarios para Tu Proyecto”, o “Liderazgo y Gobierno” y presenta al grupo, en dos minutos, una idea que encontraste útil o una con la que estuviste muy en desacuerdo.\n\n\n5.8.10 ¿Quién eres tú? (grupos pequeños/20’)\nLa Administración Nacional Oceánica y Atmosférica estadounidense (NOAA por sus siglas en inglés) tiene una guía breve, útil y divertida para [lidiar con comportamientos disruptivos][noaa-disruptive]. La guía clasifica esos comportamientos bajo etiquetas como “habladora/hablador”, “indecisa/o” y “tímida/o” y describe estrategias para manejar cada uno. En grupos de 3 a 6 personas, lean la guía (está disponible solo en inglés) y decidan cuál de las descripciones les queda mejor. ¿Crees que las estrategias descriptas para manejar personas como tú son efectivas? ¿Son otras estrategias igualmente efectivas o más?\n\n\n5.8.11 Creando lecciones en comunidad (grupos pequeños/30’)\nUna de las claves del éxito de [Carpentries][carpentries] es su énfasis en construir y mantener lecciones en forma colaborativa Wilson (2016), Devenyi et al. (2018). Trabajando en grupos de 3 a 4 personas:\n\nElige una lección breve que todo el grupo haya usado.\nHaz una revisión cuidadosa para crear una única lista con sugerencias de mejoras.\nOfrece esas sugerencias a las/los autoras/es de la lección.\n\n\n\n5.8.12 ¿Estás crujiente? (individual/10’)\n[Johnathan Nightingale escribió][nightingale-comments]:\n\nCuando trabajaba en Mozilla, utilizábamos el término “crujiente” (crispy en inglés) para referirnos al estado justo antes de llegar al síndrome de desgaste ocupacional. Las personas que son crujientes no son divertidas. Son bruscas. Están ansiosas por una pelea que pueden ganar. Lloran sin mucha advertencia. …reconocíamos lo “crujiente” en nuestros colegas y nos cuidábamos mutuamente [pero] es una cosa tan fea, que vimos tanto, que teníamos un proceso cultural completo a su alrededor.\n\nResponde “sí” o “no” a cada una de las siguientes preguntas. ¿Qué tan cerca estás de tener síndrome de desgaste ocupacional?\n\n¿Te has vuelto cínica/o o crítica/o en el trabajo?\n¿Tienes que arrastrarte al trabajo o tienes problemas para comenzar a trabajar?\n¿Te has vuelto irritable o impaciente con tus compañeros de trabajo?\n¿Te resulta difícil concentrarte?\n¿No logras satisfacción con tus logros?\n¿Estás usando comida, drogas o alcohol para sentirte mejor o simplemente no sentir?\n\n\n\n\n\nAdams, Frank, and Myles Horton. 1975. Unearthing Seeds of Fire: The Idea of Highlander. Blair.\n\n\nAlinsky, Saul D. 1989. Rules for Radicals: A Practical Primer for Realistic Radicals. Vintage.\n\n\nBollier, David. 2014. Think Like a Commoner: A Short Introduction to the Life of the Commons. New Society Publishers.\n\n\nBrown, Michael Jacoby. 2007. Building Powerful Community Organizations: A Personal Guide to Creating Groups That Can Solve Problems and Change the World. Long Haul Press.\n\n\nDagenais, Barthélémy, Harold Ossher, Rachel K. E. Bellamy, Martin P. Robillard, and Jacqueline P. de Vries. 2010. “Moving into a New Software Project Landscape.” In 2010 International Conference on Software Engineering (ICSE’10). ACM Press. https://doi.org/10.1145/1806799.1806842.\n\n\nDevenyi, Gabriel A., Rémi Emonet, Rayna M. Harris, Kate L. Hertweck, Damien Irving, Ian Milligan, and Greg Wilson. 2018. “Ten Simple Rules for Collaborative Lesson Development.” PLoS Computational Biology 14 (3). https://doi.org/10.1371/journal.pcbi.1005963.\n\n\nFogel, Karl. 2005. Producing Open Source Software: How to Run a Successful Free Software Project. O’Reilly Media.\n\n\nFreeman, Jo. 1972. “The Tyranny of Structurelessness.” The Second Wave 2 (1).\n\n\nHagger, M. S., N. L. D. Chatzisarantis, H. Alberts, C. O. Anggono, C. Batailler, A. R. Birt, R. Brand, et al. 2016. “A Multilab Preregistered Replication of the Ego-Depletion Effect.” Perspectives on Psychological Science 11 (4): 546–73. https://doi.org/10.1177/1745691616652873.\n\n\nLakey, George. 2018. How We Win: A Guide to Nonviolent Direct Action Campaigning. Melville House.\n\n\nMidwest Academy. 2010. Organizing for Social Change: Midwest Academy Manual for Activists. Fourth. The Forum Press.\n\n\nOstrom, Elinor. 2015. Governing the Commons: The Evolution of Institutions for Collective Action. Cambridge University Press.\n\n\nPigni, Alessandra. 2016. The Idealist’s Survival Kit: 75 Simple Ways to Prevent Burnout. Parallax Press.\n\n\nSahlberg, Pasi. 2015. Finnish Lessons 2.0: What Can the World Learn from Educational Change in Finland? Teachers College Press.\n\n\nSholler, Dan, Igor Steinmacher, Denae Ford, Mara Averick, Mike Hoye, and Greg Wilson. 2019. “Ten Simple Rules for Helping Newcomers Become Contributors to Open Source Projects.” https://github.com/gvwilson/10-newcomers/.\n\n\nSingh, Vandana. 2012. “Newcomer Integration and Learning in Technical Support Communities for Open Source Software.” In 2012 ACM International Conference on Supporting Group Work - GROUP’12. ACM Press. https://doi.org/10.1145/2389176.2389186.\n\n\nSpalding, Dan. 2014. How to Teach Adults: Plan Your Class, Teach Your Students, Change the World. Jossey-Bass.\n\n\nSteinmacher, Igor, Tayana Uchoa Conte, Christoph Treude, and Marco Aurélio Gerosa. 2016. “Overcoming Open Source Project Entry Barriers with a Portal for Newcomers.” In 2016 International Conference on Software Engineering (ICSE’16). ACM Press. https://doi.org/10.1145/2884781.2884806.\n\n\nSteinmacher, Igor, Gustavo Pinto, Igor Scaliante Wiese, and Marco Aurélio Gerosa. 2018. “Almost There: A Study on Quasi-Contributors in Open-Source Software Projects.” In 2018 International Conference on Software Engineering (ICSE’18). ACM Press. https://doi.org/10.1145/3180155.3180208.\n\n\nSteinmacher, Igor, Igor Wiese, Ana Paula Chaves, and Marco Aurelio Gérosa. 2013. “Why Do Newcomers Abandon Open Source Software Projects?” In 2013 International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE’13). Institute of Electrical; Electronics Engineers (IEEE). https://doi.org/10.1109/chase.2013.6614728.\n\n\nWenger-Trayner, Etienne, and Beverly Wenger-Trayner. 2015. “Communities of Practice: A Brief Introduction.” http://wenger-trayner.com/intro-to-cops/.\n\n\nWilkinson, Richard, and Kate Pickett. 2011. The Spirit Level: Why Greater Equality Makes Societies Stronger. Bloomsbury Press.\n\n\nWilson, Greg. 2016. “Software Carpentry: Lessons Learned.” F1000Research, January. https://doi.org/10.12688/f1000research.3-62.v2."
  },
  {
    "objectID": "models.html#models-formative-assessment",
    "href": "models.html#models-formative-assessment",
    "title": "3  Modelos mentales y evaluación formativa",
    "section": "3.1 ¿Están aprendiendo tus estudiantes?",
    "text": "3.1 ¿Están aprendiendo tus estudiantes?\nMark Twain escribió: “No es lo que no sabes lo que te mete en problemas. Es lo que tienes seguridad de saber y simplemente no es así.” Uno de los ejercicios al construir un modelo mental es, por lo tanto, despejar las cosas que no pertenecen al modelo. En sentido amplio, los conceptos erróneos de las personas novatas caen en tres categorías:\n\nErrores fácticos\n\ncomo creer que Río de Janeiro es la capital de Brasil (es Brasilia). Estos errores generalmente son fáciles de corregir.\n\nModelos rotos\n\ncomo creer que el movimiento y la aceleración deben estar en la misma dirección. Podemos lidiar con estos errores haciendo que las personas novatas razonen a través de ejemplos en los que sus modelos den una respuesta incorrecta.\n\nCreencias fundamentales\n\ncomo por ejemplo “el mundo solo tiene algunos miles de años de antigüedad” o “algunos tipos de personas son naturalmente mejores en programación que otros” Guzdial (2015),Patitsas et al. (2016). Estos errores están generalmente conectados profundamente con la identidad social del estudiante, por lo que resisten a las evidencias y racionalizan las contradicciones.\n\n\nLa gente aprende más rápido cuando los/las docentes identifican y aclaran los conceptos erróneos de sus estudiantes mientras se está dando la lección. Esto se llama evaluación formativa porque forma (o le da forma a) la enseñanza mientras se está llevando a cabo. Los/las estudiantes no aprueban o reprueban una evaluación formativa. En cambio, la evaluación formativa da, tanto a quien enseña como a quien aprende, retroalimentación sobre qué tan bien les está yendo y en qué se deberían enfocar en los próximos pasos. Por ejemplo, un/una docente de música le puede pedir a un/una estudiante que toque una escala muy lentamente para chequear su respiración. Entonces, el/la estudiante averigua si la respiración es correcta, mientras que el/la docente recibe una devolución sobre si la explicación que acaba de dar fue comprendida.\n\n3.1.1 En resumen\nEl contrapunto de la evaluación formativa es la evaluación sumativa, que tiene lugar al final de la lección. La evaluación sumativa es como un examen de conducir: le dice a quien está aprendiendo a conducir si ha dominado el tópico y a quien le está enseñando si su lección ha sido exitosa. Una forma de pensar la diferencia entre los dos tipos de evaluaciones es realizando una analogía con la cocina: quien prueba la comida mientras cocina está haciendo evaluaciones formativas, mientras quien es comensal y prueba la comida cuando se le sirve está haciendo una evaluación sumativa. Desafortunadamente, la escuela ha entrenado a la mayoría de la gente para creer que toda evaluación es sumativa, es decir, que si algo se siente como un examen, resolverlo pobremente le jugaría en contra. Hacer que las evaluaciones formativas se sientan informales reduce esta ansiedad; en mi experiencia, usar cuestionarios en línea, o donde deba hacerse click, o cualquier cosa semejante parece aumentar la ansiedad, ya que hoy en día la mayoría de la gente cree que todo lo que hace en internet está siendo mirado y grabado.\n\nPara ser útil durante la enseñanza, una evaluación formativa debe ser rápida de administrar (de manera que no rompa el flujo de la lección) y debe tener una respuesta correcta no ambigua (de manera que pueda ser usada en grupos). Probablemente, el tipo de evaluación formativa que más ampliamente se usa es la pregunta de opción múltiple. Muchos/as docentes tienen una mala opinión sobre ellas, pero cuando las preguntas de opción múltiple están bien diseñadas pueden revelar mucho más si alguien sabe o no algunos hechos específicos. Por ejemplo, si estás enseñando a niños/as cómo hacer sumas de números con múltiples dígitos Ojose (2015) y les das esta pregunta de opción múltiple:\n\n¿Cuánto es 37 + 15? 1. 52 2. 42 3. 412 4. 43\n\nLa respuesta correcta es 52, pero las otras respuestas proporcionan información valiosa:\n\nSi el/la niño/a elige 42, no entiende qué significa “llevarse” una unidad. (Podría escribir 12 como respuesta a 7+5, pero luego reemplazaría el 1 con el 4 que obtiene de la suma de 3+1.)\nSi elige 412, está tratando a cada columna de números como un problema separado. Esto sigue siendo incorrecto, pero es incorrecto por un motivo distinto.\nSi elige 43, entonces sabe que tiene que llevarse el 1, pero lo lleva de vuelta a la columna de la que viene. De nuevo, es un error distinto que requiere de una explicación clarificadora diferente por parte de quien enseña.\n\nCada una de estas respuestas incorrectas es un distractor plausible con poder diagnóstico. Un distractor es una respuesta incorrecta o peor que la mejor respuesta; “plausible” significa que parece que podría ser correcta, mientras que “poder diagnóstico” significa que cada uno de los distractores ayuda al/a la docente a darse cuenta de qué explicar a continuación a estudiantes puntuales.\nLa variedad de respuestas a una evaluación formativa te guía cómo continuar. Si una cantidad suficiente de la clase tiene la respuesta correcta, avanzas. Si la mayoría de la clase elige la misma respuesta incorrecta, deberías retroceder y trabajar en corregir el concepto erróneo que ese distractor señala. Si las respuestas de la clase se dividen equitativamente entre varias opciones, probablemente están arriesgando, entonces deberías retroceder y re-explicar la idea de una manera distinta. (Repetir exactamente la misma explicación probablemente no será útil, lo cual es uno de los motivos por los que tantos cursos por video son pedagógicamente ineficientes.)\n¿Qué pasa si la mayoría de la clase vota por la respuesta correcta pero un grupo pequeño vota por las incorrectas? En ese caso, tienes que decidir si deberías destinar tiempo a que la minoría entienda o si es más importante mantener a la mayoría cautivada. No importa cuán duro trabajes o qué prácticas de enseñanza uses, no siempre vas a conseguir darle a todo tu curso lo que necesita; es tu responsabilidad como docente tomar la decisión.\n\n3.1.2 ¿De dónde vienen las respuestas incorrectas?\nPara diseñar distractores plausibles, piensa en las preguntas que tus estudiantes hicieron o en los problemas que tuvieron la última vez que enseñaste esa temática. Si no la has enseñado antes, piensa en tus propios conceptos erróneos, pregúntale a colegas sobre sus experiencias o busca la historia de tu campo temático: si las demás personas han tenido los mismos malentendidos sobre la temática cincuenta años atrás, hay chances de que la mayoría de tus estudiantes aún malentiendan la temática de la misma forma al día de hoy. También puedes hacer preguntas abiertas en clase para recoger los conceptos erróneos sobre los temas que vas a abarcar en una clase posterior, o consultar sitios de preguntas y respuestas como [Quora][quota] o [Stack Overflow][stack-overflow] para ver con qué se confunden quienes aprenden la temática en cualquier otro lugar.\n\nDesarrollar evaluaciones formativas mejora tus lecciones porque te fuerza a pensar en los modelos mentales de tus estudiantes. En mi experiencia, al pensar evaluaciones formativas automáticamente escribo la lección de forma de abarcar los baches y errores más probables. Las evaluaciones formativas, por lo tanto, dan buenos resultados incluso si no son utilizadas (aunque la enseñanza es más efectiva cuando sí se utilizan).\nLas preguntas de opción múltiple no son el único tipo de evaluación formativa: el ?sec-exercises describe otros tipos de ejercicios que son rápidos y no son ambiguos. Cualquiera sea la evaluación que escojas, deberías hacer alguna que tome un minuto o dos cada 10–15 minutos de manera de asegurarte de que tus estudiantes están realmente aprendiendo. Este ritmo no está basado en un límite de atención intrínseco: Wilson and Korn (2007) encontró poca evidencia a favor de la afirmación usualmente repetida de que los/las estudiantes solo pueden prestar atención durante 10–15 minutos. En cambio, la guía asegura que, si un número significativo de personas se ha quedado atrás, solo tienes que repetir una pequeña porción de la lección. Las evaluaciones formativas frecuentes también mantienen el compromiso de tus estudiantes, particularmente si se involucran en una discusión en un grupo pequeño (?sec-classroom-peer).\nLas evaluaciones formativas también pueden ser usadas antes de las lecciones. Si comienzas una clase con una pregunta de opción múltiple y toda la clase la contesta correctamente, puedes evitar explicar algo que tus estudiantes ya saben. Este tipo de enseñanza activa te da más tiempo para enfocarte en las cosas que tus estudiantes no saben. También le muestra a tus estudiantes que respetas su tiempo lo suficiente como para no desperdiciarlo, lo que ayuda a la motivación (?sec-motivation).\n\n3.1.3 Inventario de conceptos\nCon una cantidad de datos suficiente, las preguntas de opción múltiple pueden ser sorprendentemente precisas. El ejemplo más conocido es el inventario del concepto de fuerza Hestenes, Wells, and Swackhamer (1992), que evalúa la comprensión sobre los mecanismos básicos newtonianos. Al entrevistar a un gran número de participantes, correlacionando sus conceptos erróneos con los patrones de respuestas correctas e incorrectas, así como mejorando las preguntas, los creadores de este inventario construyeron una herramienta de diagnóstico que permite identificar conceptos erróneos específicas. Las personas que investigan pueden utilizar dicha herramienta para medir el efecto de los cambios en los métodos de enseñanza Hake (1998). Tew y colaboradores desarrollaron y validaron una evaluación independiente del lenguaje para programación introductoria Tew and Guzdial (2011); Parker, Guzdial, and Engleman (2016) la replicaron y Hamouda et al. (2017) está desarrollando un inventario de conceptos sobre la recursividad. Sin embargo, es muy costoso construir herramientas de este tipo y su validez está cada vez más amenazada por la habilidad de los/las estudiantes para buscar respuestas en línea.\n\nDesarrollar evaluaciones formativas en una clase solo requiere un poco de preparación y práctica. Puedes darles a tus estudiantes tarjetas coloreadas o numeradas para que respondan una pregunta de opción múltiple simultáneamente (en lugar de que tengan que levantar sus manos en turnos), incluyendo como una de las opciones “No tengo idea” y alentando que hablen un par de segundos con sus pares más cercanos antes de responder. Todas estas prácticas te ayudarán a garantizar que el flujo de enseñanza no sea interrumpido. La ?sec-classroom-peer describe un método de enseñanza poderoso y basado en evidencias, construido a partir de estas simples ideas.\n\n3.1.4 Humor\nLos/las docentes a veces incluyen respuestas supuestamente tontas en las preguntas de opción múltiple, como “¡mi nariz!”, particularmente en los cuestionarios destinados a estudiantes jóvenes. Sin embargo, estas respuestas no proveen ninguna idea sobre los conceptos erróneos de los/las estudiantes y la mayoría de la gente no las encuentran graciosas. Como regla, deberías solo incluir un chiste en una lección si lo encuentras gracioso la tercera vez que lo relees.\n\nLas evaluaciones formativas de una lección deberían preparar a los/las estudiantes para una evaluación sumativa: nadie debería encontrar nunca una pregunta en un examen para la cual la enseñanza no lo/la ha preparado. Esto no significa que nunca debes incluir nuevos tipos de problemas en un examen, pero, si lo haces, deberías haber ejercitado de antemano a tus estudiantes para abordar problemas nuevos. El ?sec-process explora este punto en profundidad."
  },
  {
    "objectID": "models.html#models-notional",
    "href": "models.html#models-notional",
    "title": "3  Modelos mentales y evaluación formativa",
    "section": "3.2 Máquina nocional",
    "text": "3.2 Máquina nocional\nEl término pensamiento computacional está muy extendido, en parte porque la gente coincide en que es importante aún cuando con el mismo término se suele referir a cosas muy distintas. En vez de discutir qué incluye y qué no incluye el término, es más útil pensar en la máquina nocional que quieres que tus estudiantes entiendan Boulay (1986). De acuerdo a Sorva (2013), una máquina nocional:\n\nes una abstracción idealizada del hardware de computadora y de otros aspectos de los entornos de ejecución de los programas;\npermite describir la semántica de los programas; y\nrefleja correctamente qué hacen los programas cuando son ejecutados.\n\nPor ejemplo, mi máquina nocional para Python es:\n\nEjecutar programas en el momento en la memoria, la cual se divide en la pila de llamadas y la cola de montículo (heap en inglés).\nLa memoria para los datos siempre es asignada desde la cola del montículo.\nCada conjunto de datos se almacena en una estructura de dos partes. La primera parte dice de qué tipo de datos se trata y la segunda parte es el valor real.\nBooleanos, números y caracteres de texto nunca son modificados una vez que se crean.\nLas listas, conjuntos y otras colecciones almacenan referencias a otros datos en lugar de almacenar estos valores directamente. Pueden ser modificados una vez que se crean, es decir, una lista puede ser ampliada o nuevos valores pueden ser agregados a un conjunto.\nCuando un código se carga a la memoria, Python lo convierte a una secuencia de instrucciones que son almacenadas como cualquier otro tipo de dato. Este es el motivo por el que es posible asignar funciones a variables y luego pasarlas como parámetros.\nCuando un código es ejecutado, Python sigue las instrucciones paso a paso, haciendo lo que cada instrucción le indica de a una por vez.\nAlgunas instrucciones hacen que Python lea datos, haga cálculos y cree nuevos datos. Otras, controlan qué instrucciones va a ejecutar, como los bucles y condicionales; también hay instrucciones que le indican a Python que llame a una función.\nCuando se llama a una función, Python coloca un nuevo marco de pila en la pila de llamadas.\nCada marco de pila almacena los nombres de las variables y las referencias a los datos. Los parámetros de las funciones son simplemente otro tipo de variable.\nCuando una variable es utilizada, Python la busca en el marco de la pila superior Si no la encuentra allí, busca en el último marco en la memoria global.\nCuando la función finaliza, Python la borra del marco de la pila y vuelve a las instrucciones que estaba ejecutando antes de llamar a la función. Si no encuentra un “antes,” el programa ha finalizado.\n\nUso esta versión caricaturizada de la realidad siempre que enseño Python. Después de 25 horas de instrucción y 100 horas de trabajar por su cuenta, espero que la mayor parte del grupo tenga un modelo mental que incluya todas o la mayoría de estas características."
  },
  {
    "objectID": "models.html#models-exercises",
    "href": "models.html#models-exercises",
    "title": "3  Modelos mentales y evaluación formativa",
    "section": "3.3 Ejercicios",
    "text": "3.3 Ejercicios\n\n3.3.1 Tus modelos mentales (pensar-parejas-compartir/15’)\n¿Cuál es el modelo mental que usas para entender tu trabajo? Escribe unas pocas oraciones para describirlo y hazle una devolución a tu pareja sobre su modelo mental. Una vez que has hecho esto en pareja, algunas pocas personas de la clase compartirán sus modelos con el grupo completo. ¿Está todo el grupo de acuerdo sobre qué es un modelo mental? ¿Es posible dar una definición precisa?, ¿o el concepto es útil justamente porque es difuso?\n\n\n3.3.2 Síntomas de ser una persona novata (toda la clase/5’)\nDecir que las personas novatas no tienen un modelo mental de un dominio particular no es equivalente a decir que no tienen ningún modelo mental. Las personas novatas tienden a razonar por analogía y arriesgan conjeturas: toman prestado fragmentos y partes de modelos mentales de otros dominios que superficialmente parecen similares.\nLa gente que hace esto generalmente dice cosas que [ni siquiera son falsas][not-even-wrong-es]. Como clase, discutan qué otros síntomas tiene una persona novata. ¿Qué dice o hace una persona para llevarte a clasificarla como novata en algún dominio?\n\n\n3.3.3 Modelar modelos mentales de las personas novatas (parejas/20’)\nCrea una pregunta de opción múltiple relacionada a un tópico que has enseñado o pretendas enseñar y explica el poder diagnóstico de cada uno de sus distractores (es decir, qué concepto erróneo pretende ser identificado con cada distractor).\nUna vez que hayas finalizado, intercambia las preguntas de opción múltiple con tu pareja. ¿Son sus preguntas ambiguas? ¿Son los conceptos erróneos plausibles? ¿Los distractores realmente evalúan esos conceptos erróneos? ¿Hay otros posibles conceptos erróneos que no sean evaluados?\n\n\n3.3.4 Pensar en las cosas (toda la clase/15’)\nUna buena evaluación formativa requiere que la gente piense profundamente en un problema. Por ejemplo, imagina que has colocado un bloque de hielo en un recipiente y luego llenas de agua este recìpiente, hasta el borde. Cuando el hielo se derrite, ¿el nivel de agua aumenta (de manera que el recipiente rebasa)?, ¿el nivel de agua baja?, ¿o se mantiene igual Figure 3.1?\n\n\n\nFigura 3.1— Hielo en un recipiente\n\n\nLa solución correcta es que el nivel del recipiente permanece igual: el hielo desplaza a su propio peso en el agua, por lo que completa exactamente el “agujero” que ha dejado al derretirse. Para darse cuenta del porqué la gente construye un modelo de la relación entre el peso, el volumen y la densidad Epstein (2002).\nDescribe otra evaluación formativa que conozcas o hayas utilizado, alguna que consideres que lleve a los/las estudiantes a pensar profundamente en algo, y por lo tanto ayude a identificar los defectos en sus razonamientos.\nCuando hayas finalizado, explícale tu ejemplo a otra persona de tu grupo y dale una devolución sobre su ejemplo.\n\n\n3.3.5 Una progresión diferente (individual/15’)\nEl modelo de desarrollo de habilidades de persona novata-competente-experta es a veces llamado [modelo Dreyfus][dreyfus-model-es]. Otra progresión comúnmente utilizada es el modelo de las [cuatro etapas de la competencia][four-stages-competence-es]:\n\nIncompetencia inconsciente:\n\nla persona no sabe lo que no sabe.\n\nIncompetencia consciente:\n\nla persona se da cuenta de que no sabe algo.\n\nCompetencia consciente:\n\nla persona ha aprendido cómo hacer algo, pero solo lo puede hacer mientras mantiene su concentración y quizás aún deba dividir la tarea en varios pasos.\n\nCompetencia inconsciente:\n\nla habilidad se ha transformado en una segunda naturaleza y la persona puede realizarla reflexivamente.\n\n\nIdentifica una temática en la que te encuentres en cada uno de los niveles de desarrollo de habilidades. En la materia que enseñas, ¿en qué nivel están usualmente la mayoría de tus estudiantes? ¿Qué nivel estás tratando que alcancen? ¿Cómo se relacionan estas cuatro etapas con la clasificación persona novata-competente-experta?\n\n\n3.3.6 ¿Qué tipo de computación? (individual/10’)\nTedre and Sutinen (2008) resume tres tradiciones en computación:\n\nMatemática:\n\nLos programas son la encarnación de los algoritmos. Son correctos o incorrectos, así como más o menos eficientes.\n\nCientífica:\n\nLos programas son modelos de procesos de información más o menos adecuados que pueden ser estudiados usando el método científico.\n\nIngenieril:\n\nLos programas son objetos que se construyen, tales como los diques y los aviones, y son más o menos efectivos y confiables.\n\ndescription\n\n¿Cuál de estas tradiciones coincide mejor con tu modelo mental de la computación? Si ninguna de ellas coincide, ¿qué modelo tienes?\n\n\n\n\n3.3.7 Explicar por qué no (parejas/5’)\nUna persona de tu curso piensa que hay algún tipo de diferencia entre el texto que tipea carácter por carácter y el texto idéntico que copia y pega. Piensa en una razón por la que tu estudiante puede creer esto o en algo que pueda haber sucedido para darle esa impresión. Luego, simula ser esa persona mientras tu pareja te explica por qué no es así. Intercambia roles con tu pareja y vuelve a probar.\n\n\n3.3.8 Tu modelo ahora (toda la clase/5’)\nComo clase, creen una lista de elementos clave de tu modelo mental de enseñanza. ¿Cuáles son los seis conceptos más importantes y cómo se relacionan?\n\n\n3.3.9 Tus máquinas nocionales (grupos pequeños/20’)\nEn grupos pequeños, escriban una descripción de la máquina nocional que quieren que sus estudiantes usen para entender cómo corren sus programas. ¿En qué difiere una máquina nocional para un lenguaje basado en bloques como Scratch de la máquina nocional para Python? ¿Y en qué difiere de una máquina nocional para hojas de cálculo o para un buscador que está interpretando HTMLSigla de HyperText Markup Language en inglés y CSSSigla de Cascading Style Sheets en inglés cuando renderiza una página web?\n\n\n3.3.10 Disfrutar sin aprender (individual/5’)\nMuchos estudios han mostrado que las evaluaciones de la enseñanza no se correlacionan con los resultados de la enseñanza Stark and Freishtat (2014),Uttl, White, and Gonzalez (2017), es decir, cuán alto sea el puntaje del grupo de estudiantes en un curso no predice cuánto recuerdan. ¿Alguna vez has disfrutado de una clase en la que en realidad no has aprendido nada? Si la respuesta es sí, ¿qué hizo que disfrutes esa clase?"
  },
  {
    "objectID": "models.html#revisión",
    "href": "models.html#revisión",
    "title": "3  Modelos mentales y evaluación formativa",
    "section": "3.4 Revisión",
    "text": "3.4 Revisión\n\n\n\nConceptos Modelos mentales\n\n\n\n\n\nConceptos Evaluación\n\n\n\n\n\n\nBenner, Patricia. 2000. From Novice to Expert: Excellence and Power in Clinical Nursing Practice. Pearson.\n\n\nBoulay, Benedict Du. 1986. “Some Difficulties of Learning to Program.” Journal of Educational Computing Research 2 (1): 57–73. https://doi.org/10.2190/3lfx-9rrf-67t8-uvk9.\n\n\nEpstein, Lewis Carroll. 2002. Thinking Physics: Understandable Practical Reality. Insight Press.\n\n\nFehily, Chris. 2008. SQL: Visual QuickStart Guide. Third. Peachpit Press.\n\n\nGuzdial, Mark. 2015. “Top 10 Myths about Teaching Computer Science.” https://cacm.acm.org/blogs/blog-cacm/189498-top-10-myths-about-teaching-computer-science/fulltext.\n\n\nHake, Richard R. 1998. “Interactive Engagement Versus Traditional Methods: A Six-Thousand-Student Survey of Mechanics Test Data for Introductory Physics Courses.” American Journal of Physics 66 (1): 64–74. https://doi.org/10.1119/1.18809.\n\n\nHamouda, Sally, Stephen H. Edwards, Hicham G. Elmongui, Jeremy V. Ernst, and Clifford A. Shaffer. 2017. “A Basic Recursion Concept Inventory.” Computer Science Education 27 (2): 121–48. https://doi.org/10.1080/08993408.2017.1414728.\n\n\nHestenes, David, Malcolm Wells, and Gregg Swackhamer. 1992. “Force Concept Inventory.” The Physics Teacher 30 (3): 141–58. https://doi.org/10.1119/1.2343497.\n\n\nKalyuga, Slava, Paul Ayres, Paul Chandler, and John Sweller. 2003. “The Expertise Reversal Effect.” Educational Psychologist 38 (1): 23–31. https://doi.org/10.1207/s15326985ep3801_4.\n\n\nKernighan, Brian W., and Rob Pike. 1983. The Unix Programming Environment. Prentice-Hall.\n\n\nKernighan, Brian W., and P. J. Plauger. 1978. The Elements of Programming Style. Second. McGraw-Hill.\n\n\nKernighan, Brian W., and Dennis M. Ritchie. 1988. The c Programming Language. Second. Prentice-Hall.\n\n\nMuller, Derek A., James Bewes, Manjula D. Sharma, and Peter Reimann. 2007. “Saying the Wrong Thing: Improving Learning with Multimedia by Including Misconceptions.” Journal of Computer Assisted Learning 24 (2): 144–55. https://doi.org/10.1111/j.1365-2729.2007.00248.x.\n\n\nOjose, Bobby. 2015. Common Misconceptions in Mathematics: Strategies to Correct Them. UPA.\n\n\nParker, Miranda C., Mark Guzdial, and Shelly Engleman. 2016. “Replication, Validation, and Use of a Language Independent CS1 Knowledge Assessment.” In 2016 International Computing Education Research Conference (ICER’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2960310.2960316.\n\n\nPatitsas, Elizabeth, Jesse Berlin, Michelle Craig, and Steve Easterbrook. 2016. “Evidence That Computer Science Grades Are Not Bimodal.” In 2016 International Computing Education Research Conference (ICER’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2960310.2960312.\n\n\nRay, Eric J., and Deborah S. Ray. 2014. Unix and Linux: Visual QuickStart Guide. Fifth. Peachpit Press.\n\n\nSorva, Juha. 2013. “Notional Machines and Introductory Programming Education.” ACM Transactions on Computing Education 13 (2): 1–31. https://doi.org/10.1145/2483710.2483713.\n\n\nStark, Philip, and Richard Freishtat. 2014. “An Evaluation of Course Evaluations.” ScienceOpen Research, September. https://doi.org/10.14293/s2199-1006.1.sor-edu.aofrqa.v1.\n\n\nTedre, Matti, and Erkki Sutinen. 2008. “Three Traditions of Computing: What Educators Should Know.” Computer Science Education 18 (3): 153–70. https://doi.org/10.1080/08993400802332332.\n\n\nTew, Allison Elliott, and Mark Guzdial. 2011. “The FCS1: A Language Independent Assessment of CS1 Knowledge.” In 2011 Technical Symposium on Computer Science Education (SIGCSE’11). Association for Computing Machinery (ACM). https://doi.org/10.1145/1953163.1953200.\n\n\nUttl, Bob, Carmela A. White, and Daniela Wong Gonzalez. 2017. “Meta-Analysis of Faculty’s Teaching Effectiveness: Student Evaluation of Teaching Ratings and Student Learning Are Not Related.” Studies in Educational Evaluation 54 (September): 22–42. https://doi.org/10.1016/j.stueduc.2016.08.007.\n\n\nWilson, Karen, and James H. Korn. 2007. “Attention During Lectures: Beyond Ten Minutes.” Teaching of Psychology 34 (2): 85–89. https://doi.org/10.1080/00986280701291291."
  },
  {
    "objectID": "outreach.html#outreach-marketing",
    "href": "outreach.html#outreach-marketing",
    "title": "6  Difusión y vinculación",
    "section": "6.1 Marketing",
    "text": "6.1 Marketing\nLas personas con antecedentes académicos y técnicos a menudo piensan que el marketing se trata de confundir y engañar. En realidad, trata sobre ver cosas desde la perspectiva de otras personas, comprendiendo sus deseos y necesidades, y explicando cómo puedes ayudarlas—en pocas palabras, cómo enseñarles. Este capítulo analizará cómo usar ideas de los capítulos anteriores para hacer que las personas entiendan y apoyen lo que estás haciendo.\nEl primer paso es averiguar qué le ofreces a cada persona, es decir, lo que realmente atrae a voluntarios/as, fondos y otro tipo de apoyo que puedas necesitar para continuar. La respuesta es contra-intuitiva. Por ejemplo, la mayoría de los/las científicos/as creen que los artículos científicos (conocidos como papers) que publican en revistas académicas son sus productos, pero en realidad los productos son los proyectos que presentan a convocatorias de subsidios: son estos proyectos los que atraen el dinero Kuchner (2011). Los artículos científicos son la publicidad que convence a otras personas de financiar esas propuestas, así como los álbumes son los que convencen a la gente de comprar entradas a conciertos y camisetas de bandas musicales.\nImagina que tu grupo ofrece talleres de programación de fin de semana a personas que están reinsertándose a la actividad laboral después de haber estado inactivas por varios años. Si quienes participan del taller pueden pagar lo suficiente para cubrir tus costos, entonces son tus clientes y el taller es tu producto. Si por otro lado, los talleres son gratuitos o tus estudiantes sólo están pagando un monto simbólico para reducir la tasa de ausencias, entonces tu producto real puede ser una mezcla de:\n\ntus propuestas de proyectos para solicitar subsidios;\nlas personas que terminan exitosamente tus talleres a las que las empresas que te patrocinaron les gustaría contratar;\nel resumen de media página de tus talleres que quien gobierna incluye en el balance o resumen anual presentado al concejo deliberante, que muestra cómo apoya al sector tecnológico local; o\nla satisfacción personal que obtienen los/las voluntarios/as cuando enseñan.\n\nAl igual que el diseño de lecciones (?sec-process), los primeros pasos en marketing son crear las personas tipo de la gente que podría estar interesada en lo que estás haciendo, y averiguar cuáles de sus necesidades puedes cumplir. Una manera de resumir lo último es escribir discursos de presentación dirigidos a diferentes personas tipo. Una plantilla ampliamente utilizada para este objetivo es:\n\n\n\n\n\n\n\nPara\nobjetivo de público\n\n\nquien\ninsatisfacción con lo que está disponible actualmente\n\n\nnuestros/as\ncategoría\n\n\nproveen\nbeneficio clave\n\n\nA diferencia de\nalternativas\n\n\nnuestro programa\ncaracterística distintiva clave.\n\n\n\nEn el ejemplo del taller de fin de semana, podríamos usar este tono para los/las participantes\n\nPara personas que regresan a la actividad laboral después de estar inactivas por varios años quienes tienen todavía responsabilidades familiares, nuestros talleres introductorios de programación proveen clases los fines de semana con guardería incluida. A diferencia de las clases en línea, nuestro programa le da a la gente la oportunidad de conocer a otras personas en la misma etapa de la vida.\n\ny este otro discurso de presentación para quienes toman decisiones en las empresas que podrían patrocinar los talleres:\n\nPara empresas que quieren reclutar desarrolladores/as de software de nivel básico quienes tienen dificultades para encontrar candidatos/as con suficiente madurez en diversas formaciones nuestros talleres introductorios de programación proveen potenciales candidatos/as. A diferencia de una feria de reclutamiento universitario, nuestro programa conecta empresas con una gran variedad de candidatos/as.\n\nSi no sabes por qué diferentes patrocinadores/as potenciales podrían estar interesados/as en lo que haces, pregúntales. Si lo sabes, pregúntales igual: las respuestas pueden cambiar con el tiempo, y puedes descubrir cosas que no habías notado antes.\nEstos discursos de presentación, una vez elaborados, deberían guiar lo que publicas en tu sitio web y en el material de difusión, para ayudar a la gente a descubrir lo más rápido posible si tú y ellos tienen algo de qué hablar. (No deberías copiar los discursos textualmente, porque muchas personas en el área tecnológica han visto esta plantilla tantas veces que perderán el interés si vuelven a leerla.)\nMientras escribes estos discursos, recuerda que hay varias razones para aprender cómo programar (?sec-intro-exercises). Una sensación de logro, control sobre sus propias vidas y ser parte de una comunidad puede motivar a las personas más que el dinero (?sec-motivation).\nAlgunas personas podrían ofrecerse a enseñar contigo de forma voluntaria porque sus amistades lo están haciendo. Igualmente, una empresa puede decir que está patrocinando clases para estudiantes de secundaria en condiciones económicas desfavorables porque quiere tener un grupo más grande de empleados potenciales en el futuro, aunque quizás quien dirige la empresa lo podría estar haciendo simplemente porque es lo correcto."
  },
  {
    "objectID": "joining.html#joining-using",
    "href": "joining.html#joining-using",
    "title": "8  Unirse a nuestra comunidad",
    "section": "8.1 Usando este material",
    "text": "8.1 Usando este material\nComo se declaró en el Capítulo ?sec-intro, todo este material puede distribuirse y reutilizarse libremente bajo la licencia Creative Commons Atribución – No Comercial 4.0 (?sec-license). Puedes usar la versión en línea en http://teachtogether.tech/ en cualquier clase (gratuita o paga), y puedes citar extractos breves bajo las disposiciones de [uso justo][uso-justo], pero no puedes volver a publicar fragmentos grandes en obras comerciales sin permiso previo.\nEste material ha sido usado de muchas maneras, desde charlas de media a una hora, a una clase en línea de una hora y media, tres horas o varios encuentros semanales, hasta un taller intensivo en persona. Por lo general, es posible cubrir gran parte de los capítulos ?sec-models a ?sec-process, ?sec-performance, y ?sec-motivation en dos días de jornada completa.\n\n8.1.1 En persona\nEsta es la forma más efectiva de impartir esta capacitación, pero también la más exigente. Las personas que participan están físicamente en el mismo lugar. Cuando necesitan practicar cómo enseñar en pequeños grupos, parte de la clase o toda la clase va a habitaciones cercanas. Cada participante usa su propia tableta o computadora portátil para ver material en línea durante la clase y para tomar notas compartidas (?sec-classroom-notetaking), y usa lápiz y papel o pizarras para otros ejercicios. Las preguntas y la discusión se hacen en voz alta.\nSi estás enseñando en este formato, debes usar notas adhesivas como indicadores de estado para que puedas ver quién necesita ayuda, quién tiene preguntas y quién está listo/a para seguir adelante (?sec-classroom-sticky-notes). También debes usarlos para distribuir la atención, para que todo el curso obtenga tu atención y tiempo de forma justa, como tarjetas de actas para alentar a tus estudiantes a reflexionar sobre lo que acaban de aprender y para darte retroalimentación procesable mientras todavía tienes tiempo para actuar en consecuencia.\n\n\n8.1.2 Formato híbrido\nEn este formato, entre 10 a 40 estudiantes se juntan en 2 a 6 grupos de 4 a 12 personas, pero esos grupos están distribuidos geográficamente. Cada grupo usa una cámara y un micrófono para conectarse a la videollamada, en lugar de que cada persona esté en la llamada por separado. Un buen audio es más importante que un buen video en ambas direcciones: una voz sin imágenes (como la radio) es mucho más fácil de entender que las imágenes sin narrativa, y quienes enseñan no necesitan ver a las personas para responder preguntas, siempre y cuando esas preguntas se puedan escuchar con claridad. Dicho esto, si una lección no es accesible, entonces no es útil (?sec-motivation-accessibility): proporcionar texto descriptivo es una ayuda cuando la calidad del audio es deficiente, e incluso si el audio es bueno resulta importante para aquellas personas con dificultades auditivas.\nToda la clase toma notas compartidas, y también usa las notas compartidas para hacer y responder preguntas. Tener varias decenas de personas tratando de hablar en una llamada no funciona bien, así que en la mayoría de las sesiones el/la docente habla y sus estudiantes responden a través del chat de la herramienta para tomar notas.\n\n\n8.1.3 En línea de forma individual\nLa extensión natural de estar en línea en grupos es estar en línea en forma individual. Al igual que con los grupos en línea, el/la docente hablará la mayoría de las veces y los/las estudiantes participarán principalmente a través del chat de texto. También en este caso, y siempre teniendo en cuenta los aspectos de accesibilidad, un buen audio es más importante que un buen video, y quienes participan deberían usar el chat de texto para indicar que quieren hablar (?sec-meetings).\nTener participantes en línea individualmente hace que sea más difícil dibujar y compartir mapas conceptuales (?sec-memory-exercises) o dar retroalimentación sobre la enseñanza (?sec-performance-exercises). Por lo tanto, quienes enseñen deberán confiar más en el uso de ejercicios con resultados escritos que se puedan poner en las notas compartidas, como por ejemplo, dar una devolución sobre videos de personas enseñando.\n\n\n8.1.4 Multi-semana en línea\n\n8.1.4.1 Clases de una hora\nLa clase se reúne todas las semanas durante una hora a través de videoconferencia. Cada reunión puede realizarse dos veces para acomodar las zonas horarias y los horarios de los/las estudiantes. Los/las participantes toman notas compartidas como se describió anteriormente para las clases grupales en línea, para publicar tareas en línea entre clases y para comentar sobre el trabajo de los demás. En la práctica, los comentarios son relativamente raros: la gente prefiere discutir el material en las reuniones semanales.\nEste fue el primer formato que Greg utilizó pero ya no lo recomienda. Mientras que extender la clase les da a las personas tiempo para reflexionar y abordar ejercicios más extensos, también aumenta en gran medida las probabilidades de que tengan que abandonar debido a otras demandas de su tiempo.\n\n\n8.1.4.2 Encuentros de cuatro horas\nEl grupo de entre 12 a 26 personas realiza uno o dos encuentros semanales, durante cuatro o dos semanas de forma sincrónica on-line durante cuatro horas. Todo el material del curso se pone disponible en un sitio web con anterioridad. Si Hay dos clases semanales se deja al menos un día entre cada encuentro.\nLa clase está estructurada con presentación de contenido con participación activa de los estudiantes por medio de notas compartidas y el chat de la plataforma de videoconferencia. También hay resolución de ejercicios grupales al finalizar un grupo de temas o conceptos, usando documentos compartidos y una reflexión grupal general luego de cada ejercitación. Todos los grupos comparten al menos una vez, el resultado de sus ejercicios grupales durante los encuentros sincrónicos.\nSe les permite a los estudiantes seleccionar si quieren mantener los grupos de un encuentro a otro o prefieren cambiarlos para conocer a mas personas que están tomando el curso.\nEste formato tiene la ventaja de dar tiempo para reflexionar y repasar el material entre las clases, pero se mantiene lo suficientemente concentrado en el tiempo para que no intervenga tanto en la rutina de las personas, llevandolas a abandonar.\nTambién es posible enseñar menos cantidad de material y modularizar los contenidos.\n\n\n\n8.1.5 Club de Lectura"
  },
  {
    "objectID": "joining.html#joining-contributing",
    "href": "joining.html#joining-contributing",
    "title": "8  Unirse a nuestra comunidad",
    "section": "8.2 Contribuir y mantener",
    "text": "8.2 Contribuir y mantener\nLas contribuciones de todo tipo son bienvenidas, desde sugerencias para mejoras hasta erratas y nuevo material. Todas las personas que contribuyan deben cumplir con nuestro Código de Conducta (?sec-conduct); al enviar tu trabajo, aceptas que pueda incorporarse tanto en forma original como editada y que pueda ser publicado bajo la misma licencia que el resto de este material (?sec-license).\nSi tu material es incorporado, te agregaremos a los agradecimientos (?sec-intro-acknowledgments) a menos que solicites lo contrario.\nLa fuente de la versión original de este libro se almacena en GitHub en:\n\nhttps://github.com/gvwilson/teachtogether.tech/\n\ny la versión en español se encuentra dentro de la carpeta es. Para conocer más sobre el proceso de traducción y los acuerdos generados durante nuestro trabajo colaborativo, puedes consultar el ?sec-traduccion y el README.md en el repositorio es.\nSi sabes cómo usar Git y GitHub y deseas cambiar, arreglar o agregar algo, por favor envía un pull request que modifique la fuente del LaTeX. Si deseas obtener una vista previa de tus cambios, por favor ejecuta make pdf o make html en la línea de comandos de tu computadora.\nSi quieres reportar un error, hacer una pregunta o hacer una sugerencia, presenta un issue en el repositorio. Necesitas tener una cuenta de GitHub para hacer esto, pero no necesitas saber cómo usar Git.\nSiempre etiqueta tus issues y pull requests como “Español”.\nSi no deseas crear una cuenta de GitHub, envía tu contribución por correo electrónico a yabellini@gmail.com si es en español o a gvwilson@third-bit.com si es en inglés, con “T3” o “Teaching Tech Together” o “Enseñar Tecnología en Comunidad” en algún lugar del asunto. Intentaremos responder en una semana.\nFinalmente, siempre nos gusta escuchar cómo se ha usado este material, y estamos siempre agradecidos/as por el aporte de más mapas conceptuales."
  },
  {
    "objectID": "conceptmaps.html#diferentes-mapas-para-el-mismo-concepto",
    "href": "conceptmaps.html#diferentes-mapas-para-el-mismo-concepto",
    "title": "9  Ejemplos de Mapas Conceptuales",
    "section": "9.1 Diferentes mapas para el mismo concepto",
    "text": "9.1 Diferentes mapas para el mismo concepto\nEsta serie de tres mapas conceptuales, creados por Amy Hodge y reutilizados con su permiso, son un ejemplo de diferentes modelos mentales para un mismo tema.\n\n\n\nMapa conceptual desde el punto de vista socios y socias de la biblioteca\n\n\n\n\n\nMapa conceptual desde el punto de vista de la dirección de la biblitoteca\n\n\n\n\n\nMapa conceptual desde el punto de vista de los amigos y las amigas de la biblioteca"
  },
  {
    "objectID": "conceptmaps.html#mapas-conceptuales-sobre-ciencia-de-datos",
    "href": "conceptmaps.html#mapas-conceptuales-sobre-ciencia-de-datos",
    "title": "9  Ejemplos de Mapas Conceptuales",
    "section": "9.2 Mapas conceptuales sobre Ciencia de Datos",
    "text": "9.2 Mapas conceptuales sobre Ciencia de Datos\nEsta serie de mapas conceptuales presentan modelos mentales utilizados en lecciones de introducción a la ciencia de datos y fueron generados por diversos instructores certificados de RStudio (ahora Posit) y compartidos bajo licencia CC-BY. La colección completa se puede acceder en <FIXME: ver de linkear al repo de Greg https://github.com/rstudio/concept-maps.>\n\n\n\nTipos de Datos. Autores: Meghan Sposato, Brendan Cullen, Monica Alonso\n\n\n\n\n\nExpresiones regulares. Autores: Monica Alonso, Greg Wilson."
  },
  {
    "objectID": "conceptmaps.html#mapas-conceptuales-sobre",
    "href": "conceptmaps.html#mapas-conceptuales-sobre",
    "title": "9  Ejemplos de Mapas Conceptuales",
    "section": "9.3 Mapas conceptuales sobre",
    "text": "9.3 Mapas conceptuales sobre"
  },
  {
    "objectID": "intro.html#sec-intro-audience",
    "href": "intro.html#sec-intro-audience",
    "title": "2  Introducción",
    "section": "2.1 Quién eres",
    "text": "2.1 Quién eres\nLa Section 7.1 explica cómo averiguar quiénes son tus estudiantes. Los cuatro tipos de personas a las que está destinado este libro son enseñante final &lt;FIXME(llamada al glosario acá)&gt;: la enseñanza no es su ocupación primaria, tienen poco o ningún conocimiento sobre pedagogía y posiblemente no enseñan en clases de instituciones educativas formales.\n\nEmilia\n\nestá entrenada como bibliotecaria y actualmente trabaja como diseñadora web y gestora de proyectos en una pequeña empresa consultora. En su tiempo libre, ayuda a impartir clases de diseño para mujeres que ingresan a la tecnología como una segunda carrera. Se encuentra reclutando colegas para dar más clases en su área y quiere saber cómo preparar lecciones que otras personas puedan usar, a la par de hacer crecer una organización de enseñanza voluntaria.\n\nDavid\n\nes un programador profesional, cuyos dos hijos adolescentes asisten a una escuela que no ofrece clases de programación. Se ha ofrecido como voluntario para dirigir un club de programación mensual después del horario de clases. A pesar de que expone presentaciones frecuentemente a sus colegas, no tiene experiencia enseñando en el aula. Quiere aprender a construir lecciones efectivas en un tiempo razonable, y le gustaría aprender más acerca de los pros y contras de las clases en línea en las que cada asistente cursa a su propio ritmo.\n\nSamira\n\nes una estudiante de robótica, que está considerando ser docente luego de graduarse. Quiere ayudar en unos talleres de robótica que se dictan los fines de semana, pero nunca ha enseñado antes, por lo que siente síndrome de la impostora{síndrome del impostor/a}. Quiere aprender más acerca de educación en general para decidir si la docencia es para ella y también está buscando sugerencias específicas que la ayuden a dar clase de forma más efectiva.\n\nRené\n\nes docente de ciencias de la computación en una universidad. Ha estado enseñando cursos de grado sobre sistemas operativos por seis años y cada vez se convence más de que tiene que haber una mejor manera de enseñar. El único entrenamiento disponible a través de su universidad está relacionado con la herramienta del sistema de gestión del aprendizaje en línea, por lo que quiere descubrir qué otro tipo de entrenamiento podría pedir.\n\n\nEstas personas tienen una variedad de conocimientos técnicos previos y alguna experiencia previa con la enseñanza, pero carecen de entrenamiento formal sobre enseñar y aprender, diseño de lecciones accesibles u organización comunitaria. La mayoría trabaja con estudiantes free-range &lt;FIXME: agregar nota al pie o al glosario&gt; y están enfocadas en adolescentes y personas adultas todas estas personas tienen tiempo y recursos limitados. Esperamos que nuestro cuarteto use este material de la siguiente manera:\n\nEmilia\n\ntomará parte de un grupo de lectura semanal en línea con sus voluntarias.\n\nDavid\n\nva a abordar parte de este libro en un taller de un día durante un fin de semana y estudiará el resto por su cuenta.\n\nSamira\n\nusará este libro en un curso de grado de un semestre que incluirá tareas, un proyecto y un examen final.\n\nRené\n\nleerá el libro por su cuenta en su oficina o mientras viaja en el transporte público, deseando entretanto que las universidades hagan más para apoyar la enseñanza de alta calidad.\n\n\n\n2.1.1 Re-uso\nAlgunas secciones de este libro fueron originalmente creadas para [el programa de entrenamiento de instructores/as de Software Carpentry][carpentries-instructor]. Cualquier parte del libro puede ser libremente distribuida y re-utilizada bajo la licencia Creative Commons Atribución-NoComercial 4.0 (Chapter 19). Puedes usar la versión online disponible en http://teachtogether.tech/es/ en cualquier clase (gratuita o paga), y puedes citar pequeños extractos bajo el criterio de [uso justo][uso-justo], pero no puedes re-publicar largos fragmentos en trabajos comerciales sin permiso previo.\nLas contribuciones, correcciones y sugerencias son bienvenidas, y cada vez que una nueva versión del libro sea publicada se les agradecerá a quienes contribuyan. Por favor consulta la sección de Chapter 21 para conocer los detalles sobre como contribuir y el Chapter 20 para conocer nuestro código de conducta."
  },
  {
    "objectID": "intro.html#sec-intro-acknowledgments",
    "href": "intro.html#sec-intro-acknowledgments",
    "title": "2  Introducción",
    "section": "2.2 Agradecimientos",
    "text": "2.2 Agradecimientos\nEsta segunda edición de este libro no existiría sin las contribuciones de\nTambién estamos agradecidos a Lukas Blakk por el logotipo, y a toda aquella persona que ha usado este material a lo largo de los años. Cualquier error que permanezca es nuestro."
  },
  {
    "objectID": "intro.html#sec-intro-exercises",
    "href": "intro.html#sec-intro-exercises",
    "title": "2  Introducción",
    "section": "2.3 Ejercicios",
    "text": "2.3 Ejercicios\nCada capítulo finaliza con una variedad de ejercicios que incluyen un formato sugerido y cuánto tiempo toma usualmente hacerlos en persona. Muchos pueden ser usados en otros formatos —en particular, si estás avanzando en este libro por tu cuenta, puedes hacer muchos de los ejercicios que son destinados a grupos— y siempre puedes dedicar más tiempo que el sugerido para trabajar en un ejercicio.\nSi estás usando este material para formar docentes, puedes darles con antelación los siguientes ejercicios a quienes participen, para que tengan una idea de quiénes son y cuál es la mejor manera en que les puedes ayudar. Por favor lee las advertencias en la Section 10.4 antes de pedirles hacer estos ejercicios.\n\n2.3.1 Altos y bajos (clase completa/5’)\nEscribe respuestas breves a las siguientes preguntas y compártelas con tus pares. (Si están tomando notas colaborativas en línea como se describe en la Section 10.7, puedes escribir tus respuestas allí.)\n\n¿Cuál es la mejor clase o taller que alguna vez hayas tomado? ¿Qué la hacía tan buena?\n¿Cuál fue la peor? ¿Qué la hacía tan mala?\n\n\n\n2.3.2 Conócete (clase completa/5’)\nComparte respuestas breves a las siguientes preguntas con tus pares. Guarda tus respuestas para que puedas regresar a ellas como referencia a medida que avanzas en el estudio de este libro.\n\n¿Qué es lo que más quieres enseñar?\n¿A quiénes tienes más ganas de enseñarles?\n¿Por qué quieres enseñar?\n¿Cómo sabrás si estás enseñando bien?\n¿Qué es lo que más quieres aprender acerca de enseñanza y aprendizaje?\n¿Qué cosa específica crees que es cierta acerca de enseñanza y aprendizaje?\n\n\n\n2.3.3 ¿Por qué aprender a programar? (individual/20’)\nLas personas que hacen política, se dedican a la educación y son líderes de negocios suelen decir que la gente debe aprender a programar porque los trabajos del futuro lo requerirán.\nSin embargo, como Benjamin Doxtdator [ha señalado][jobs-that-dont-exist], muchas de estas afirmaciones están construidas sobre cimientos débiles. Incluso si las afirmaciones fueran reales, la educación no debería preparar a la gente para los trabajos del futuro: les debería enseñar que tienen algo que decir sobre qué tipos de trabajos existirán en el futuro, cuales valen la pena y cómo poder opinar sobre esas elecciones. Además, como [señala Mark Guzdial][guzdial-why-teach-programming], hay realmente muchas razones para aprender a programar:\n\nPara entender nuestro mundo.\nPara estudiar y entender procesos.\nPara ser capaz de hacer preguntas sobre las cosas que influyen en nuestras vidas.\nPara usar una importante nueva forma de alfabetización.\nPara tener una nueva manera de aprender arte, música, ciencia y matemática.\nComo una habilidad laboral.\nPara usar mejor las computadoras.\nComo un medio en el cual aprender resolución de problemas.\n\nDibuja una grilla de 3x3 cuyos ejes estén etiquetados: “baja,” “media,” y “alta” y coloca cada razón en un sector de acuerdo a la importancia que tienen para ti (el eje X) y para la gente a la que planeas enseñar (el eje Y).\n\n¿Qué puntos están estrechamente alineados en importancia (es decir, en la diagonal de tu grilla)?\n¿Qué puntos están desalineados (es decir, en las esquinas por fuera de la diagonal)?\n¿Cómo debería afectar esto lo que tú enseñas?"
  },
  {
    "objectID": "models.html#sec-models-formative-assessment",
    "href": "models.html#sec-models-formative-assessment",
    "title": "3  Modelos mentales y evaluación formativa",
    "section": "3.1 ¿Están aprendiendo tus estudiantes?",
    "text": "3.1 ¿Están aprendiendo tus estudiantes?\nMark Twain escribió: “No es lo que no sabes lo que te mete en problemas. Es lo que tienes seguridad de saber y simplemente no es así.” Uno de los ejercicios al construir un modelo mental es, por lo tanto, despejar las cosas que no pertenecen al modelo. En sentido amplio, los conceptos erróneos de las personas novatas caen en tres categorías:\n\nErrores fácticos\n\ncomo creer que Río de Janeiro es la capital de Brasil (es Brasilia). Estos errores generalmente son fáciles de corregir.\n\nModelos rotos\n\ncomo creer que el movimiento y la aceleración deben estar en la misma dirección. Podemos lidiar con estos errores haciendo que las personas novatas razonen a través de ejemplos en los que sus modelos den una respuesta incorrecta.\n\nCreencias fundamentales\n\ncomo por ejemplo “el mundo solo tiene algunos miles de años de antigüedad” o “algunos tipos de personas son naturalmente mejores en programación que otros” (Guzdial (2015),Patitsas et al. (2016)). Estos errores están generalmente conectados profundamente con la identidad social del estudiante, por lo que resisten a las evidencias y racionalizan las contradicciones.\n\n\n\n3.1.1 Evaluación formativa\nLa gente aprende más rápido cuando los/las docentes identifican y aclaran los conceptos erróneos de sus estudiantes mientras se está dando la lección. Esto se llama evaluación formativa porque forma (o le da forma a) la enseñanza mientras se está llevando a cabo. Las evaluaciones formativas no se aprueban o se reprueban. En cambio, la evaluación formativa da, tanto a quien enseña como a quien aprende, retroalimentación sobre qué tan bien les está yendo y en qué se deberían enfocar en los próximos pasos. Por ejemplo, en una clase de música se le puede pedir al/la estudiante que toque una escala muy lentamente para chequear su respiración. De esta manera, el/la estudiante averigua si la respiración es correcta, mientras que el/la docente recibe una devolución sobre si la explicación que acaba de dar fue comprendida.\nEl contrapunto de la evaluación formativa es la evaluación sumativa, que tiene lugar al final de la lección. La evaluación sumativa es como un examen de conducir: le dice a quien está aprendiendo a conducir si ha dominado el tema y a quien le está enseñando si su lección ha sido exitosa. Una forma de pensar la diferencia entre los dos tipos de evaluaciones es realizando una analogía con la cocina: quien prueba la comida mientras cocina está haciendo evaluaciones formativas, mientras quien prueba la comida cuando se la sirven está haciendo una evaluación sumativa.\nDesafortunadamente, la escuela ha entrenado a la mayoría de la gente para creer que toda evaluación es sumativa, es decir, que si algo parece un examen, resolverlo mal pobremente te perjudicará. Hacer que las evaluaciones formativas parezcan informales y explicar qué son y su verdadero propósito, reduce esta ansiedad, sobre todo si las usas de forma recurrente en tus clases y tus estudiantes comprueban que no son perjudiciales.\n\n\n\n\n\n\nDanger\n\n\n\nSi vamos a utilizar herramientas digitales para realizar las evaluaciones formativas, se debe tener especial atención y cuidado al seleccionarlas teniendo en cuenta aspectos de accesibilidad y de gestión de los datos que esas herramientas realizan. Lamentablemente muchas herramientas se han utilizado para vigilar y no para educar (Beetham et al. 2022).\n\n\nPara ser útil durante la enseñanza, una evaluación formativa debe ser rápida de administrar (de manera que no rompa el flujo de la lección) y debe tener una respuesta correcta no ambigua (de manera que pueda ser usada en grupos). Probablemente, el tipo de evaluación formativa que más ampliamente se usa es la pregunta de opción múltiple. Muchos/as docentes tienen una mala opinión sobre ellas, pero cuando las preguntas de opción múltiple están bien diseñadas pueden revelar mucho más que solo si alguien sabe o no algunos hechos específicos. Por ejemplo, si estás enseñando en primaria cómo hacer sumas de números con múltiples dígitos (Ojose (2015)) y les das esta pregunta de opción múltiple:\n\n¿Cuánto es 37 + 15?\n1. 52\n2. 42\n3. 412\n4. 43\n\nLa respuesta correcta es 52, pero las otras respuestas proporcionan información valiosa:\n\nSi elige 42, no entiende qué significa “llevarse” una unidad. (Podría escribir 12 como respuesta a 7+5, pero luego reemplazaría el 1 con el 4 que obtiene de la suma de 3+1.)\nSi elige 412, está tratando a cada columna de números como un problema separado. Esto sigue siendo incorrecto, pero es incorrecto por un motivo distinto.\nSi elige 43, entonces sabe que tiene que llevarse el 1, pero lo lleva de vuelta a la columna de la que viene. De nuevo, es un error distinto que requiere de una explicación clarificadora diferente por parte de quien enseña.\n\nCada una de estas respuestas incorrectas es un distractor plausible con poder diagnóstico. Un distractor es una respuesta incorrecta o una respuesta peor que la mejor respuesta; “plausible” significa que parece que podría ser correcta, mientras que “poder diagnóstico” significa que cada uno de los distractores ayuda al/a la docente a darse cuenta qué debe explicar a continuación a estudiantes puntuales.\nLa variedad de respuestas a una evaluación formativa te guía cómo continuar. Si una cantidad suficiente de la clase tiene la respuesta correcta, avanzas. Si la mayoría de la clase elige la misma respuesta incorrecta, deberías retroceder y trabajar en corregir el concepto erróneo que ese distractor señala. Si las respuestas de la clase se dividen equitativamente entre varias opciones, probablemente están arriesgando, entonces deberías retroceder y re-explicar la idea de una manera distinta. (Repetir exactamente la misma explicación probablemente no será útil, lo cual es uno de los motivos por los que tantos cursos por video son pedagógicamente ineficientes.)\n¿Qué pasa si la mayoría de la clase vota por la respuesta correcta pero un grupo pequeño vota por las incorrectas? En ese caso, tienes que decidir si deberías destinar tiempo a que la minoría entienda o si es más importante mantener a la mayoría cautivada. No importa cuán duro trabajes o qué prácticas de enseñanza uses, no siempre vas a conseguir darle a todo tu curso lo que necesita; es tu responsabilidad como docente tomar la decisión.\n\n3.1.2 ¿De dónde vienen las respuestas incorrectas?\nPara diseñar distractores plausibles, piensa en las preguntas que tus estudiantes hicieron o en los problemas que tuvieron la última vez que enseñaste esa temática. Si no la has enseñado antes, piensa en tus propios conceptos erróneos, pregúntale a colegas sobre sus experiencias o busca la historia de tu campo temático: si las demás personas han tenido los mismos malentendidos sobre la temática cincuenta años atrás, hay chances de que la mayoría de tus estudiantes aún malentiendan la temática de la misma forma al día de hoy. También puedes hacer preguntas abiertas en clase para recoger los conceptos erróneos sobre los temas que vas a abarcar en una clase posterior, o consultar sitios de preguntas y respuestas como [Quora][quora] o [Stack Overflow][stack-overflow] para ver con qué se confunden quienes aprenden la temática en cualquier otro lugar.\n\nDesarrollar evaluaciones formativas mejora tus lecciones porque te fuerza a pensar en los modelos mentales de tus estudiantes. En nuestra experiencia, al pensar evaluaciones formativas automáticamente escribimos la lección de forma de abarcar los baches y errores más probables. Las evaluaciones formativas, por lo tanto, también son útiles fuera del aula, durante el diseño de la lección.\nLas preguntas de opción múltiple no son el único tipo de evaluación formativa: el Chapter 13 describe otros tipos de ejercicios que son rápidos y no son ambiguos. Cualquiera sea la evaluación que escojas, deberías hacer alguna que tome un minuto o dos cada 10–15 minutos de manera de asegurarte de que tus estudiantes están realmente aprendiendo. Este ritmo no está basado en un límite de atención intrínseco: Wilson and Korn (2007) encontró poca evidencia a favor de la afirmación usualmente repetida de que los/las estudiantes solo pueden prestar atención durante 10–15 minutos. En cambio, la guía asegura que, si un número significativo de personas se ha quedado atrás, solo tienes que repetir una pequeña porción de la lección. Las evaluaciones formativas frecuentes también mantienen a tus estudiantes involucrados en la clase, particularmente si se involucran en una discusión en un grupo pequeño (Section 10.2).\nLas evaluaciones formativas también pueden ser usadas antes de las lecciones. Si comienzas una clase con una pregunta de opción múltiple y toda la clase la contesta correctamente, puedes evitar explicar algo que tus estudiantes ya saben. Este tipo de enseñanza activa te da más tiempo para enfocarte en las cosas que tus estudiantes no saben. También le muestra a tus estudiantes que respetas su tiempo lo suficiente como para no desperdiciarlo, lo que ayuda a la motivación (Chapter 11).\n\n\n\n\n\n\nTrivias\n\n\n\nDurante los cursos de Visualización y Gestión de Datos que Yanina enseñó con Paola Corrales, utilizaban una trivia como evaluación formativa.\nLa trivia contenía una serie de preguntas de opción múltiple con respuestas que incluían conceptos erróneos comunes que las docentes identificaron en las diferentes ediciones de esos cursos.\nPor ejemplo con SQL:\n\n¿Cuándo tengo que hacer JOINS en SQL?\nA) Cuando los datos que necesito están en filas de diferentes tablas.\nB) Cuando los datos que necesito están en columnas de diferentes tablas.\nC) ni idea!\n\nPor ejemplo, con ggplot:\n\nEl siguiente código, ¿Corre o da error?\nggplot(paises, aes(x = paises$pib_per_capita, y = paises$esperanza_de_vida)) + geom_point()\nA) No corre, las variables en x e y no son llamadas correctamente\nB) Corre, no tiene ningún problema!\nC) Si corre pero las variables en x e y no son llamadas correctamente\n\nLa dinámica del ejercicio es el siguiente:\n\nSe comparte un formulario donde los estudiantes deben seleccionar la respuesta que creen correcta.\nUna de las docentes comparte la pregunta con las opciones de respuesta en una slides y da un tiempo prudencial (30-90 seundos) para contestarlas utilizando el formulario.\nSe repite este paso con cada pregunta (entre 4 y 8) y luego se comparten las respuestas generales de cada pregunta con la clase.\nLas preguntas son de opción múltiple con 3 opciones (A, B, C). Cada pregunta tiene un gráfico y/o código asociado que aparece en la slide junto a las posibles opciones de respuesta.\nSe le explica a la clase antes de empezar que las respuestas no son tramposas y nos dan un montón de información para charlar.\nSe discute con la clase completa cual es la respuesta correcta y porqué las otras no son válidas. Esta discusión incluye codificación participatoria en vivo, donde se escribe el código de la pregunta, se ejecuta y se analiza como cambia de acuerdo a la respuesta seleccionada. La clase propone alternativas, las docentes las aplican en el momento, se questiona y explica las razones del resultado del código. También se explica porqué ocurre ese concepto erróneo.\n\nEste ejercicio es muy útil para chequear conocimiento antes de iniciar una clase, para explicar conceptos erróneos y para ayudar a la participación de la clase, en caso que los estudiantes sean tímidos.\n\n\n\n3.1.3 Inventario de conceptos\nCon una cantidad de datos suficiente, las preguntas de opción múltiple pueden ser sorprendentemente precisas. El ejemplo más conocido es el inventario del concepto de fuerza (Hestenes, Wells, and Swackhamer (1992)), que evalúa la comprensión sobre los mecanismos básicos newtonianos. Al entrevistar a un gran número de participantes, correlacionando sus conceptos erróneos con los patrones de respuestas correctas e incorrectas, así como mejorando las preguntas, los creadores de este inventario construyeron una herramienta de diagnóstico que permite identificar conceptos erróneos específicas. Las personas que investigan pueden utilizar dicha herramienta para medir el efecto de los cambios en los métodos de enseñanza (Hake (1998)). Tew y colaboradores desarrollaron y validaron una evaluación independiente del lenguaje para programación introductoria (Tew and Guzdial (2011)); Parker, Guzdial, and Engleman (2016) la replicaron y Hamouda et al. (2017) está desarrollando un inventario de conceptos sobre la recursividad. Sin embargo, es muy costoso construir herramientas de este tipo y su validez está cada vez más amenazada por la habilidad para buscar respuestas en línea o utilizando grandes modelos de lenguaje.\n\nDesarrollar evaluaciones formativas en una clase requiere un poco de preparación y práctica. Puedes darles a tus estudiantes tarjetas coloreadas o numeradas para que respondan una pregunta de opción múltiple simultáneamente (en lugar de que tengan que levantar sus manos en turnos), incluyendo como una de las opciones “No tengo idea” y alentando que hablen un par de segundos con sus pares más cercanos antes de responder. Todas estas prácticas te ayudarán a garantizar que el flujo de enseñanza no sea interrumpido. La Section 10.2 describe un método de enseñanza poderoso y basado en evidencias, construido a partir de estas simples ideas.\n\n3.1.4 Humor\nA veces se incluyen respuestas supuestamente tontas en las preguntas de opción múltiple, como “¡mi nariz!”, particularmente en los cuestionarios destinados a estudiantes jóvenes. Sin embargo, estas respuestas no proveen ninguna idea sobre conceptos erróneos y la mayoría de la gente no las encuentran graciosas. Como regla, deberías solo incluir un chiste en una lección si lo encuentras gracioso la tercera vez que lo relees.\n\nLas evaluaciones formativas de una lección deberían preparar a los/las estudiantes para una evaluación sumativa: nadie debería encontrar nunca una pregunta en un examen para la cual la enseñanza no lo/la ha preparado. Esto no significa que no debes incluir nuevos tipos de problemas en un examen, pero, si lo haces, deberías haber ejercitado de antemano a tus estudiantes para abordar problemas nuevos. El Chapter 7 explora este punto en profundidad."
  },
  {
    "objectID": "models.html#sec-models-notional",
    "href": "models.html#sec-models-notional",
    "title": "3  Modelos mentales y evaluación formativa",
    "section": "3.2 Máquina nocional",
    "text": "3.2 Máquina nocional\nUna máquina nocional es un dispositivo pedagógico para ayudar a la comprensión de algún aspecto de los programas o la programación (Fincher et al. 2020). Se utilizan para representar un entorno de aprendizaje simplificado y abstracto. No se refiere a una máquina real física, sino a una representación simplificada de un modelo conceptual que se utiliza con fines educativos.\nEl grupo de trabajo ” ITiCSE 2020 - Capturing and Characterising Notional Machines” realizó un extenso trabajo de revisión bibliográfica, entrevistas, registro y colección curada de maquinas nocionales. En este trabajo determinaron que una máquina nocional tiene una finalidad pedagógica, su función genérica es llamar la atención sobre algún aspecto oculto de los programas o de la informática, o ponerlo en relieve. La máquina también tendrá un enfoque específico dentro de los programas o la informática, y adoptará una representación particular que destaque un aspecto específico del enfoque (Fincher et al. 2020).\n\nEn ese mismo trabajo, se encontró que la mayoría de la bibliografía presenta estudios de uso de las maquinas nocionales en los niveles universitario de grado, para estudiantes principiantes (CS1/2) y clasificaron las maquinas nocionales en dos tipos: basadas en analogías y basadas en representaciones. También determinaron que las maquina se pueden usar como parte del contenido de la lección o como herramienta de diagnóstico.\n\n3.2.1 Máquinas nocionales basadas en analogías\nEste tipo de máquinas utilizan un contexto con el que tus estudiantes están potencialmente familiarizados para explicar el contexto de programación. Esto permite que tus estudiantes razonen de manera familiar en el espacio análogo y transfieran ese razonamiento al espacio de programación (Fincher et al. 2020).\nEste tipo de máquina nocional suelen ser sencillas y cortas. Muchas veces un ejemplo o un explicación. Como las analogía sobre cocinar y comer que usamos en este mismo capítulo para explicar la diferencia entre evaluación formativa y evaluación sumativa.\nTambién pueden ser muy concretas, por ejemplo, docente y estudiantes pueden representar alguna parte de la máquina sobre la que se quiere llamar la atención o bien se pueden utilizar otros objetos concretos en el aula. Por ejemplo, Yanina, explica que son las variables y como se accede a su contenido utilizando un cajón como analogía. Luego expande sobre esa misma analogía para explicar que es un vector, utilizando una cajonera como ejemplo.\n\n\n3.2.2 Máquinas nocionales basadas en representación\nEn este caso las maquinas nocionales representan de una manera diferente el contexto de programación que se quiere enseñar. Existen diferentes formas de representación, como diagramas y juegos de rol y verbalizaciones (Fincher et al. 2020). Muchas veces se hacen a mano, por ejemplo un diagrama que dibujamos en una pizarra (ver mapa conceptuales en el capítulo TODO agregar capítulo) , mientras que otras pueden ser generadas por otras herramientas, por ejemplo una visualización automática de la ejecución de un programa.\nLas maquinas nocionales que se hacen a mano tienen diversos impactos en la enseñanza ya que requieren que el/la docente haga el trabajo de la maquina para explicar como funciona (enseñanza activa) y también relentiza la instrucción, permitiendo que le puedan seguir mejor.\n\n\n3.2.3 Uso de maquinas nocionales\nDurante una lección se pueden utilizar como dispositivos explicativos para acomodar el contenido al nivel de conocimiento actual de tus estudiantes y evitar una carga cognitiva innecesaria. En general una lección o un curso suele tener un repertorio de varias maquinas nocionales que sirven a objetivos de aprendizaje específicos de forma individual o para ir construyendo una maquina nocional basada en otra.\n\nTambién se utilizan para diagnosticar conceptos erróneos en tus estudiantes al exponer su modelo mental. Por ejemplo, Greg utiliza un test muy sencillo para determinar si sus estudiantes tienen un modelo mental de ejecución secuencial (tienen una formación en programación) o evaluación constante (tienen una formación en planillas de cálculo).\n\n\n\n\n\n\nMáquina Nocional: ¿Cómo se puede saber?\n\n\n\nDespués que el siguiente código se ejecute:\nA = 1\nB = A\nA = 99\nCuál es el valor de B?\nAlguien que piense en Excel va a contestar “99”, porque todo el punto de hacer B = A es hacer B igual a A, mientras que alguien que tiene su pensamiento formado por un lenguaje de progrmaación como Java o Python, va a contestar que B es todavía igual a 1.\n\n\nOtro ejemplo para el diagnóstico sobre que tanto están aprendiendo tus estudiaste utilizado por Greg es tener su propia máquina nocional y compararla con la de sus estudiantes mientras el curso avanza.\n\n\n\n\n\n\nMaquina nocional: Python\n\n\n\nGreg uso esta versión caricaturizada de la realidad siempre que enseña Python. Después de 25 horas de instrucción y 100 horas de trabajar por su cuenta, espera que la mayor parte del grupo tenga un modelo mental que incluya todas o la mayoría de estas características.\n\nEjecutar programas en el momento en la memoria, la cual se divide en la pila de llamadas y la cola de montículo (heap en inglés).\nLa memoria para los datos siempre es asignada desde la cola del montículo.\nCada conjunto de datos se almacena en una estructura de dos partes. La primera parte dice de qué tipo de datos se trata y la segunda parte es el valor real.\nBooleanos, números y caracteres de texto nunca son modificados una vez que se crean.\nLas listas, conjuntos y otras colecciones almacenan referencias a otros datos en lugar de almacenar estos valores directamente. Pueden ser modificados una vez que se crean, es decir, una lista puede ser ampliada o nuevos valores pueden ser agregados a un conjunto.\nCuando un código se carga a la memoria, Python lo convierte a una secuencia de instrucciones que son almacenadas como cualquier otro tipo de dato. Este es el motivo por el que es posible asignar funciones a variables y luego pasarlas como parámetros.\nCuando un código es ejecutado, Python sigue las instrucciones paso a paso, haciendo lo que cada instrucción le indica de a una por vez.\nAlgunas instrucciones hacen que Python lea datos, haga cálculos y cree nuevos datos. Otras, controlan qué instrucciones va a ejecutar, como los bucles y condicionales; también hay instrucciones que le indican a Python que llame a una función.\nCuando se llama a una función, Python coloca un nuevo marco de pila en la pila de llamadas.\nCada marco de pila almacena los nombres de las variables y las referencias a los datos. Los parámetros de las funciones son simplemente otro tipo de variable.\nCuando una variable es utilizada, Python la busca en el marco de la pila superior Si no la encuentra allí, busca en el último marco en la memoria global.\nCuando la función finaliza, Python la borra del marco de la pila y vuelve a las instrucciones que estaba ejecutando antes de llamar a la función. Si no encuentra un “antes,” el programa ha finalizado."
  },
  {
    "objectID": "models.html#sec-models-exercises",
    "href": "models.html#sec-models-exercises",
    "title": "3  Modelos mentales y evaluación formativa",
    "section": "3.3 Ejercicios",
    "text": "3.3 Ejercicios\n\n3.3.1 Tus modelos mentales (pensar-parejas-compartir/15’)\n¿Cuál es el modelo mental que usas para entender tu trabajo? Escribe unas pocas oraciones para describirlo y hazle una devolución a tu pareja sobre su modelo mental. Una vez que has hecho esto en pareja, algunas pocas personas de la clase compartirán sus modelos con el grupo completo. ¿Está todo el grupo de acuerdo sobre qué es un modelo mental? ¿Es posible dar una definición precisa?, ¿o el concepto es útil justamente porque es difuso?\n\n\n3.3.2 Síntomas de ser una persona novata (toda la clase/5’)\nDecir que las personas novatas no tienen un modelo mental de un dominio particular no es equivalente a decir que no tienen ningún modelo mental. Las personas novatas tienden a razonar por analogía y arriesgan conjeturas: toman prestado fragmentos y partes de modelos mentales de otros dominios que superficialmente parecen similares.\nLa gente que hace esto generalmente dice cosas que [ni siquiera son falsas][not-even-wrong-es]. Como clase, discutan qué otros síntomas tiene una persona novata. ¿Qué dice o hace una persona para llevarte a clasificarla como novata en algún dominio?\n\n\n3.3.3 Modelar modelos mentales de las personas novatas (parejas/20’)\nCrea una pregunta de opción múltiple relacionada a un tópico que has enseñado o pretendas enseñar y explica el poder diagnóstico de cada uno de sus distractores (es decir, qué concepto erróneo pretende ser identificado con cada distractor).\nUna vez que hayas finalizado, intercambia las preguntas de opción múltiple con tu pareja. ¿Son sus preguntas ambiguas? ¿Son los conceptos erróneos plausibles? ¿Los distractores realmente evalúan esos conceptos erróneos? ¿Hay otros posibles conceptos erróneos que no sean evaluados?\n\n\n3.3.4 Pensar en las cosas (toda la clase/15’)\nUna buena evaluación formativa requiere que la gente piense profundamente en un problema. Por ejemplo, imagina que has colocado un bloque de hielo en un recipiente y luego llenas de agua este recìpiente, hasta el borde. Cuando el hielo se derrite, ¿el nivel de agua aumenta (de manera que el recipiente rebasa)?, ¿el nivel de agua baja?, ¿o se mantiene igual Figure 3.1?\n\n\n\nFigure 3.1: Hielo en un recipiente\n\n\nLa solución correcta es que el nivel del recipiente permanece igual: el hielo desplaza a su propio peso en el agua, por lo que completa exactamente el “agujero” que ha dejado al derretirse. Para darse cuenta del porqué la gente construye un modelo de la relación entre el peso, el volumen y la densidad Epstein (2002).\nDescribe otra evaluación formativa que conozcas o hayas utilizado, alguna que consideres que lleve a los/las estudiantes a pensar profundamente en algo, y por lo tanto ayude a identificar los defectos en sus razonamientos.\nCuando hayas finalizado, explícale tu ejemplo a otra persona de tu grupo y dale una devolución sobre su ejemplo.\n\n\n3.3.5 Una progresión diferente (individual/15’)\nEl modelo de desarrollo de habilidades de persona novata-competente-experta es a veces llamado [modelo Dreyfus][dreyfus-model-es]. Otra progresión comúnmente utilizada es el modelo de las [cuatro etapas de la competencia][four-stages-competence-es]:\n\nIncompetencia inconsciente:\n\nla persona no sabe lo que no sabe.\n\nIncompetencia consciente:\n\nla persona se da cuenta de que no sabe algo.\n\nCompetencia consciente:\n\nla persona ha aprendido cómo hacer algo, pero solo lo puede hacer mientras mantiene su concentración y quizás aún deba dividir la tarea en varios pasos.\n\nCompetencia inconsciente:\n\nla habilidad se ha transformado en una segunda naturaleza y la persona puede realizarla reflexivamente.\n\n\nIdentifica una temática en la que te encuentres en cada uno de los niveles de desarrollo de habilidades. En la materia que enseñas, ¿en qué nivel están usualmente la mayoría de tus estudiantes? ¿Qué nivel estás tratando que alcancen? ¿Cómo se relacionan estas cuatro etapas con la clasificación persona novata-competente-experta?\n\n\n3.3.6 ¿Qué tipo de computación? (individual/10’)\nTedre and Sutinen (2008) resume tres tradiciones en computación:\n\nMatemática:\n\nLos programas son la encarnación de los algoritmos. Son correctos o incorrectos, así como más o menos eficientes.\n\nCientífica:\n\nLos programas son modelos de procesos de información más o menos adecuados que pueden ser estudiados usando el método científico.\n\nIngenieril:\n\nLos programas son objetos que se construyen, tales como los diques y los aviones, y son más o menos efectivos y confiables.\n\ndescription\n\n¿Cuál de estas tradiciones coincide mejor con tu modelo mental de la computación? Si ninguna de ellas coincide, ¿qué modelo tienes?\n\n\n\n\n3.3.7 Explicar por qué no (parejas/5’)\nUna persona de tu curso piensa que hay algún tipo de diferencia entre el texto que tipea carácter por carácter y el texto idéntico que copia y pega. Piensa en una razón por la que tu estudiante puede creer esto o en algo que pueda haber sucedido para darle esa impresión. Luego, simula ser esa persona mientras tu pareja te explica por qué no es así. Intercambia roles con tu pareja y vuelve a probar.\n\n\n3.3.8 Tu modelo ahora (toda la clase/5’)\nComo clase, creen una lista de elementos clave de tu modelo mental de enseñanza. ¿Cuáles son los seis conceptos más importantes y cómo se relacionan?\n\n\n3.3.9 Tus máquinas nocionales (grupos pequeños/20’)\nEn grupos pequeños, escriban una descripción de la máquina nocional que quieren que sus estudiantes usen para entender cómo corren sus programas. ¿En qué difiere una máquina nocional para un lenguaje basado en bloques como Scratch de la máquina nocional para Python? ¿Y en qué difiere de una máquina nocional para hojas de cálculo o para un buscador que está interpretando HTMLSigla de HyperText Markup Language en inglés y CSSSigla de Cascading Style Sheets en inglés cuando renderiza una página web?\n\n\n3.3.10 Colección de máquinas nocionales (grupos pequeños/20’)\nEn grupos pequeños visiten el sitio Notional Machines y selecciones Maquinas nocionales basadas en analogías. Revisen el catálogo e identifiquen cuales conocian y cuales no. Seleccionen una para usar en su próxima clase y revisenla en detalle. Compartan con su grupo porqué seleccionaron esa máquina nocional.\nSi hay alguna maquina nocional que conozcan y no está en el catálogo utilicen el formato de la web para describirla.\n\n\n3.3.11 Disfrutar sin aprender (individual/5’)\nMuchos estudios han mostrado que las evaluaciones de la enseñanza no se correlacionan con los resultados de la enseñanza Stark and Freishtat (2014),Uttl, White, and Gonzalez (2017), es decir, cuán alto sea el puntaje del grupo de estudiantes en un curso no predice cuánto recuerdan. ¿Alguna vez has disfrutado de una clase en la que en realidad no has aprendido nada? Si la respuesta es sí, ¿qué hizo que disfrutes esa clase?"
  },
  {
    "objectID": "models.html#sec-models-review",
    "href": "models.html#sec-models-review",
    "title": "3  Modelos mentales y evaluación formativa",
    "section": "3.4 Revisión",
    "text": "3.4 Revisión\n\n\n\nConceptos Modelos mentales\n\n\n\n\n\nConceptos Evaluación\n\n\n\n\n\nConceptos Maquina Nocional\n\n\n\n\n\n\nBeetham, Helen, Amy Collier, Laura Czerniewicz, Brian Lamb, Yuwei Lin, Jen Ross, Anne-Marie Scott, and Anna Wilson. 2022. “Surveillance Practices, Risks and Responses in the Post Pandemic University.” Digital Culture and Education 14 (1): 16–37.\n\n\nBenner, Patricia. 2000. From Novice to Expert: Excellence and Power in Clinical Nursing Practice. Pearson.\n\n\nEpstein, Lewis Carroll. 2002. Thinking Physics: Understandable Practical Reality. Insight Press.\n\n\nFehily, Chris. 2008. SQL: Visual QuickStart Guide. Third. Peachpit Press.\n\n\nFincher, Sally, Johan Jeuring, Craig S. Miller, Peter Donaldson, Benedict du Boulay, Matthias Hauswirth, Arto Hellas, et al. 2020. “Notional Machines in Computing Education: The Education of Attention.” In Proceedings of the Working Group Reports on Innovation and Technology in Computer Science Education, 21–50. ITiCSE-WGR ’20. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/3437800.3439202.\n\n\nGuzdial, Mark. 2015. “Top 10 Myths about Teaching Computer Science.” https://cacm.acm.org/blogs/blog-cacm/189498-top-10-myths-about-teaching-computer-science/fulltext.\n\n\nHake, Richard R. 1998. “Interactive Engagement Versus Traditional Methods: A Six-Thousand-Student Survey of Mechanics Test Data for Introductory Physics Courses.” American Journal of Physics 66 (1): 64–74. https://doi.org/10.1119/1.18809.\n\n\nHamouda, Sally, Stephen H. Edwards, Hicham G. Elmongui, Jeremy V. Ernst, and Clifford A. Shaffer. 2017. “A Basic Recursion Concept Inventory.” Computer Science Education 27 (2): 121–48. https://doi.org/10.1080/08993408.2017.1414728.\n\n\nHestenes, David, Malcolm Wells, and Gregg Swackhamer. 1992. “Force Concept Inventory.” The Physics Teacher 30 (3): 141–58. https://doi.org/10.1119/1.2343497.\n\n\nKalyuga, Slava, Paul Ayres, Paul Chandler, and John Sweller. 2003. “The Expertise Reversal Effect.” Educational Psychologist 38 (1): 23–31. https://doi.org/10.1207/s15326985ep3801_4.\n\n\nKernighan, Brian W., and Rob Pike. 1983. The Unix Programming Environment. Prentice-Hall.\n\n\nKernighan, Brian W., and P. J. Plauger. 1978. The Elements of Programming Style. Second. McGraw-Hill.\n\n\nKernighan, Brian W., and Dennis M. Ritchie. 1988. The c Programming Language. Second. Prentice-Hall.\n\n\nMuller, Derek A., James Bewes, Manjula D. Sharma, and Peter Reimann. 2007. “Saying the Wrong Thing: Improving Learning with Multimedia by Including Misconceptions.” Journal of Computer Assisted Learning 24 (2): 144–55. https://doi.org/10.1111/j.1365-2729.2007.00248.x.\n\n\nOjose, Bobby. 2015. Common Misconceptions in Mathematics: Strategies to Correct Them. UPA.\n\n\nParker, Miranda C., Mark Guzdial, and Shelly Engleman. 2016. “Replication, Validation, and Use of a Language Independent CS1 Knowledge Assessment.” In 2016 International Computing Education Research Conference (ICER’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2960310.2960316.\n\n\nPatitsas, Elizabeth, Jesse Berlin, Michelle Craig, and Steve Easterbrook. 2016. “Evidence That Computer Science Grades Are Not Bimodal.” In 2016 International Computing Education Research Conference (ICER’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2960310.2960312.\n\n\nRay, Eric J., and Deborah S. Ray. 2014. Unix and Linux: Visual QuickStart Guide. Fifth. Peachpit Press.\n\n\nStark, Philip, and Richard Freishtat. 2014. “An Evaluation of Course Evaluations.” ScienceOpen Research, September. https://doi.org/10.14293/s2199-1006.1.sor-edu.aofrqa.v1.\n\n\nTedre, Matti, and Erkki Sutinen. 2008. “Three Traditions of Computing: What Educators Should Know.” Computer Science Education 18 (3): 153–70. https://doi.org/10.1080/08993400802332332.\n\n\nTew, Allison Elliott, and Mark Guzdial. 2011. “The FCS1: A Language Independent Assessment of CS1 Knowledge.” In 2011 Technical Symposium on Computer Science Education (SIGCSE’11). Association for Computing Machinery (ACM). https://doi.org/10.1145/1953163.1953200.\n\n\nUttl, Bob, Carmela A. White, and Daniela Wong Gonzalez. 2017. “Meta-Analysis of Faculty’s Teaching Effectiveness: Student Evaluation of Teaching Ratings and Student Learning Are Not Related.” Studies in Educational Evaluation 54 (September): 22–42. https://doi.org/10.1016/j.stueduc.2016.08.007.\n\n\nWilson, Karen, and James H. Korn. 2007. “Attention During Lectures: Beyond Ten Minutes.” Teaching of Psychology 34 (2): 85–89. https://doi.org/10.1080/00986280701291291."
  },
  {
    "objectID": "joining.html#sec-joining-using",
    "href": "joining.html#sec-joining-using",
    "title": "21  Unirse a nuestra comunidad",
    "section": "21.1 Usando el libro",
    "text": "21.1 Usando el libro\nComo se declaró en el Capítulo Chapter 2, todo este material puede distribuirse y reutilizarse libremente bajo la licencia Creative Commons Atribución – No Comercial 4.0 (Chapter 19). Puedes usar la versión en línea en https://educarencomunidad.tech/ en cualquier clase (gratuita o paga), y puedes citar extractos breves bajo las disposiciones de [uso justo][uso-justo], pero no puedes volver a publicar fragmentos grandes en obras comerciales sin permiso previo.\nEste material ha sido usado de muchas maneras, desde charlas de media hora a talleres de varios encuentros semanales presenciales y virtuales.\nEn la siguiente sección te damos detalles de cada uno de los formatos en los que los autores hemos enseñado este contenido, que cubrimos en cada uno y donde puedes encontrar material de apoyo, como slides y documentos compartidos, ya desarrollado.\n\n21.1.1 Club de Lectura\nEl objetivo de un club de lectura es leer, discutir, aprender y poner en común experiencias generadas a partir del libro. Es una buena opción si no hay nadie que pueda enseñar el contenido y hay un grupo de personas interesadas en leer el material.\nPresentamos una guía para organizarlos por medio de diez puntos relevantes.\n\nPaso 1. Definir los objetivos del club\n\nLa idea es poder analizar cada capítulo, realizar los ejercicios propuestos y generar nuevos aprendizajes y construcciones en comunidad. Reflexionar sobre nuestra práctica educativa a la luz de lo leído, como por ejemplo reconocer recursos ya utilizados e identificar recursos y estrategias que podemos sumar. Es un buen momento para definir también el formato.\n\n\n\n\n\n\n\n\nFormato del club\n\n\n\nEste contenido se ha usado para club de lecturas en persona, con encuentros sincrónicos online y con hilos de discusión en redes sociales.\n\n\n\nPaso 2. Decidir frecuencia y duración de los encuentros.\n\n¿Cuántos encuentros?, ¿Con qué frecuencia?, ¿Cuál es la duración adecuada para cada encuentro?. Es probable que la respuesta a estas preguntas sea diferente para cada grupo de personas y el formato del club. En nuestra experiencia un encuentro semanal de una hora permite tener tiempo para prepararse, da continuidad y es más sencillo de acomodar en un agenda apretada. Puede ser buena idea que cada encuentro sea autocontenido, así no es necesario participar de todos los encuentros.\n\nPaso 3. Definir el calendario de temas\n\nEs necesario repartir los capítulos que se verán en cada encuentro. ¿Cuántos capítulos por encuentro?, ¿Leemos también los anexos?. Se pueden agrupar los capítulos y anexos por afinidad temática o bien seguir el orden del libro. Lo importante es tener un calendario predefinido que permita a las personas organizarse. Dos ideas:\n\n\n\nUn capítulo por cada encuentro semanal, con la última semana del mes libre para ponerse al día.\nOcho encuentros semanales en total. Se agrupan los capítulos y los anexos, por ejemplo, de esta manera:\n\n\n\n\n\n\n\n\nEncuentro\nCapítulos\n\n\n\n\n1\nModelos mentales y evaluación formativa. Tipos de Ejercicios\n\n\n2\nPericia y memoria. Ejemplos de mapas conceptuales\n\n\n3\nArquitectura cognitiva. Aprendizaje Individual\n\n\n4\nConocimiento de la pedagogía del contenido y Enseñar como un arte performativo\n\n\n5\nUn proceso para diseñar lecciones. Motivación y desmotivación\n\n\n6\nEn el salón de clase. Enseñar en línea\n\n\n7\nConstruyendo una comunidad de práctica. Difusión y vinculación. Reuniones, reuniones, reuniones\n\n\n8\nLas Reglas. Introducción. ¿Por qué enseño?\n\n\n\n\nPaso 4. Definir responsabilidades\n\nUna de las cosas más lindas de estos clubes es encontrarte con otras personas que disfrutan de los mismos temas que vos. Los clubes donde las personas van rotando en los diferentes roles son de los más ricos. Quienes tienen más experiencia pueden invitar y apoyar a las personas en roles nuevos. Antes de iniciar definir quien organiza, presenta y modera en cada encuentro.\n\nPaso 5. Configurar la infraestrutura\n\nGenerar un sitio web o foro con los detalles sobre cómo se hará, por qué, para quién, la dinámica (sincrónico/asincrónico), dónde (lugar físico o plataforma online), cómo registrarse, fechas, horarios y temas de los encuentros. Es recomendable una encuesta de feedback anónima para el final de cada encuentro. Seleccionar un código de conducta y el proceso para reforzarlo.\n\nPaso 6. Difusión\n\nHay que anunciar el club de lectura en redes sociales (con un hashtag propio), listas de emails, newsletter propio y de comunidades amigas. Si se puede, tener comunicaciones periódicas, contar qué pasó en cada encuentro y compartirlo con la comunidad en general, puede alentar a nuevas personas a sumarse al club.\n\nPaso 7. Guía de participación durante el encuentro\n\nGenerar un documento compartido (Google Doc/Slides, HackMD) estructurado para cada encuentro con una serie de secciones (ver Section 10.7). Las posibles secciones: Título y Datos generales, preguntas que guiarán la discusión y la charla (ejercicios para romper el hielo, trabajo en grupo, todos contestan, etc.), preguntas generales fijas en todos los encuentros, material interesante y lo que viene.\n\nPaso 8. Llevar adelante los encuentros\n\nLos responsables inician la plataforma, dan la bienvenida, recuerdan el código de conducta y dirigen la actividad (chat, documento compartido, diapositivas, salas para grupos, orden para hablar, etc). Quien presenta repasa los contenidos y gestiona la discusión. Cuando se cumple el tiempo, se comparte la encuesta anónima (si es presencial se puede usar las notas adhesivas Section 10.8) y los temas del encuentro siguiente. Si son encuentros sincrónicos y online, se puede dejar abierta la videollamada para extender el horario y quienes pueden siguen compartiendo.\n\nPaso 9. Darle un cierre memorable\n\nInvitar a autores y/o traductores al encuentro final puede ser un excelente cierre. Si no hablan el mismo idioma contratar a una traductora en vivo permite que cada persona hable en el idioma que se siente más cómoda. También es un buen momento para seleccionar el próximo libro.\n\nPaso 10. Evaluar el club y sistematizar lo aprendido\n\nLa encuesta de devolución provee material para evaluar (y mejorar) lo realizado. Ir ajustando cada encuentro con las devoluciones permite mejorar el tipo de actividad y de intercambios. Tener diversas formas de participación (hablado, escrito, en el chat, en el documento compartido, en el Slack, con notas adhesivas) genera un ambiente amigable.\n\n\n\n\n\n\n\n\nTODO Yani!\n\n\n\nTengo que gregar link a las secciones de notas compartidas, feedback y notas adhesivas.\n\n\n\n\n21.1.2 Cursos largos\nLlamamos cursos largos a los talleres de 8 a 16 horas de clase. Esta versión del curso se divide en diez lecciones donde se puede cubrir gran parte de los capítulos Chapter 3 a Chapter 7, Chapter 9, y Chapter 11. Greg a enseñado la versión de ocho horas más de 30 veces desde 2017 para compañías, bibliotecas y organizaciones de software libre. Yanina ha enseñado la versión de 12 y 16 horas más de 10 veces desde 2021, en español y online para comunidades de práctica, compañías, instituciones de investigación y universidades públicas.\nEsta lista resume los objetivos de aprendizaje de cada lección.\n\n\n\n\n\n\nTODO Yani!\n\n\n\nChequear bien que estos sean los capítulos correctos y si hay alguno más que agregar.\n\n\n\nLección 1. Introducción y Personas\n\n\nResumir cuatro objetivos clave de esta formación.\nExplicar cómo y por qué esta formación prepara a las personas para ser “paramédicos educativos”.\nExplicar qué son las personas o estudiantes tipo y para qué sirven.\nDescribir los cuatro elementos que debe tener toda persona tipo.\nCrear estudiantes tipo.\nResumir las lecciones de manera que resulten entendibles y atractivas para determinadas personas tipo.\n\n\nLección 2. Modelos mentales\n\n\nDescribir las diferencias entre estudiantes principiantes, competentes y expertos/as.\nExplicar qué es un modelo mental y por qué no necesita ser completo ni correcto para ser útil.\nExplicar cómo la falta de un modelo mental afecta el aprendizaje de las personas principiantes y por qué el objetivo de las lecciones para principiantes debe ser ayudarles a construir un modelo mental.\nExplicar cómo el docente puede saber si alguien tiene un modelo mental funcional.\nExplicar qué es un mapa conceptual y qué elementos debe tener.\nDescribir cinco maneras en que los mapas conceptuales pueden ser utilizados para planificar, enseñar y evaluar lecciones.\nCrear mapas conceptuales.\nDescribir 5 estrategias para trabajar con estudiantes de distintos niveles.\n\n\n\n\n\n\n\n\n\nRecortando contenido\n\n\n\nPara la versión de ocho horas, el objetivo 4 se pueden quitar de la lección.\n\n\n\nLección 3. Carga Cognitiva\n\n\nExplicar la diferencia entre la memoria a largo plazo y a corto plazo y describir el ciclo de recuperación/codificación.\nDescribir cómo se procesa, integra y almacena la información visual y auditiva.\nResumir las conclusiones de Benner et al sobre los modos de aprendizaje (visual + habla, visual + texto, visual + habla + texto).\nDefinir los tres tipos de carga cognitiva e identificar correctamente ejemplos de cada uno.\nExplicar que implicancias tiene la teoría de la carga cognitiva para el diseñar y enseñar lecciones.\nExplicar qué es un problema de Parsons y cómo su eficacia puede basarse en la teoría de la carga cognitiva.\nCrear Problemas de Parsons y explicar cuándo y cómo deben o no deben utilizarse.\n\n\nLección 4. Capacidad Cognitiva\n\n\nExplicar qué es “siete más menos dos” (capacidad de la memoria a corto plazo) y qué implica para diseñar y enseñar lecciones.\nExplicar como los mapas conceptuales pueden ayudar a manejar la capacidad cognitiva.\nExplicar qué es un ejemplo desvanecido y cómo su eficacia puede basarse en la capacidad limitada de la memoria a corto plazo.\nIdentificar qué tipo de carga cognitiva reducen los problemas desvanecidos.\nCrear ejercicios con ejemplos desvanecidos y explicar cuándo y cómo deben o no utilizarse.\n\n\n\n\n\n\n\n\n\nRecortando contenido\n\n\n\nPara la versión de ocho horas, los objetivos 2 y 4 se pueden quitar de la lección.\n\n\n\nLección 5.Crítica - Devolución - Feedback\n\n\nDescribir las principales diferencias entre el material didáctico estático y la presentación dinámica de las clases, así como el papel de la improvisación en esta última.\nExplicar tres estrategias para obtener feedback que son útiles para mejorar nuestra enseñanza.\nExplicar las características de una crítica constructiva.\nDescribir los elementos de una rubrica básica para dar feedback sobre la enseñanza.\nExplicar qué es la demostración (y programación) en vivo.\nExplicar los cuatro pasos que debe dar un instructor cada vez que comete un error durante una demostración en vivo delante de una clase.\nCriticar de forma constructiva presentaciones de clases grabadas y en directo.\nIdentificar y utilizar tres herramientas (notas adhesivas, ticket de salida, uno arriba-uno abajo) para solicitar feedback a los estudiantes.\n\n\n\n\n\n\n\n\n\nRecortando contenido\n\n\n\nPara la versión de ocho horas, los objetivos 2,3,5 y 8 se pueden quitar de la lección.\n\n\n\nLección 6.Evaluación\n\n\nDefinir los términos “evaluación formativa” y “evaluación sumativa” y explicar las diferentes funciones de cada una.\nExplicar por qué y cómo las evaluaciones formativas deben identificar conceptos erróneos.\nDescribir tres maneras en que los docentes pueden determinar qué conceptos erróneos buscar.\nExplicar los objetivos complementarios de las evaluaciones formativas para docentes y estudiantes.\nExplicar qué es la instrucción entre pares, por qué es eficaz y los requisitos para que tenga éxito.\nDescribir el papel de la evaluación sumativa y las características de las evaluaciones sumativas eficaces.\nDescribir el proceso de diseño inverso de una lección.\nCrear peguntas de opciones múltiples efectivas.\n\n\n\n\n\n\n\n\n\nRecortando contenido\n\n\n\nPara la versión de ocho horas, el objetivo 8 se pueden quitar de la lección.\n\n\n\nLección 7.Motivación\n\n\nDescribir la diferencia entre motivación intrínseca y extrínseca.\nResumir tres factores principales de motivación y desmotivación de estudiantes adultos neurotípicos.\nDefinir el término “falso principiante”, explicarlo en términos de modelos mentales y explicar los desafíos especiales que los falsos principiantes presentan en la enseñanza.\nExplicar los peligros de la pre-evaluación y como se relaciona con la motivación.\nDescribir que acciones se pueden tomar como docente para contribuir a la inclusión en clase.\nExplicar el papel de los escenarios y los juegos de rol en la adquisición de habilidades de persona aliada.\nDescribir y justificar los pasos que debe dar un/a docente si tiene que expulsar a un/a estudiante de su clase.\n\n\n\n\n\n\n\n\n\nRecortando contenido\n\n\n\nPara la versión de ocho horas, los objetivos 3, 4 y 5 se pueden quitar de la lección.\n\n\n\nLección 8.Aprendizaje\n\n\nExplicar la diferencia entre aprendizaje activo y pasivo y dar dos razones de por qué el primero es más eficaz.\nEnumerar seis estrategias que los estudiantes pueden utilizar para acelerar su aprendizaje\nJustificar al menos dos de las estrategias mencionadas en función de las ideas introducidas en esta formación.\n\n\n\n\n\n\n\n\n\nRecortando contenido\n\n\n\nPara la versión de ocho horas, el objetivo 3 se pueden quitar de la lección.\n\n\n\nLección 9.Preparándote para Enseñar\n\n\nDescribir y resumir las técnicas para que la enseñanza interactiva en línea sea más eficaz.\nDescribir dos métodos para garantizar que la atención se distribuye equitativamente entre los participantes de la clase y explicar por qué es importante.\nPreparar un inicio de clase que genere un ambiente positivo, incluyendo tu presentación.\nEscribir objetivos de aprendizajes claros y determinar como se pueden evaluar.\n\n\n\n\n\n\n\n\n\nRecortando contenido\n\n\n\nPara la versión de ocho horas, el objetivo 3 y 4 se pueden quitar de la lección.\n\n\n\nLección 10. Mitos Educativos y Reglas para enseñar\n\n\nIdentificar varios mitos comunes sobre la educación y el aprendizaje.\nMencionar varias ideas sobre la educación y el aprendizaje que se encuentran en revisión.\nReflexionar sobre realizar una buena enseñanza.\nIdentificar fuentes de información donde seguir aprendiendo.\n\n\n\n\n\n\n\n\n\nRecortando contenido\n\n\n\nPara la versión de ocho horas, los objetivos 2 a 4 se pueden quitar de la lección.\n\n\n\n21.1.2.1 Formato del curso\nEste curso puede dictarse con diferentes configuraciones. Este cronograma de ejemplo corresponde a un curso de doce horas con tres encuentros de cuatro horas cada uno. Es recomendable espaciar los encuentros, con al menos un día entre cada uno. Se puede enseñar en persona, en formato híbrido u online. Se recomienda que la cantidad de participantes no sea mayor a 25 personas.\n\n\n\n\n\n\n\nDía 1\nEjemplo horario a la mañana\n\n\n\n\n09:00\nBienvenida ¿Qué debe esperar de este taller?\n\n\n09:15\nIntroducción. Personas tipo. Modelos Metales. ¿Cómo aprenden las personas? ¿Cómo podemos ayudar a los novatos a convertirse en practicantes competentes?\n\n\n10:30\nPausa de la mañana\n\n\n10:45\nExperiencia e instrucción ¿La experiencia en la materia convierte a alguien en un gran docente? ¿En qué nos diferenciamos instructores de estudiantes y cómo afecta esto a nuestra enseñanza?\n\n\n11:30\nMemoria y carga cognitiva ¿Qué es la carga cognitiva y cómo afecta al aprendizaje?, ¿Cómo podemos diseñar la enseñanza para trabajar con, en lugar de contra, las limitaciones de la memoria?\n\n\n12:15\nDesarrollar la habilidad con la retroalimentación ¿Cómo puedo obtener la retroalimentación de los alumnos? ¿Cómo puedo utilizar esta retroalimentación para mejorar mi enseñanza?\n\n\n13:00:\nFin del primer día\n\n\n\n\n\n\n\n\n\n\nDía 2\nEjemplo horario a la tarde\n\n\n\n\n13.00\nBienvenida, consultas día anterior.\n\n\n13:30\nMotivación y desmotivación ¿Por qué es importante la motivación? ¿Cómo podemos crear un entorno motivador para los alumnos?\n\n\n14:35\nEquidad, inclusión y accesibilidad ¿Por qué son importantes la equidad, la inclusión y la accesibilidad? ¿Qué puedo hacer para mejorar la equidad, la inclusión y la accesibilidad en mi taller?\n\n\n15:15\nPausa de la tarde\n\n\n15:30\nLa enseñanza es una habilidad ¿Cómo puedo mejorar mi enseñanza?\n\n\n16:30\nRecapitulación y deberes ¿Qué hemos aprendido hasta ahora? ¿Qué hay que hacer para preparar la siguiente parte del taller?\n\n\n16:50\nCierre del día\n\n\n\n\n\n\n\n\n\n\nDía 3\nEjemplo horario a la mañana\n\n\n\n\n09:00\nBienvenida ¿Qué hemos aprendido hasta ahora?¿En qué nos centraremos hoy?\n\n\n09:15\nInteracción. La codificación en vivo es una habilidad ¿Por qué enseñamos a programar utilizando la codificación participativa en vivo?\n\n\n09:50\nPreparación para enseñar ¿Cómo debo prepararme para enseñar?\n\n\n10:25\nPausa de la mañana\n\n\n10:35\nCodificación en vivo y feedback. Más práctica de codificación en vivo ¿Cómo cambió tu enseñanza en respuesta a la retroalimentación?\n\n\n11:15\nTrabajar con su equipo ¿Cuáles son los retos de gestionar un aula heterogénea? Enseñando en equipo.\n\n\n11:25\nPausa\n\n\n11:35\nMitos en la educación. Las reglas para enseñar.\n\n\n12:10\n¿Cómo se utilizan las prácticas de enseñanza que hemos aprendido?\n\n\n12:40\nConclusión. ¿Qué podemos mejorar en esta formación?\n\n\n12:50\nEncuesta posterior a la formación\n\n\n13:00\nCierre día 3.\n\n\n\n\n\n\n\n\n\nMaterial complementario\n\n\n\nSi quieres enseñar el libro utilizando alguno de los formatos de cursos largos, el curso Enseñando Tecnología en Comunidad. Consejos prácticos para enseñar aplicando la ciencia del aprendizaje y la enseñanza. tiene todo el material en español para un taller de doce horas y Teaching Tech Together tiene todo el material en inglés para un taller de 8 horas, que incluye una propuesta que re acomoda los contenidos de las lecciones.\n\n\n\n\n\n21.1.3 Cursos cortos\nEs posible crear cursos cortos con una duración de entre una hora y media y tres horas. Se pueden dar online de forma sincrónica o en persona. Yanina impartió estos cursos cortos más de 40 veces desde 2020.\n\n21.1.3.1 Introducción a enseñar\nEl objetivo de este curso corto es introducir buenas prácticas básicas para manejo de espacios de intercambio de conocimiento sincrónico, ya sea de forma online o presencial y proveer el momento donde experimentar estas buenas prácticas en primera persona durante el taller.\n\n\n\n\n\n\nPredicar con el ejemplo\n\n\n\nTodos los detalles del encuentro, empezando por el registro hasta el pedido de devolución antes de finalizar el curso, pasando por la ejecución del mismo, son una demostración de las estrategias mencionadas en este libro y que pueden ser adoptadas o adaptadas a cualquier intercambio de saberes que suceda interactuando en simultáneo con una audiencia.\n\n\nLos objetivos de aprendizaje de estos cursos son:\n\nExplicar qué son las personas tipo y como usarlas para el diseño de la clase pensando en la audiencia objetivo.\nCrear estudiantes tipo.\nExplicar qué es un mapa conceptual y qué elementos debe tener.\nDescribir cinco maneras en que los mapas conceptuales pueden ser utilizados para diseñar lecciones y evaluar.\nCrear mapas conceptuales.\nDefinir los términos “evaluación formativa” y “evaluación sumativa” y explicar las diferentes funciones de cada una.\nExplicar por qué y cómo las evaluaciones formativas deben identificar conceptos erróneos.\nDescribir tres maneras en que los docentes pueden determinar qué conceptos erróneos buscar.\nExplicar las características de una crítica constructiva.\nDescribir siete herramientas pedagógicas rápidas basadas en evidencia y fáciles de implementar en entornos online, hibridos y presenciales.\nReconocer fuentes de las cuales seguir aprendiendo y expandiendo prácticas pedagógicas.\n\n\n\n\n\n\n\nRecortando contenido\n\n\n\nPara la versión de una hora y media, los objetivos 4,5 y 7 se pueden quitar de la lección.\n\n\n\n\n21.1.3.2 Formato del curso\nEste curso puede dictarse con diferentes configuraciones. Este cronograma de ejemplo corresponde al curso de tres horas en horaario de la mañana. Se puede enseñar en persona, en formato híbrido u online. Se recomienda que la cantidad de participantes no sea mayor a 25 personas.\n\n\n\n\n\n\n\nHorario\nActividad\n\n\n\n\n8:50 - 9:00\nTiempo previo para conectarse y asegurarse que anda bien tu conexión de audio y video (si no tienes cámara no importa, si la tienes, ayuda)\n\n\n9:00 - 9:05\nComienzo con reglas básicas para bajar la frustración en una teleconferencia\n\n\n9:05 - 9:15\nNos presentamos\n\n\n9:15 - 9:20\nEjercicio: piensa y comparte una persona tipo que será parte de tu audiencia\n\n\n9:20 - 9:30\nMapas conceptuales\n\n\n9:35 - 9:50\nEjercicio: haz un mapa conceptual\n\n\n9:50 - 9:55\nPausa lejos de la pantalla\n\n\n9:55 - 10:15\nConsejos concretos para todo tipo de clases\n\n\n10:15 - 10:30\nEjercicio en grupos: tu consejo favorito\n\n\n10:30 - 10:50\nConsejos concretos para clases online\n\n\n10:50 - 10:55\nPausa lejos de la pantalla\n\n\n10:55 - 11:05\nMás consejos para clases remotas\n\n\n11:05 - 11:20\nEjercicio en grupos: qué consejos de los anteriores usamos en este taller\n\n\n11:20 - 11:40\n¿Cómo hacer buenas devoluciones?\n\n\n11:45 - 11:50\nEjercicio individual: Cuéntanos qué te pareció el taller\n\n\n11:50 - 12:00\nFuentes adicionales y cierre\n\n\n\n\n\n\n\n\n\nMaterial complementario\n\n\n\nSi quieres enseñar estos contenidos del libro utilizando alguno de los formatos de cursos cortos, este es un un ejemplo de los materiales utilizados en el taller de tres horas en español y este es el material utilizado en el taller de una hora y media, también en español.\n\n\n\n\n21.1.3.3 Cómo enseñar a programar\nEl objetivo de este curso corto es introducir y demostrar técnicas y buenas prácticas básicas para el diseño de tus lecciones de programación y el manejo de espacios de intercambio de conocimiento sincrónico, ya sea de forma online o presencial. Durante todo el taller se ilustran los conceptos presentados usando ejemplos de uso en diferentes lenguajes de programación.\nLos objetivos de aprendizaje de este taller son:\n\nDescribir los cuatro elementos que debe tener toda persona tipo.\nDescribir las diferencias entre estudiantes principiantes, competentes, expertos/as y falso principiante.\nExplicar qué es un modelo mental y cómo la falta de un modelo mental afecta el aprendizaje de las personas principiantes.\nEscribir objetivos de aprendizajes claros y determinar como se pueden evaluar.\nDescribir el proceso de diseño reverso de una lección.\nDefinir los términos “evaluación formativa” y “evaluación sumativa” y explicar las diferentes funciones de cada una.\nExplicar por qué y cómo las evaluaciones formativas deben identificar conceptos erróneos.\nIdentificar y utilizar ocho tipos de ejercicios para enseñar programación de forma activa y utilizarlos como evaluación formativa.\nExplicar qué es la instrucción entre pares, por qué es eficaz y los requisitos para que tenga éxito.\nExplicar qué es la demostración (y programación) en vivo. 11.Explicar los cuatro pasos que debe dar un instructor cada vez que comete un error durante una demostración en vivo delante de una clase.\nUtilizar una rúbrica simple de evaluación. 13.Identificar buenas prácticas de programación y las formas de promover su uso entre tus estudiantes.\nDescribir recursos fuera del aula que pueden dar apoyo a tus estudiantes en su camino de aprender a programar.\n\n\n\n21.1.3.4 Formato del curso\nEste curso puede dictarse con diferentes configuraciones. Este cronograma de ejemplo corresponde al curso de tres horas. Se puede enseñar en persona, en formato híbrido u online. Se recomienda que la cantidad de participantes no sea mayor a 25 personas.\n\n\n\n\n\n\n\nDuración (min)\nActividad\n\n\n\n\n5\nTiempo previo para conectarse y asegurarse que anda bien tu conexión de audio y video (si no tienes camarita no importa, pero si la tienes ayuda)\n\n\n15\nPresentación del curso\n\n\n30\nDiseño de lecciones\n\n\n20\nRevisión por pares y Devolución\n\n\n25\nTipos de Evaluación\n\n\n15\nPromueve buenas prácticas de programación\n\n\n10\nEnseña a buscar ayuda\n\n\n30\nProgramación en vivo\n\n\n10\nCierre del curso: resumen y devolución\n\n\n\n\n\n\n\n\n\nMaterial complementario\n\n\n\nSi quieres enseñar estos contenidos del libro utilizando el formatos de cursos cortos, este es un un ejemplo de los materiales utilizados en el taller de tres horas en español.\n\n\n\n\n\n21.1.4 En persona\nLas personas que participan están físicamente en el mismo lugar. Cuando necesitan practicar cómo enseñar en pequeños grupos, parte de la clase o toda la clase va a habitaciones cercanas. Cada participante usa su propia tableta o computadora portátil para ver material en línea durante la clase y para tomar notas compartidas (Section 10.7), y usa lápiz y papel o pizarras para otros ejercicios. Las preguntas y la discusión se hacen en voz alta.\nSi estás enseñando en este formato, debes usar notas adhesivas como indicadores de estado para que puedas ver quién necesita ayuda, quién tiene preguntas y quién está listo/a para seguir adelante (Section 10.8). También debes usarlos para distribuir la atención, para que todo el curso obtenga tu atención y tiempo de forma justa, como tarjetas de actas para alentar a tus estudiantes a reflexionar sobre lo que acaban de aprender y para darte retroalimentación procesable mientras todavía tienes tiempo para actuar en consecuencia.\n\n\n21.1.5 Formato híbrido\nEn este formato, entre 10 a 40 estudiantes se juntan en 2 a 6 grupos de 4 a 12 personas, pero esos grupos están distribuidos geográficamente. Cada grupo usa una cámara y un micrófono para conectarse a la videollamada, en lugar de que cada persona esté en la llamada por separado. Un buen audio es más importante que un buen video en ambas direcciones: una voz sin imágenes (como la radio) es mucho más fácil de entender que las imágenes sin narrativa, y quienes enseñan no necesitan ver a las personas para responder preguntas, siempre y cuando esas preguntas se puedan escuchar con claridad. Dicho esto, si una lección no es accesible, entonces no es útil (Section 11.3): proporcionar texto descriptivo es una ayuda cuando la calidad del audio es deficiente, e incluso si el audio es bueno resulta importante para aquellas personas con dificultades auditivas.\nToda la clase toma notas compartidas (Section 10.7), y también usa las notas compartidas para hacer y responder preguntas. Tener varias decenas de personas tratando de hablar en una llamada no funciona bien, así que en la mayoría de las sesiones el/la docente habla y sus estudiantes responden a través del chat de la video llamada o de la herramienta para tomar notas.\n\n\n21.1.6 En línea\n\nAsistiendo de forma individual\n\nLa extensión natural de estar en línea en grupos es estar en línea en forma individual. Al igual que con los grupos en línea, el/la docente hablará la mayoría de las veces y los/las estudiantes participarán principalmente a través del chat de texto. También en este caso, y siempre teniendo en cuenta los aspectos de accesibilidad, un buen audio es más importante que un buen video, y quienes participan deberían usar el chat de texto para indicar que quieren hablar (Chapter 23).\n\n\nTener participantes en línea individualmente hace que sea más difícil dibujar y compartir mapas conceptuales (Section 4.4) o dar retroalimentación sobre la enseñanza (Section 9.5). Por lo tanto, quienes enseñen deberán confiar más en el uso de ejercicios con resultados escritos que se puedan poner en las notas compartidas, como por ejemplo, dar una devolución sobre videos de personas enseñando.\n\nMulti-semana\n\nel grupo se reunirá durante varias semanas combinando opciones en cantidad y duración de los encuentros:\n\n\n\nClases de una hora: la clase se reúne todas las semanas durante una hora a través de videoconferencia. Cada reunión puede realizarse dos veces para acomodar las zonas horarias y los horarios de los/las estudiantes. Los/las participantes toman notas compartidas como se describió anteriormente para las clases grupales en línea, para publicar tareas en línea entre clases y para comentar sobre el trabajo de los demás. En la práctica, los comentarios son relativamente raros: la gente prefiere discutir el material en las reuniones semanales.\n\nEste fue el primer formato que Greg utilizó pero ya no lo recomienda. Mientras que extender la clase les da a las personas tiempo para reflexionar y abordar ejercicios más extensos, también aumenta en gran medida las probabilidades de que tengan que abandonar debido a otras demandas de su tiempo.\n\nEncuentro de medias jornadas: el grupo de entre 12 a 26 personas realiza uno o dos encuentros semanales, durante cuatro o dos semanas de forma sincrónica on-line durante cuatro horas. Todo el material del curso está disponible en un sitio web con anterioridad. Si Hay dos clases semanales se deja al menos un día entre cada encuentro.\n\nLa clase está estructurada con presentación de contenido con participación activa de los estudiantes por medio de notas compartidas y el chat de la plataforma de videoconferencia. También hay resolución de ejercicios grupales al finalizar de explicar un grupo de temas o conceptos. Se usan documentos compartidos y una reflexión grupal general luego de cada ejercitación. Todos los grupos comparten, al menos una vez, el resultado de sus ejercicios grupales durante los encuentros sincrónicos.\nSe les permite a los estudiantes seleccionar si quieren mantener los grupos de un encuentro a otro o prefieren cambiarlos para conocer a mas personas que están tomando el curso.\nEste formato tiene la ventaja de dar tiempo para reflexionar y repasar el material entre las clases, pero se mantiene lo suficientemente concentrado en el tiempo para que no intervenga tanto en la rutina de las personas, llevandolas a abandonar. Yanina ha enseñado este material utilizando este formato con muy buenos resultados.\n\n\n21.1.7 Organizando los cursos\n\n21.1.7.1 Antes de empezar\nLa clase consta de dos sesiones de 4,5 horas en días consecutivos. Unos días antes de empezar, envío a los participantes un recordatorio con los detalles de la videoconferencia, un par de lecturas breves y una invitación a un documento de Google para tomar notas en común. Les pido que añadan una o dos líneas sobre sí mismos al documento antes de que empiece la clase, tanto a modo de introducción como para asegurarme de que tienen permiso para editar el documento.\n\n\n21.1.7.2 Durante la clase\nSuelo tener entre media docena y dos docenas de alumnos a la vez. Si algunos de ellos están en el mismo lugar, les pido que compartan una cámara web y un micrófono de sala de reuniones decente (los micrófonos integrados en los portátiles no son buenos para las conversaciones en grupo), pero todos deben estar en el documento de Google.\nTodos están silenciados por defecto. Si alguien quiere hacer una pregunta, puede escribirla en el canal de chat de la videoconferencia o indicar que quiere hablar y anular el silencio cuando le llame. (Permitir ambos modos ayuda a sentirse más cómodas a las personas que se sienten tímidas o que necesitan más tiempo para redactar una pregunta). Utilizamos salas de descanso para debates en grupos pequeños y ejercicios de enseñanza entre iguales. Funcionan bastante bien, aunque es fácil que los grupos pierdan la noción del tiempo.\nLos alumnos hacen ejercicios cada 10-30 minutos. Yo pego una lista de nombres en el documento compartido; ellos escriben sus respuestas debajo de sus nombres para no tropezar con los cursores de los demás. También pueden pegar imágenes de cosas como mapas conceptuales; es un poco torpe, pero funciona sorprendentemente bien. También pueden compartir la pantalla con el resto de la clase siempre que quieran demostrar algo, lo cual es tan útil que he empezado a hacerlo también en las clases presenciales de programación.\nAl final, pido a los alumnos que hagan un recordatorio en el calendario dentro de un mes para enviarme un correo y decirme lo que aún recuerdan o les ha parecido útil. Alrededor del 20% de ellos envía ese mensaje, y es un indicador útil sobre lo que hay que seguir enseñando y lo que hay que dejar de lado porque no ha tenido impacto.\n\n\n\n\n\n\nTODO Yani!\n\n\n\nRevisar el como organziar porque posiblemente puedo agregar ams material del “en una caja”. Linkear al anexo de plantillas y check list.\n\n\n\n\n\n21.1.8 ¿Quién puede enseñar este material?\nEl club de lectura es una buena forma de tener una enseñanza entre pares, para un grupo de personas que están interesadas en trabajar sobre el material.\nParte de este material se utilizó en el entrenamiento de instructores de The Carpentries y RStudio (ahora Posit), por lo que las personas que están certificadas como instructores de estos programas son una opción razonable para enseñar el material del libro porque les ha sido enseñado y lo han estado aplicando en su tarea docente.\nThe Carpentries también forma trainers, que son las personas que forman a los instructores. Personas certificadas como trainers tienen un conocimiento más detallado de las prácticas pedagógicas presentadas en el libro y la experiencia de haber formado personas en estos temas."
  },
  {
    "objectID": "joining.html#sec-joining-contributing",
    "href": "joining.html#sec-joining-contributing",
    "title": "21  Unirse a nuestra comunidad",
    "section": "21.2 Contribuyendo al libro",
    "text": "21.2 Contribuyendo al libro\nEsperamos que elijas ayudarnos a mejorar este libro. Las contribuciones de todo tipo son bienvenidas, desde sugerencias para mejoras hasta erratas y nuevo material. Todas las personas que contribuyan deben cumplir con nuestro Código de Conducta (Chapter 20); al enviar tu trabajo, aceptas que pueda incorporarse tanto en forma original como editada y que pueda ser publicado bajo la misma licencia que el resto de este material (Chapter 19).\nSi tu material es incorporado, te agregaremos a los agradecimientos (Section 2.2) a menos que solicites lo contrario. Algunas ideas sobre como aportar al libro:\n\nEmpieza de a poco.\n\nArregla un error tipográfico, aclara la redacción de un ejercicio, corrige o actualiza una cita, o sugiere un mejor ejemplo o analogía para ilustrar algún punto.\n\nÚnete a la conversación.\n\nMira los issues y los cambios propuestos por otras personas y añádeles tus comentarios. A menudo es posible mejorar las mejoras, y es una buena manera de presentarte a la comunidad y hacer nuevas amistades. Las etiquetas “Beginner-Friendly” (apto para principiantes en inglés), “Work in Progress” (trabajo en progreso en inglés) y “Help Wanted” (se busca ayuda en inglés) son buenos issues para emepzar y unirte a la conversación.\n\nDiscute, luego edita.\n\nSi quieres proponer un gran cambio, como reorganizar o dividir un capítulo completo, por favor, completa un issue que describa tu propuesta y tu razonamiento y etiquétalo como “Addition” (agregar en inglés), “Correction” (corrección en inglés) ó “Discussion” (discusión en inglés). Te alentamos a que agregues comentarios a estos issues para que toda la discusión sobre qué y por qué esté abierta y se pueda archivar. Si se acepta la propuesta, el trabajo real puede dividirse en varios problemas o cambios más pequeños que se pueden abordar de forma independiente.\n\nTraduce.\n\nSi quieres traducir este material a otro idioma, por favor genera un issue que indique a que idioma quieres realizar la traducción. Te recomendamos que sea un trabajo que realices entre varias personas, con diferentes roles como traducir y revisar y editar. Como guía general, ten en cuenta estos puntos: a) utiliza una voz conversacional en lugar de una voz formal o académica, b) si corresponde, especifique qué dialecto o variante regional de la lengua se está utilizando, c) intenta ser neutral en cuanto al género, d) intenta ser idiomático.\n\nContanos como usaste el libro\n\nSiempre nos gusta escuchar cómo se ha usado este material. Puedes enviarnos un mail o completar un issue contando, cómo y dónde lo usaste y como te fue usándolo. Seguramente tienes ideas para mejorar el material del libro, te agradeceremos que nos compartas esas ideas.\n\nDibuja mapas conceptuales\n\nSi has generado mapas conceptuales para tus lecciones, cursos o talleres y quieres compartirlos, siempre agradecemos el aporte de más mapas conceptuales para nuestra colección.\n\nComparte tus personas\n\nSi describiste las personas tipo para tus lecciones o cursos y quieres compartirlos, considera agregarlos a nuestra colección."
  },
  {
    "objectID": "conceptmaps.html#sec-conceptmaps-diffmaps",
    "href": "conceptmaps.html#sec-conceptmaps-diffmaps",
    "title": "25  Ejemplos de Mapas Conceptuales",
    "section": "25.1 Diferentes mapas para el mismo concepto",
    "text": "25.1 Diferentes mapas para el mismo concepto\nEsta serie de tres mapas conceptuales, creados por Amy Hodge y reutilizados con su permiso, son un ejemplo de diferentes modelos mentales para un mismo tema.\n\n\n\nMapa conceptual desde el punto de vista socios y socias de la biblioteca\n\n\n\n\n\nMapa conceptual desde el punto de vista de la dirección de la biblioteca: el presupuesto de la bilbioteca es controlado por el gobierno de la ciudad. Con este presupuesto se paga por el personal, las instalaciones, el material y los programas de la biblioteca. Los/las socios/as usan los materiales, participan en los programas y visitan las instalaciones donde trabaja el personal. Este personal es gobernado por los sindicatos que pueden influenciar al gobierno de la ciudad.\n\n\n\n\n\nMapa conceptual desde el punto de vista de los/las amigos/as de la biblioteca: Los/las amigos/as de la biblioteca realizan las ventas de libros que generan fondos. Estos fondos se usan para pagar el mantenimiento y mejoras de las instalaciones y para pagar la realización de programas que apoyan a los socios/as y a la comunidad. Algunos/as de estos/as socios/as son parte de los/as amigos/as de la biblitoeca y también participan en las ventas de libros. El personal de la biblioteca es consultado por los socios/as sobre las instalaciones y los programas disponibles en la biblioteca."
  },
  {
    "objectID": "conceptmaps.html#sec-conceptmaps-datascience",
    "href": "conceptmaps.html#sec-conceptmaps-datascience",
    "title": "25  Ejemplos de Mapas Conceptuales",
    "section": "25.2 Mapas conceptuales sobre Ciencia de Datos",
    "text": "25.2 Mapas conceptuales sobre Ciencia de Datos\nEsta serie de mapas conceptuales presentan modelos mentales utilizados en lecciones de introducción a la ciencia de datos y fueron generados por diversos instructores certificados de RStudio (ahora Posit) y compartidos bajo licencia CC-BY. La colección completa se puede acceder en &lt;FIXME: ver de linkear al repo de Greg https://github.com/rstudio/concept-maps.&gt;\n\n\n\nTipos de Datos. Autores: Meghan Sposato, Brendan Cullen, Monica Alonso\n\n\n\n\n\nExpresiones regulares. Autores: Monica Alonso, Greg Wilson."
  },
  {
    "objectID": "conceptmaps.html#sec-conceptmaps-others",
    "href": "conceptmaps.html#sec-conceptmaps-others",
    "title": "25  Ejemplos de Mapas Conceptuales",
    "section": "25.3 Mapas conceptuales sobre",
    "text": "25.3 Mapas conceptuales sobre"
  },
  {
    "objectID": "memory.html#sec-memory-concept-maps",
    "href": "memory.html#sec-memory-concept-maps",
    "title": "4  Pericia y memoria",
    "section": "4.1 Mapas conceptuales",
    "text": "4.1 Mapas conceptuales\nLa herramienta que elegimos para representar el modelo mental de alguien es un mapa conceptual, en el cual los hechos son burbujas y las conexiones son relaciones etiquetadas. Como ejemplos, la Figure 4.1 muestra por qué la Tierra tiene estaciones (de [IHMC][ihmc]), y el Chapter 25 presenta mapas conceptuales de una biblioteca desde tres puntos de vista distintos.\n\n\n\nFigure 4.1: Mapa conceptual para estaciones\n\n\nPara mostrar cómo pueden ser usados los mapas conceptuales para enseñar programación, considera este bucle for en Python:\nfor letra in \"abc\":\n    print(letra)\ncuya salida es:\na\nb\nc\nLas tres “cosas” claves en este bucle se muestran al principio de la Figure 4.2, pero son solo la mitad de la historia. La versión ampliada en la parte derecha de la figura muestra las relaciones entre esas cosas, las cuales son tan importantes para la comprensión como los conceptos en sí mismos.\n\n\n\nFigure 4.2: Mapa conceptual para un bucle for\n\n\nLos mapas conceptuales pueden ser usados de varias maneras:\n\nPara ayudar a docentes a descubrir qué están tratando de enseñar.\n\nUn mapa conceptual separa el contenido del orden: en nuestra experiencia, las personas rara vez terminan enseñando las cosas en el orden en que las dibujaron por primera vez.\n\nPara mejorar la comunicación entre quienes diseñan las lecciones\n\nSi dos docentes tienen ideas muy diferentes de aquello que están tratando de enseñar, es probable que arrastren a sus estudiantes en diferentes direcciones. Dibujar y compartir mapas conceptuales puede ayudar a prevenirlo. Y sí: personas diferentes pueden tener mapas conceptuales diferentes para el mismo tema, pero el mapeo conceptual hace explícitas estas diferencias.\n\nPara mejorar la comunicación con estudiantes.\n\nSi bien es posible dar a tus estudiantes un mapa pre-dibujado al inicio de la lección para que puedan anotar, es mejor dibujarlo parte por parte mientras se está enseñando, para reforzar la relación entre lo que muestra el mapa y lo que tú dices. Volveremos a esta idea en la Section 5.1.\n\nPara evaluación.\n\nHacer que las/los estudiantes dibujen lo que creen que acaban de aprender le muestra a quien enseña lo que se pasó por alto y lo que se comunicó mal. Revisar los mapas conceptuales de estudiantes insume demasiado tiempo para utilizarlo como una evaluación formativa durante las clases, pero es muy útil en clases semanales una vez que tus estudiantes están familiarizadas/os con la técnica. La calificación es necesaria porque cualquier manera nueva de hacer algo, inicialmente enlentece a la gente—si quien está aprendiendo intenta encontrarle el sentido a la programación básica, pedirle que se imagine cómo esquematizar sus pensamientos al mismo tiempo es una carga que no conviene realizar.\n\n\nAlgunas/os docentes son escépticas/os a que las personas novatas puedan mapear efectivamente lo que entendieron, dado que la introspección y la explicación de lo entendido son generalmente habilidades más avanzadas que la comprensión en sí misma. Por ejemplo, Keppens and Hay (2008) observó el uso del mapeo conceptual en la enseñanza de computación. Uno de los hallazgos fue que “… el mapeo conceptual es problemático para muchas/os estudiantes porque evalúa la comprensión personal en lugar del conocimiento que simplemente se aprendió de memoria.” Como alguien que valora la comprensión sobre el conocimiento de memoria, lo considero un beneficio.\n\n4.1.1 Comienza por cualquier lugar\nCuando se pide por primera vez dibujar un mapa conceptual, muchas personas no saben por dónde empezar. Si esto ocurre, escribe dos palabras asociadas con el tema que estás tratando de mapear, luego dibuja una línea entre ellas y agrega una etiqueta explicando cómo estas dos ideas están relacionadas. Puedes entonces preguntarte qué otras cosas están relacionadas en el mismo sentido, qué partes tienen esas cosas, o qué sucede antes o después con los conceptos que ya están en la hoja a fin de descubrir más nodos y arcos. Después de eso, casi siempre la parte más difícil está terminada.\n\nLos mapas conceptuales son solo una forma de representar nuestro conocimiento de un tema Eppler (2006); otros incluyen diagramas de Venn, diagramas de flujo y árboles de decisión Abela (2009). Todos estos esquemas externalizan la cognición, es decir, hacen visibles los modelos mentales de manera que pueden ser comparados y combinadosParafraseando a Lady Windermere, obra de Oscar Wilde las personas a menudo no saben lo que piensan hasta que se escuchan a sí mismas decirlo.\n\n4.1.2 Trabajo crudo y honestidad\nMuchas/os diseñadoras/es de interfaces de usuaria/o creen que es mejor mostrar bocetos de sus ideas en lugar de maquetas pulidas, porque es más probable que las personas den una opinión honesta sobre algo que presumen que tiene pocos minutos de elaboración. Si parece que el trabajo requirió horas, la mayoría de las personas suavizará sus críticas. Al dibujar mapas conceptuales para motivar un intercambio de ideas, deberías entonces usar lápices y papel borrador (o marcadores y una pizarra) en lugar de sofisticadas herramientas de dibujo por computadora."
  },
  {
    "objectID": "memory.html#sec-memory-seven-plus-or-minus",
    "href": "memory.html#sec-memory-seven-plus-or-minus",
    "title": "4  Pericia y memoria",
    "section": "4.2 Siete más o menos dos",
    "text": "4.2 Siete más o menos dos\nMientras el modelo gráfico de conocimiento es incorrecto pero útil, otro modelo simple tiene bases fisiológicas profundas. Como una aproximación rápida, la memoria humana se puede dividir en dos capas distintas. La primera, llamada memoria a largo plazo o memoria persistente, es donde almacenamos cosas como los nombres de nuestra gente amiga, nuestra dirección, y lo que hizo un payaso en nuestra fiesta de cumpleaños de ocho que nos asustó mucho. La capacidad de esta capa de memoria es esencialmente ilimitada, pero es de acceso lento—demasiado lento para ayudarnos a lidiar con leones hambrientos y familiares descontentos.\nLa evolución entonces nos ha dado un segundo sistema llamado memoria a corto plazo o memoria de trabajo. Es mucho más rápida, pero también más pequeña: G. A. Miller (1956) estimó que la memoria de trabajo del adulto promedio solo podía contener 7 ± 2 elementos a la vez. Esta es la razón por la cual [los números de teléfono][phone-number-length] son de 7 u 8 dígitos de longitud: antes los teléfonos tenían un disco en vez de teclado y esa era la cadena de números más larga que la mayoría de los adultos podía recordar con precisión durante el tiempo que tardaba el disco en girar varias veces.\n\n4.2.1 Participación\nEl tamaño de la memoria de trabajo a veces se usa para explicar por qué los equipos deportivos tienden a formarse con aproximadamente media docena de miembros o se separan en sub-grupos como delanteras/os y línea de tres cuartos en rugby. También se usa para explicar por qué las reuniones solo son productivas hasta un cierto número de participantes: si veinte personas tratan de discutir algo, o bien se arman tres reuniones al mismo tiempo o media docena de personas hablan mientras los demás escuchan. El argumento es que la habilidad de las personas para llevar registro de sus pares está limitada al tamaño de la memoria de trabajo, pero hasta donde sé, esta aseveración jamás fue probada.\n\n7±2 es simplemente el número más importante al enseñar. Quien enseña no puede colocar información directamente en la memoria a largo plazo de una/un estudiante. En cambio, cualquier cosa que presente se almacena primero en la memoria a corto plazo de cada estudiante y solo se transfiere a la memoria a largo plazo después que ha sido mantenida ahí y ensayada (Section 6.1). Si quien enseña presenta demasiados contenidos y muy rápidamente, la vieja información no llega a transferirse a tiempo antes de ser desplazada por la nueva información.\nEsta es una de las maneras de usar mapas conceptuales al diseñar una lección: sirve para asegurarse que la memoria a corto plazo de tus estudiantes no estará sobrecargada. Con el mapa ya diseñado, la/el docente elige un fragmento apropiado para la memoria a corto plazo, el cual llevará a una evaluación formativa (Figure 4.3); en la próxima lección continuará con otro fragmento del mapa conceptual, y así sucesivamente.\n\n\n\nFigure 4.3: El uso de mapas conceptuales en el diseño de la lección\n\n\n\n4.2.2 Construyendo juntos mapas conceptuales\nLa próxima vez que tengas una reunión de equipo, entrega a cada persona una hoja de papel y pídeles que pasen unos minutos dibujando sus propios mapas conceptuales sobre el proyecto en el que están trabajando. A la cuenta de tres, haz que todos revelen sus mapas conceptuales al grupo. La discusión que sigue puede ayudar a las personas a comprender por qué han estado tropezando.\n\nTen en cuenta que el modelo simple de memoria presentado aquí ha sido reemplazado en gran medida por uno más sofisticado, en el que la memoria a corto plazo se divide en varios almacenamientos (p. ej. para memoria visual versus memoria lingüística), cada uno de los cuales realiza un pre-procesamiento involuntario M. D. Miller (2016) . Nuestra presentación es entonces un ejemplo de un modelo mental que ayuda al aprendizaje y al trabajo diario.\n\n4.2.3 Reconocimiento de patrones\nInvestigaciones recientes sugieren que el tamaño real de la memoria a corto plazo podría ser tan bajo como 4±1 elementos Didau and Rose (2016) . Para manejar conjuntos de información más grandes, nuestras mentes crean fragmentos. Por ejemplo, en general recordamos a las palabras como elementos simples más que como secuencia de letras. Del mismo modo, el patrón formado por cinco puntos en cartas o dados se recuerda como un todo en lugar de cinco piezas de información separadas.\nLas personas expertas tienen más fragmentos y de mayor tamaño que las no-expertas, p.ej. “ven” patrones más grandes y tienen más patrones con los que contrastar cosas. Esto les permite razonar a un nivel superior y buscar información de manera más rápida y precisa. Sin embargo, la fragmentación también puede engañarnos si identificamos mal las cosas: quienes recién llegan a veces pueden ver cosas que personas expertas han visto y pasado por alto.\nDada la importancia de la fragmentación para pensar, es tentador identificar [patrones de diseño][design-patterns-es] y enseñarlos directamente. Estos patrones ayudan a practicantes competentes a pensar y dialogar en varios dominios (incluida la enseñanza Bergin et al. (2012)), pero los catálogos de patrones son demasiado duros y abstractos para que personas novatas les encuentren sentido por su cuenta. Dicho esto, asignar nombres a un pequeño número de patrones parece ayudar con la enseñanza, principalmente dando a tus estudiantes un vocabulario más rico para pensar y comunicarse Kuittinen and Sajaniemi (2004),Byckling, Gerdt, and Sajaniemi (2005),Sajaniemi et al. (2006) . Volveremos a este tema en la Section 8.5."
  },
  {
    "objectID": "memory.html#sec-memory-becoming-expert",
    "href": "memory.html#sec-memory-becoming-expert",
    "title": "4  Pericia y memoria",
    "section": "4.3 Convirtiéndose en una persona experta",
    "text": "4.3 Convirtiéndose en una persona experta\nEntonces, ¿cómo se convierte alguien en una persona experta? La idea de que hacen falta diez mil horas de práctica para conseguirlo es ampliamente citada, pero [probablemente no sea verdad][ten-thousand-hour-rule]: hacer lo mismo una y otra vez es más probable que fortalezca los malos hábitos a que mejore la práctica. Lo que realmente funciona es hacer cosas similares pero sutilmente diferentes, prestando atención a qué funciona y qué no, y luego cambiando el comportamiento en respuesta a esta retroalimentación, para así mejorar de forma acumulativa. Esto se llama práctica deliberada o práctica reflectiva, y es común que las personas atraviesen tres etapas:\n\nActuar según la devolución de otros.\n\nLas/los estudiantes pueden escribir un ensayo sobre qué hicieron en sus vacaciones de verano y recibir devoluciones de una/un docente que les indique cómo mejorarlo.\n\nDar devoluciones sobre el trabajo de otras/os.\n\nLas/los estudiantes pueden realizar críticas de la evolución de un personaje en la novela de Jorge Amado Doña Flor y sus dos maridos. y recibir una devolución de una/un docente sobre esas críticas.\n\nDarse devoluciones a sí misma/o.\n\nEn algún punto, las/los estudiantes empiezan a criticar sus propios trabajos con las habilidades que ya han construido. Dado que auto-criticarse es mucho más rápido que esperar los comentarios de otras personas, esta aptitud comenzará a desarrollarse de un momento a otro.\n\n\n\n4.3.1 ¿Qué cuenta como práctica deliberada?\nMacnamara, Hambrick, and Oswald (2014) descubrió que “…la práctica deliberada explicaba el 26% de la varianza en el rendimiento de los juegos, 21% para música, 18% para deportes, 4% para educación, y menos del 1% para profesiones.” Sin embargo, Ericsson (2016) criticó este hallazgo diciendo: “Resumir cada hora de cualquier tipo de práctica durante la carrera de un individuo implica que el impacto de todos los tipos de actividad práctica respecto a rendimiento es igual ——una suposición que…es inconsistente con la evidencia.” Para ser efectiva, la práctica deliberada requiere tanto un objetivo de rendimiento claro como una devolución informativa inmediata. Se trata de dos cosas que las/los docentes deberían esforzarse en conseguir."
  },
  {
    "objectID": "memory.html#sec-memory-exercises",
    "href": "memory.html#sec-memory-exercises",
    "title": "4  Pericia y memoria",
    "section": "4.4 Ejercicios",
    "text": "4.4 Ejercicios\n\n4.4.1 Mapear conceptos (parejas/30’)\nDibuja un mapa conceptual sobre algo que puedas enseñar en cinco minutos. Discute con tu colega y critiquen el mapa que cada cual elaboró. ¿Presentan conceptos o detalles superficiales? ¿Cuáles de las relaciones en el mapa de tu colega consideras conceptos y viceversa?\n\n\n4.4.2 Mapeo de conceptos (nuevamente) (grupos pequeños/20’)\nLa clase se divide en grupos de 3–4 personas. En cada grupo, cada persona diseña por su cuenta un mapa conceptual que muestre un modelo mental sobre qué sucede en un aula. Cuando todas las personas del grupo hayan terminado, comparen los mapas conceptuales. ¿En qué coinciden y difieren sus modelos mentales?\n\n\n4.4.3 Mejora de la memoria a corto plazo (individual/5’)\nCherubini et al. (2007) sugiere que la razón principal por la que las personas dibujan diagramas cuando discuten cosas es para ampliar su memoria a corto plazo: señalar una burbuja dibujada hace unos minutos provoca el recuerdo de varios minutos de debate. Cuando intercambiaste mapas conceptuales en el ejercicio anterior, ¿qué tan fácil fue para otras personas entender lo que significaba tu mapa? ¿qué tan fácil sería para ti si lo dejas de lado por un día o dos y luego lo miras de nuevo?\n\n\n4.4.4 Eso es un poco autorreferencial, ¿no? (toda la clase/30’)\nTrabajando independientemente, dibuja un mapa conceptual sobre mapas conceptuales. Compara tu mapa conceptual con aquellos dibujados por las demás personas. ¿Qué incluyeron la mayoría de las personas? ¿Cuáles fueron las diferencias más significativas?\n\n\n4.4.5 Notar tus puntos ciegos (grupos pequeños/10’)\nElizabeth Wickes listó [todo lo que necesitas saber para entender][wickes-python-lists] y leer esta línea de Python:\nrespuestas = ['tuatara', 'tuataras', 'bus', \"lick\"]\n\nLos corchetes rodeando el contenido significan que estamos trabajando con una lista (a diferencia de los corchetes inmediatamente a la derecha de algo, que es la notación utilizada para extraer datos).\nLos elementos se separan por comas fuera de las comillas (si las comas estuvieran dentro de las comillas, sería la cita de un texto).\nCada elemento es una cadena de caracteres, y lo sabemos por las comillas. Aquí podríamos tener números u otro tipo de datos si quisiéramos; necesitamos comillas porque estamos trabajando con cadenas de caracteres.\nEstamos mezclando el uso de comillas simples y dobles; a Python no le importa eso siempre que estén balanceadas alrededor de las cadenas individuales (por cada comilla que abre, una comilla que cierre).\nA cada coma le sigue un espacio, lo cual no es obligatorio para Python, pero lo preferimos para una lectura más clara.\n\nCada uno de estos detalles no sería ni percibido por una persona experta. Trabajando en grupos de 3–4 personas, selecciona algo igualmente corto de una lección que hayas enseñado o aprendido y divídelo a este nivel de detalle.\n\n\n4.4.6 Qué enseñar a continuación (individual/5’)\nVuelve al mapa conceptual para la fotosíntesis de la Figure 4.3. ¿Cuántos conceptos y relaciones hay en los fragmentos seleccionados? ¿Qué incluirías en el próximo fragmento de la lección y por qué?\n\n\n4.4.7 El poder de fragmentación (individual/5’)\nMira la Figure 4.4 por 10 segundos, luego mira hacia otro lado e intenta escribir tu número de teléfono con estos símbolosMi agradecimiento a Warren Code por presentarme este ejemplo.. (Usa un espacio para ‘0’.) Cuando hayas terminado, mira la representación alternativa en el (section-chunking?). ¿Cuánto más fáciles de recordar son los símbolos cuando el patrón se hace explícito?\n\n\n\nFigure 4.4: Representación no fragmentada\n\n\n\n\n\n\nAbela, Andrew. 2009. “Chart Suggestions - a Thought Starter.” http://extremepresentation.typepad.com/files/choosing-a-good-chart-09.pdf.\n\n\nBergin, Joseph, Jane Chandler, Jutta Eckstein, Helen Sharp, Mary Lynn Manns, Klaus Marquardt, Marianna Sipos, Markus Völter, and Eugene Wallingford. 2012. Pedagogical Patterns: Advice for Educators. CreateSpace.\n\n\nByckling, Pauli, Petri Gerdt, and Jorma Sajaniemi. 2005. “Roles of Variables in Object-Oriented Programming.” In 2005 Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA’05). Association for Computing Machinery (ACM). https://doi.org/10.1145/1094855.1094972.\n\n\nCherubini, Mauro, Gina Venolia, Rob DeLine, and Amy J. Ko. 2007. “Let’s Go to the Whiteboard: How and Why Software Developers Use Drawings.” In 2007 Conference on Human Factors in Computing Systems (CHI’07). Association for Computing Machinery (ACM). https://doi.org/10.1145/1240624.1240714.\n\n\nDidau, David, and Nick Rose. 2016. What Every Teacher Needs to Know about Psychology. John Catt Educational.\n\n\nEppler, Martin J. 2006. “A Comparison Between Concept Maps, Mind Maps, Conceptual Diagrams, and Visual Metaphors as Complementary Tools for Knowledge Construction and Sharing.” Information Visualization 5 (3): 202–10. https://doi.org/10.1057/palgrave.ivs.9500131.\n\n\nEricsson, K. Anders. 2016. “Summing up Hours of Any Type of Practice Versus Identifying Optimal Practice Activities.” Perspectives on Psychological Science 11 (3): 351–54. https://doi.org/10.1177/1745691616635600.\n\n\nKeppens, Jeroen, and David Hay. 2008. “Concept Map Assessment for Teaching Computer Programming.” Computer Science Education 18 (1): 31–42. https://doi.org/10.1080/08993400701864880.\n\n\nKuittinen, Marja, and Jorma Sajaniemi. 2004. “Teaching Roles of Variables in Elementary Programming Courses.” ACM SIGCSE Bulletin 36 (3): 57. https://doi.org/10.1145/1026487.1008014.\n\n\nMacnamara, Brooke N., David Z. Hambrick, and Frederick L. Oswald. 2014. “Deliberate Practice and Performance in Music, Games, Sports, Education, and Professions: A Meta-Analysis.” Psychological Science 25 (8): 1608–18. https://doi.org/10.1177/0956797614535810.\n\n\nMarsh, Herbert W., and John Hattie. 2002. “The Relation Between Research Productivity and Teaching Effectiveness: Complementary, Antagonistic, or Independent Constructs?” Journal of Higher Education 73 (5): 603–41. https://doi.org/10.1353/jhe.2002.0047.\n\n\nMiller, George A. 1956. “The Magical Number Seven, Plus or Minus Two: Some Limits on Our Capacity for Processing Information.” Psychological Review 63 (2): 81–97. https://doi.org/10.1037/h0043158.\n\n\nMiller, Michelle D. 2016. Minds Online: Teaching Effectively with Technology. Harvard University Press.\n\n\nNathan, Mitchell J., and Anthony Petrosino. 2003. “Expert Blind Spot Among Preservice Teachers.” American Educational Research Journal 40 (4): 905–28. https://doi.org/10.3102/00028312040004905.\n\n\nParnin, Chris, Janet Siegmund, and Norman Peitek. 2017. “On the Nature of Programmer Expertise.” In Psychology of Programming Interest Group Workshop 2017.\n\n\nPetre, Marian, and André van der Hoek. 2016. Software Design Decoded: 66 Ways Experts Think. MIT Press.\n\n\nSajaniemi, Jorma, Mordechai Ben-Ari, Pauli Byckling, Petri Gerdt, and Yevgeniya Kulikova. 2006. “Roles of Variables in Three Programming Paradigms.” Computer Science Education 16 (4): 261–79. https://doi.org/10.1080/08993400600874584."
  },
  {
    "objectID": "architecture.html#sec-architecture-brain",
    "href": "architecture.html#sec-architecture-brain",
    "title": "5  Arquitectura Cognitiva",
    "section": "5.1 ¿Qué es lo que sucede allí?",
    "text": "5.1 ¿Qué es lo que sucede allí?\n\n\n\nFigure 5.1: Arquitectura cognitiva\n\n\nLa Figure 5.1 es un modelo simplificado de la arquitectura cognitiva humana. El núcleo de este modelo es la separación entre la memoria a corto y a largo plazo vistas en la Section 4.2. La memoria a largo plazo es como tu sótano: almacena objetos de forma más o menos permanente pero tu conciencia no puede acceder a ella directamente. En cambio, confías en tu memoria a corto plazo, que es como el escritorio de tu mente.\nCuando necesitas algo, tu cerebro lo rescata de la memoria a largo plazo y lo coloca en la memoria a corto plazo. Por el contrario, la nueva información que llega a la memoria a corto plazo debe codificarse para poder ser almacenada en la memoria a largo plazo. Si esa información no está codificada y almacenada, no se recuerda y esto significa que no se ha aprendido.\nLa información ingresa a la memoria a corto plazo principalmente a través de tu canal verbal (para el habla) y del canal visual (para las imágenes) Un modelo más completo también incluiría el sentido del tacto, del olfato y del gusto, pero por ahora los ignoraremos.. Si bien la mayoría de las personas confía principalmente en su canal visual, cuando las imágenes y las palabras se complementan entre sí el cerebro hace un mejor trabajo al recordarlas: se codifican juntas, de modo que el recuerdo de una ayuda a activar el recuerdo de la otra.\nLas entradas lingüísticas y visuales son procesadas por diferentes partes del cerebro humano y a su vez los recuerdos lingüísticos y visuales son almacenados también de manera separada. Esto significa que correlacionar flujos de información lingüísticos y visuales requiere esfuerzo cognitivo: si alguien lee algo mientras lo escucha en voz alta, su cerebro no puede evitar comprobar que obtiene la misma información por ambos canales.\nPor lo tanto, el aprendizaje aumenta cuando la información se presenta de manera simultánea por dos canales diferentes, pero se reduce cuando esa información es redundante, en lugar de ser complementaria: tal fenómeno es conocido como efecto de atención dividida Mayer and Moreno (2003). Por ejemplo, en general las personas encuentran más difícil aprender de un video que tiene narración y capturas de pantalla que aprender de un video que únicamente tiene narración ó capturas (pero no ambos elementos), porque en el primer caso parte de su atención ha sido utilizada para chequear que la narración y las capturas se correspondan entre sí. Dos notables excepciones son las personas que aún no hablan bien un idioma y las que tienen algún impedimento auditivo u otras necesidades especiales, quienes quizás encuentren que el valor de la información redundante supera el esfuerzo de procesamiento adicional.\n\n5.1.1 Fragmento a fragmento\nEl efecto de la atención dividida explica por qué es más efectivo dibujar un diagrama fragmento a fragmento mientras enseñas, en lugar de presentar todo el gráfico de una sola vez. Si las partes de un diagrama aparecen al mismo tiempo en que los gráficos son explicados, el/la estudiante correlaciona ambos elementos en su memoria. Así que luego, al enfocarte en una parte del diagrama, es más probable que tu estudiante active la recuperación de lo que fue dicho cuando esa parte fue dibujada.\n\nEl efecto de la atención dividida no significa que los/las estudiantes no deberían intentar conciliar múltiples flujos de información entrantes — después de todo, esto es lo que tienen que hacer en el mundo real Atkinson et al. (2000) —. En cambio, significa que la instrucción no debería solicitar a las personas que lo hagan mientras están incorporando habilidades por primera vez: el uso de múltiples fuentes de información de manera simultánea debe tratarse como una tarea de aprendizaje separada.\n\n5.1.2 No todos los gráficos son equivalentes\nSung and Mayer (2012) presenta un elegante estudio que distingue los gráficos seductores (los cuales son altamente interesantes pero no son directamente relevantes al objetivo de la enseñanza), los gráficos decorativos (los cuales son neutros pero no son directamente relevantes al objetivo de la enseñanza), y por último los gráficos instructivos (los cuales sí son directamente relevantes al objetivo de la enseñanza). Los/las estudiantes que recibieron cualquier tipo de gráfico calificaron al material con un mayor puntaje, pero en verdad solo quienes recibieron gráficos instructivos obtuvieron mejores resultados.\nDel mismo modo, Stampfer and Koedinger (2013), @Stam2014 descubrió que tener más información en realidad puede disminuir el rendimiento. Les mostraron a niños/as: imágenes, imágenes más números, o simplemente números, para que realicen dos tareas. Para algunos/as niños/as, recibir imágenes o bien imágenes más números fue mejor que recibir únicamente números; pero para otros/as, recibir imágenes superó a recibir imágenes más números, lo que superó a solo tener números."
  },
  {
    "objectID": "architecture.html#sec-architecture-load",
    "href": "architecture.html#sec-architecture-load",
    "title": "5  Arquitectura Cognitiva",
    "section": "5.2 Carga cognitiva",
    "text": "5.2 Carga cognitiva\nEn Kirschner, Sweller, and Clark (2006), Kirschner, Sweller y Clark escribieron:\n\nAunque los enfoques educativos no guiados o mínimamente guiados son muy populares e intuitivamente atractivos…estos enfoques ignoran las estructuras que constituyen la arquitectura cognitiva humana así como la evidencia de estudios empíricos de los últimos cincuenta años. Dichas evidencias indican sistemáticamente que la instrucción guiada mínimamente es menos eficaz y menos eficiente que los enfoques educacionales con un fuerte énfasis en la orientación del proceso de aprendizaje del estudiante. La ventaja de la orientación disminuye sólo cuando los/las estudiantes tienen un conocimiento previo suficientemente elevado para proporcionar una orientación “interna”.\n\nMás allá de la jerga, lo que estos autores afirmaban es que el hecho de que los/las estudiantes hagan sus propias preguntas, establezcan sus propias metas y encuentren su propio camino a través de un tema es menos efectivo que mostrarles cómo hacer las cosas paso a paso. El enfoque “elige tu propia aventura” se conoce como aprendizaje basado en la indagación y es intuitivamente atractivo: después de todo, ¿quién se opondría a tener estudiantes que utilicen su propia iniciativa para resolver problemas del mundo real de forma realista? Sin embargo, pedir a los/las estudiantes que lo hagan en un nuevo dominio es una sobrecarga, ya que les exige que dominen al mismo tiempo el contenido fáctico de un dominio y las estrategias de resolución de problemas. Más específicamente, la teoría de la carga cognitiva propone que las personas tienen que lidiar con tres cosas cuando está aprendiendo:\n\nCarga intrínseca\n\nes lo que las personas tienen que tener en cuenta para aprender el material nuevo.\n\nCarga pertinente\n\nes el esfuerzo mental (deseable) requerido para vincular la nueva información con la antigua, que es una de las distinciones entre el aprendizaje y la memorización.\n\nCarga extrínseca\n\nes cualquier cuestión que distraiga del aprendizaje.\n\n\nLa teoría de la carga cognitiva sostiene que las personas tienen que dividir una cantidad fija de memoria de trabajo entre estas tres cosas. Nuestro objetivo como docentes es maximizar la memoria disponible para manejar la carga intrínseca, lo cual significa reducir la carga pertinente en cada paso y eliminar la carga extrínseca.\n\n5.2.1 Problemas de Parsons\nUn tipo de ejercicio que puede ser explicado en términos de carga cognitiva se utiliza a menudo en la enseñanza de idiomas. Supongamos que le pides a alguien que traduzca la frase “¿Cómo está tu rodilla hoy?” de castellano a catalán. Para resolver el problema, necesitan recordar tanto el vocabulario como la gramática, que es una carga cognitiva doble. Si, en lugar de traducir desde cero, les pides que pongan “com”, “està”, “el”, “teu”, “genoll” y “avui” en el orden correcto, les permites que se centren únicamente en el aprendizaje de la gramática. Sin embargo, si escribes estas palabras en seis fuentes o colores diferentes, has aumentado la carga cognitiva extrínseca, porque involuntariamente (y posiblemente de manera inconsciente) invertirán algo de esfuerzo tratando de averiguar si las diferencias entre las palabras son significativas de acuerdo a sus colores Figure 5.2.\n\n\n\nFigure 5.2: Construyendo una oración\n\n\nEl equivalente en programación de este ejemplo se llama problema de ParsonsNombrado así debido a uno de sus creadores. Parsons and Haden (2006).\nCuando enseñes a programar, puedes darles a tus estudiantes las líneas de código que necesitan para resolver un problema y pedirles que las ordenen en el orden correcto. Esto les permite concentrarse en el flujo de control y en las dependencias de datos, sin distraerse con la denominación de las variables o tratando de recordar qué funciones llamar. Múltiples estudios han demostrado que los problemas de Parsons demandan menos tiempo de resolución y producen resultados educativos equivalentes @Eric2017\n\n\n5.2.2 Ejemplos desvanecidos (o con espacios en blanco)\nOtro tipo de ejercicio que se puede explicar en términos de carga cognitiva es dar a tus estudiantes una serie de ejemplos desvanecidos (faded examples en inglés). El primer ejemplo de una serie presenta un uso completo de una estrategia particular de resolución de problemas. El siguiente problema es del mismo tipo, pero tiene algunas lagunas que tu estudiante debe llenar. Cada problema sucesivo da menos andamiaje (scaffolding en inglés), hasta que se pide resolver un problema completo desde cero. Al enseñar álgebra en la escuela secundaria, por ejemplo, podríamos comenzar con esto:\n\n\n\n(4x + 8)/2\n=\n5\n\n\n4x + 8\n=\n2 * 5\n\n\n4x + 8\n=\n10\n\n\n4x\n=\n10 - 8\n\n\n4x\n=\n2\n\n\nx\n=\n2 / 4\n\n\nx\n=\n1 / 2\n\n\n\ny luego pedir que los/las estudiantes resuelvan esto:\n\n\n\n(3x - 1)*3\n=\n12\n\n\n3x - 1\n=\n_ / _\n\n\n3x - 1\n=\n4\n\n\n3x\n=\n_\n\n\nx\n=\n_ / 3\n\n\nx\n=\n_\n\n\n\ny esto:\n\n\n\n(5x + 1)*3\n=\n4\n\n\n5x + 1\n=\n_\n\n\n5x\n=\n_\n\n\nx\n=\n_\n\n\n\ny, finalmente, esto:\n\n\n\n(2x + 8)/4\n=\n1\n\n\nx\n=\n_\n\n\n\nUn ejercicio similar para enseñar Python podría comenzar mostrando a estudiantes cómo encontrar la longitud total de una lista de palabras:\n# largo_total([\"rojo\", \"verde\", \"azul\"]) =&gt; 12\ndefine largo_total(lista_de_palabras):\n    total = 0\n    for palabra in lista_de_palabras:\n        total = total + length(palabra)\n    return total\ny luego pidiendo que llenen los espacios en blanco en este otro código (lo que centra su atención en las estructuras de control):\n# largo_palabra([\"rojo\", \"verde\", \"azul\"]) =&gt; [3, 5, 4]\ndefine largo_palabra(lista_de_palabras):\n    lista_de_longitudes = []\n    for ____ in ____:\n        append(lista_de_longitudes, ____)\n    return lista_de_longitudes\nEl siguiente problema podría ser este (que centra su atención en actualizar el resultado final):\n# juntar_todo([\"rojo\", \"verde\", \"azul\"]) =&gt; \"rojoverdeazul\"\ndefine juntar_todo(lista_de_palabras):\n    palabras_unidas = ____\n    for ____ in ____:\n        ____\n    return palabras_unidas\nFinalmente, los/las estudiantes tendrán que escribir una función completa por su cuenta:\n# generar_acronimo([\"rojo\", \"verde\", \"azul\"]) =&gt; \"RVA\"\ndefine generar_acronimo(lista_de_palabras):\n    ____\nLos ejemplos desvanecidos funcionan porque presentan la estrategia de resolución de problemas fragmento por fragmento. En cada paso, los/las estudiantes tienen un nuevo problema que abordar, lo cual es menos intimidante que una pantalla en blanco o una hoja de papel en blanco (Section 10.11). También anima a que los/las estudiantes piensen en las similitudes y diferencias entre varios enfoques, lo que ayuda a crear los vínculos en sus modelos mentales y de ese modo facilita la recuperación de la información.\nLa clave para construir un buen ejemplo desvanecido es pensar en la estrategia de resolución de problemas que se pretende enseñar. Por ejemplo, los problemas de programación sobre todo utilizan el patrón de diseño acumulativo, en el que los resultados del procesamiento de elementos de una colección se agregan repetidamente a una sola variable de alguna manera para crear el resultado final.\n\n5.2.3 Aprendizaje cognitivo\nUn modelo alternativo de aprendizaje e instrucción que también usa andamiaje y desvanecimiento es el aprendizaje cognitivo, que enfatiza la forma en que un/a docente transmite habilidades y conocimientos a un/a estudiante. El/la docente proporciona modelos de desempeño y resultados, luego entrena a las personas novatas explicando qué están haciendo y por qué Collins, Brown, and Holum (1991), Caspersen and Bennedsen (2007). El/la estudiante reflexiona sobre su propia resolución de problemas, por ejemplo, pensando en voz alta o criticando su propio trabajo, y finalmente explora problemas de su propia elección.\nEste modelo nos dice que los/las docentes deben presentar varios ejemplos al explicar una nueva idea para que los/las estudiantes puedan ver qué generalizar, y que deben variar la forma del problema para dejar en claro cuáles son y cuáles no son características superficialesPor mucho tiempo creí que la variable que contenía el valor que una función iba a devolver tenía que llamarse resultado, porque mi docente siempre usaba ese nombre en los ejemplos.. Los problemas deben presentarse en contextos del mundo real, y debemos fomentar la autoexplicación para ayudar a los/las estudiantes a organizarse y dar sentido a lo que se les acaba de enseñar (Section 6.1).\n\n\n\n5.2.4 Sub-objetivos etiquetados\nEtiquetar sub-objetivos significa dar nombre a los pasos en una descripción paso a paso de un proceso de resolución de problemas. Margulieux, Catrambone, and Guzdial (2016) , Morrison et al. (2016) descubrieron que al etiquetar los sub-objetivos, los/las estudiantes resolvían mejor los problemas de Parsons, y se observa el mismo beneficio en otros dominios Margulieux, Guzdial, and Catrambone (2012). Volviendo al ejemplo de Python usado anteriormente, los objetivos secundarios para encontrar la longitud total de una lista de palabras o construir un acrónimo son:\n\nCrea un valor vacío del tipo a obtener.\nA partir de la variable del bucle, obtén el valor que se agregará al resultado.\nActualiza el resultado con ese valor.\n\nEtiquetar sub-objetivos funciona porque agrupar los pasos relacionados en fragmentos con nombre (Section 4.2) ayuda a tus estudiantes a distinguir lo que es genérico de lo que es específico del problema en cuestión. También les ayuda a construir un modelo mental de ese tipo de problema, de modo que luego pueden resolver otros problemas de ese tipo, y les da una oportunidad natural para la auto-explicación (Section 6.1).\n\n\n5.2.5 Manuales mínimos\nLa aplicación más pura de la teoría de la carga cognitiva puede ser el manual mínimo de John Carroll Carroll et al. (1987), Carroll (2014). Su punto de partida es una cita de un usuario: “Quiero aprender a hacer algo, no aprender a hacer todo”. Carroll y sus colegas rediseñaron la capacitación para presentar cada idea como una tarea autónoma de una sola página: un título que describa de qué trata la página, instrucciones paso a paso sobre cómo hacer una sola cosa (por ejemplo, cómo eliminar una línea en blanco en un editor de texto) y luego varias notas sobre cómo reconocer y resolver problemas comunes. Descubrieron que reescribir los materiales de capacitación de esta manera los hacía más cortos en general y que las personas que los usaban aprendían más rápido. Estudios posteriores confirmaron que este enfoque superó al enfoque tradicional independientemente de la experiencia previa con computadoras Lazonder and van der Meij (1993). Carroll (2014) resumieron este trabajo diciendo:\n\nNuestros diseños “minimalistas” buscaban aprovechar la iniciativa de cada usuario/a y el conocimiento previo, en lugar de controlarlo mediante advertencias y pasos ordenados. Se enfatizaba que los/las usuarios/as generalmente aportan mucha experiencia y conocimiento a este aprendizaje, por ejemplo, conocimiento sobre el dominio de la tarea, y que dicho conocimiento podría ser un recurso para los/as diseñadores/as de instructivos. El minimalismo aprovechó los episodios de reconocimiento, diagnóstico y corrección de errores, en lugar de intentar simplemente prevenirlos. Es decir, enmarcó la resolución de problemas y la corrección como oportunidades de aprendizaje en lugar de aberraciones."
  },
  {
    "objectID": "architecture.html#sec-architecture-theory",
    "href": "architecture.html#sec-architecture-theory",
    "title": "5  Arquitectura Cognitiva",
    "section": "5.3 Otros modelos de aprendizaje",
    "text": "5.3 Otros modelos de aprendizaje\nQuienes critican la teoría de la carga cognitiva a veces han argumentado que cualquier resultado puede justificarse a posteriori al etiquetar como carga extrínseca a aquello que perjudica el rendimiento y como carga intrínseca o pertinente a aquello que no lo perjudica. Sin embargo, la instrucción basada en la teoría de la carga cognitiva es innegablemente efectiva. Por ejemplo, Mason, Seton, and Cooper (2016) rediseñó un curso de base de datos para eliminar la atención dividida y los efectos de redundancia y para proporcionar ejemplos prácticos y con sub-objetivos. El nuevo curso redujo la tasa de reprobación del examen en un 34% y aumentó la satisfacción de los/las estudiantes.\nUna década después de la publicación de Kirschner, Sweller, and Clark (2006), un número creciente de personas cree que la teoría de la carga cognitiva y los enfoques basados en la investigación son compatibles si se ven de la manera correcta. Kalyuga and Singh (2015) sostiene que la teoría de la carga cognitiva es básicamente una microgestión del aprendizaje dentro de un contexto más amplio que considera cuestiones como la motivación, mientras que Kirschner et al. (2018) extiende la teoría de la carga cognitiva para incluir aspectos colaborativos del aprendizaje. Al igual que con Markovits and Weinstein (2018) (discutido en la Section 6.1), las perspectivas de los/las investigadores/as pueden diferir, pero la implementación práctica de sus teorías a menudo termina siendo la misma.\nUno de los desafíos en la investigación educativa es que lo que queremos decir con “aprendizaje” resulta complicado una vez que se mira más allá del aula occidental estandarizada. Dos perspectivas específicas de la psicología educacional han influido en este libro. La que hemos utilizado hasta ahora es el cognitivismo, que se centra en conceptos como el reconocimiento de patrones, la formación de la memoria y el recuerdo. Es bueno para responder preguntas de bajo nivel, pero generalmente ignora cuestiones más importantes como, “¿Qué queremos decir con ‘aprendizaje’?” y “¿Quién tiene poder de decisión?” La segunda perspectiva utilizada es el aprendizaje situado, que se centra en integrar a las personas en una comunidad y reconoce que la enseñanza y el aprendizaje siempre están arraigados en quiénes somos y quiénes aspiramos a ser. Lo discutiremos con más detalle en el Chapter 14.\nEl sitio web de [Teorías de Aprendizaje][learning-theories] (Learning Theories en inglés) y Wiburg et al. (2016) tienen buenos resúmenes de estas y otras perspectivas. Además del cognitivismo, las que se encuentran con mayor frecuencia incluyen el conductismo (que trata la educación como un condicionamiento de estímulo/respuesta), el constructivismo (que considera al aprendizaje como un proceso activo durante el cual los/las estudiantes construyen conocimiento por sí mismos/as) y el conectivismo (que sostiene que el conocimiento se distribuye, que el aprendizaje es el proceso de navegar, crecer y podar conexiones, y que enfatiza los aspectos sociales del aprendizaje que internet hace posible). Estas perspectivas pueden ayudarnos a organizar nuestros pensamientos, pero en la práctica siempre tenemos que probar nuevos métodos en clase, con estudiantes reales, para descubrir qué tan bien equilibran las muchas fuerzas en juego."
  },
  {
    "objectID": "architecture.html#sec-architecture-exercises",
    "href": "architecture.html#sec-architecture-exercises",
    "title": "5  Arquitectura Cognitiva",
    "section": "5.4 Ejercicios",
    "text": "5.4 Ejercicios\n\n5.4.1 Crear un ejemplo desvanecido (parejas/30’)\nEs muy común que en los programas se cuenten cuántas cosas caen en diferentes categorías: por ejemplo, cuántas veces aparecen colores diferentes en una imagen o cuántas veces aparecen palabras diferentes en un párrafo de texto.\n\nCrea un ejemplo breve (no más de 10 líneas de código) que muestre a las personas cómo hacer esta tarea. Luego, crea un segundo ejemplo que resuelva un problema similar de una manera similar, pero que tenga un par de espacios en blanco para que los/las estudiantes los completen. ¿Cómo decides qué desvanecer? ¿Cuál sería el siguiente ejemplo de la serie?\nDefine el público de tus ejemplos. Por ejemplo, ¿son personas novatas que solo conocen algunos conceptos básicos de programación? ¿O son estudiantes con alguna experiencia en programación?\nMuestra tu ejemplo a tu pareja, pero no le digas para qué nivel crees que es. Una vez que tu pareja haya llenado los espacios en blanco, pídele que adivine el nivel de estudiante previsto.\n\nSi entre tus estudiantes hay personas que no programan en absoluto, intenta ubicarlos en diferentes grupos y pídeles que hagan el papel de estudiantes en sus grupos. Alternativamente, elige un dominio de problema diferente con el que desarrollar tu ejemplo desvanecido.\n\n\n5.4.2 Clasificación de carga (grupos pequeños/15’)\n\nElige una lección corta que alguna persona de tu grupo haya enseñado o tomado recientemente.\nHaz un listado con viñetas de las ideas, instrucciones y explicaciones que contiene la lección.\nClasifica cada elemento de tu listado como carga intrínseca, pertinente o extrínseca. ¿En qué ítems todas las personas del grupo estuvieron de acuerdo? ¿En cuáles estuvieron en desacuerdo y por qué?\n\n(El ejercicio “Notar tus puntos ciegos” en la Section 4.4 te dará una idea de cuán detallado debe ser tu listado de ítems).\n\n\n5.4.3 Crear un problema de Parsons (en parejas/20’)\nEscribe cinco o seis líneas de código que hagan algo útil, mézclalas y pídele a tu pareja que las ponga en orden. Si estás utilizando un lenguaje basado en indentación como Python, no utilices sangría en ninguna de las líneas; si estás utilizando un lenguaje de llaves como Java, no incluyas ninguna de las llaves. (Si tu grupo incluye personas que no programan, usa un dominio de problema diferente, como, por ejemplo, hacer budín de pan).\n\n\n5.4.4 Manuales mínimos (individual/20’)\nEscribe una guía de una página para hacer algo que tus estudiantes puedan encontrar en una de tus clases, como centrar el texto horizontalmente o imprimir un número con un cierto número de dígitos después del punto decimal. Intenta enumerar al menos tres o cuatro resultados incorrectos que tu estudiante pueda obtener e incluye una explicación de una o dos líneas de por qué ocurre cada uno y cómo corregirlo.\n\n\n5.4.5 Aprendizaje cognitivo (parejas/15’)\nElige un problema de codificación que puedas resolver en dos o tres minutos y piensa en voz alta mientras lo resuelves, al mismo tiempo tu pareja te hace preguntas sobre lo que estás haciendo y por qué. No solo explica lo que estás haciendo, sino también por qué lo estás haciendo, cómo sabes que es lo correcto y qué alternativas has considerado pero descartado. Cuando hayas terminado, intercambia roles con tu pareja y repite el ejercicio.\n\n\n5.4.6 Ejemplos resueltos (parejas/15’)\nVer ejemplos resueltos ayuda a las personas a aprender a programar más rápido que simplemente escribiendo mucho código Skudder and Luxton-Reilly (2014), y desconstruir el código rastreándolo o depurándolo también aumenta el aprendizaje Griffin (2016). Trabajando en parejas, revisa un fragmento de código de 10 a 15 líneas y explica qué hace cada declaración y por qué es necesaria. ¿Cuánto tiempo demoras? ¿Cuántas cosas crees que necesitas explicar por línea de código?\n\n\n5.4.7 Gráficos críticos (individual/30’)\nMayer (2009) , Miller (2016) presentan seis principios para una buena enseñanza de gráficos:\n\nSeñalización:\n\nresalta visualmente los puntos más importantes para que se destaquen del material menos crítico.\n\nContigüidad espacial:\n\ncoloca los subtítulos lo más cerca posible de los gráficos para compensar el costo de cambiar entre la imagen y el texto.\n\nContigüidad temporal:\n\nPresenta narraciones habladas y gráficos tan seguidos en el tiempo como sea práctico. (Presentar ambos a la vez es mejor que presentarlos uno tras otro).\n\nSegmentación:\n\nCuando presentes una secuencia larga de material o cuando tus estudiantes no tengan experiencia en el tema, divide la presentación en segmentos cortos y deja que los/las estudiantes controlen la rapidez con que avanzan al siguiente.\n\nPre-entrenamiento:\n\nSi tus estudiantes no conocen los conceptos y la terminología principales que utilizas en la presentación, enseña solo esos conceptos y términos de antemano.\n\nModalidad:\n\nlas personas aprenden mejor de las imágenes con narración que de las imágenes con texto, a menos que no sean hablantes nativas del idioma de la lección o que haya palabras o símbolos técnicos.\n\n\nElige un video de una lección o charla en línea que utilice diapositivas u otras presentaciones estáticas y califica sus gráficos como “deficientes”, “promedio” o “buenos” de acuerdo con estos seis criterios."
  },
  {
    "objectID": "architecture.html#sec-architecture-review",
    "href": "architecture.html#sec-architecture-review",
    "title": "5  Arquitectura Cognitiva",
    "section": "5.5 Revisión",
    "text": "5.5 Revisión\n\n\n\nel pensamiento está limitado por la carga cognitiva. Esta carga cognitiva puede ser intrísica (que es deseable), pertinente (que debería ser reducida) y extrínseca (que debería ser eliminada). El pensamiento accede a la memoria de corto plazo, el cual codificado pasa a la memoria de largo plazo desde la cual se puede recuperar a la memoría de corto plazo para ser utilizado. El discurso usa el canal lingüístico, las imágenes usan el canal visual y el texto usa ambos canales. El canal visual puede reforzar o puede conflictuar el canal lingüístico. Estos canales integrados se almacenan en la memoria de corto plazo.\n\n\n\n\n\n\nAtkinson, Robert K., Sharon J. Derry, Alexander Renkl, and Donald Wortham. 2000. “Learning from Examples: Instructional Principles from the Worked Examples Research.” Review of Educational Research 70 (2): 181–214. https://doi.org/10.3102/00346543070002181.\n\n\nCarroll, John. 2014. “Creating Minimalist Instruction.” International Journal of Designs for Learning 5 (2). https://doi.org/10.14434/ijdl.v5i2.12887.\n\n\nCarroll, John, Penny Smith-Kerker, James Ford, and Sandra Mazur-Rimetz. 1987. “The Minimal Manual.” Human-Computer Interaction 3 (2): 123–53. https://doi.org/10.1207/s15327051hci0302_2.\n\n\nCaspersen, Michael E., and Jens Bennedsen. 2007. “Instructional Design of a Programming Course.” In 2007 International Computing Education Research Conference (ICER’07). Association for Computing Machinery (ACM). https://doi.org/10.1145/1288580.1288595.\n\n\nCollins, Allan, John Seely Brown, and Ann Holum. 1991. “Cognitive Apprenticeship: Making Thinking Visible.” American Educator 6: 38–46.\n\n\nGriffin, Jean M. 2016. “Learning by Taking Apart.” In 2016 Conference on Information Technology Education (SIGITE’16). ACM Press. https://doi.org/10.1145/2978192.2978231.\n\n\nKalyuga, Slava, and Anne-Marie Singh. 2015. “Rethinking the Boundaries of Cognitive Load Theory in Complex Learning.” Educational Psychology Review 28 (4): 831–52. https://doi.org/10.1007/s10648-015-9352-0.\n\n\nKirschner, Paul A., John Sweller, and Richard E. Clark. 2006. “Why Minimal Guidance During Instruction Does Not Work: An Analysis of the Failure of Constructivist, Discovery, Problem-Based, Experiential, and Inquiry-Based Teaching.” Educational Psychologist 41 (2): 75–86. https://doi.org/10.1207/s15326985ep4102_1.\n\n\nKirschner, Paul A., John Sweller, Femke Kirschner, and Jimmy Zambrano R. 2018. “From Cognitive Load Theory to Collaborative Cognitive Load Theory.” International Journal of Computer-Supported Collaborative Learning, April. https://doi.org/10.1007/s11412-018-9277-y.\n\n\nLazonder, Ard W., and Hans van der Meij. 1993. “The Minimal Manual: Is Less Really More?” International Journal of Man-Machine Studies 39 (5): 729–52. https://doi.org/10.1006/imms.1993.1081.\n\n\nMargulieux, Lauren E., Richard Catrambone, and Mark Guzdial. 2016. “Employing Subgoals in Computer Programming Education.” Computer Science Education 26 (1): 44–67. https://doi.org/10.1080/08993408.2016.1144429.\n\n\nMargulieux, Lauren E., Mark Guzdial, and Richard Catrambone. 2012. “Subgoal-Labeled Instructional Material Improves Performance and Transfer in Learning to Develop Mobile Applications.” In 2012 International Computing Education Research Conference (ICER’12), 71–78. ACM Press. https://doi.org/10.1145/2361276.2361291.\n\n\nMarkovits, Rebecca A., and Yana Weinstein. 2018. “Can Cognitive Processes Help Explain the Success of Instructional Techniques Recommended by Behavior Analysts?” NPJ Science of Learning 3 (1). https://doi.org/10.1038/s41539-017-0018-1.\n\n\nMason, Raina, Carolyn Seton, and Graham Cooper. 2016. “Applying Cognitive Load Theory to the Redesign of a Conventional Database Systems Course.” Computer Science Education 26 (1): 68–87. https://doi.org/10.1080/08993408.2016.1160597.\n\n\nMayer, Richard E. 2009. Multimedia Learning. Second. Cambridge University Press.\n\n\nMayer, Richard E., and Roxana Moreno. 2003. “Nine Ways to Reduce Cognitive Load in Multimedia Learning.” Educational Psychologist 38 (1): 43–52. https://doi.org/10.1207/s15326985ep3801_6.\n\n\nMiller, Michelle D. 2016. Minds Online: Teaching Effectively with Technology. Harvard University Press.\n\n\nMorrison, Briana B., Lauren E. Margulieux, Barbara J. Ericson, and Mark Guzdial. 2016. “Subgoals Help Students Solve Parsons Problems.” In 2016 Technical Symposium on Computer Science Education (SIGCSE’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2839509.2844617.\n\n\nParsons, Dale, and Patricia Haden. 2006. “Parson’s Programming Puzzles: A Fun and Effective Learning Tool for First Programming Courses.” In 2006 Australasian Conference on Computing Education (ACE’06), 157–63. Australian Computer Society.\n\n\nSkudder, Ben, and Andrew Luxton-Reilly. 2014. “Worked Examples in Computer Science.” In 2014 Australasian Computing Education Conference, (ACE’14).\n\n\nStampfer, Eliane, and Kenneth R. Koedinger. 2013. “When Seeing Isn’t Believing: Influences of Prior Conceptions and Misconceptions.” In 2013 Annual Meeting of the Cognitive Science Society (CogSci’13).\n\n\nSung, Eunmo, and Richard E. Mayer. 2012. “When Graphics Improve Liking but Not Learning from Online Lessons.” Computers in Human Behavior 28 (5): 1618–25. https://doi.org/10.1016/j.chb.2012.03.026.\n\n\nWiburg, Karin, Julia Parra, Gaspard Mucundanyi, Jennifer Green, and Nate Shaver, eds. 2016. The Little Book of Learning Theories. Second. CreateSpace."
  },
  {
    "objectID": "community.html#sec-community-learn-then-do",
    "href": "community.html#sec-community-learn-then-do",
    "title": "14  Construyendo una comunidad de práctica",
    "section": "14.1 Aprende, luego hazlo",
    "text": "14.1 Aprende, luego hazlo\nEl primer paso para construir una comunidad es decidir si deberías construirla o si sería más efectivo unirte a una organización existente. Miles de grupos ya están enseñando habilidades tecnológicas, desde el [4-H Club][4h-club] y [programas de alfabetización][frontier-college] hasta organizaciones de programación sin fines de lucro como [Black Girls Code][black-girls-code] (Chicas Negras Programan, en inglés) y [Bridge][bridge] (Puente, en inglés). En los últimos años estas comunidades de práctica se han desarrollado también en Latinoamérica, desde aquellas que enseñan habilidades para enseñar como [MetaDocencia][metadocencia], las que intentan achicar la brecha de genero en STEAM como [GeoLatinas][geolatinas], [Las de Sistemas][las-de-sistemas] y [Mujeres en Tecnología][mujeres-en-tecnologia] hasta las que son parte de las organizaciones globales como los capítulos de [R-Ladies][r-ladies] (Mujeres de R en inglés) y [PyLadies][pyladies] (Mujeres de Python en inglés). Unirse a un grupo existente te dará ventajas en la enseñanza, un conjunto inmediato de colegas y la oportunidad de aprender más sobre cómo manejar las cosas; Con suerte, aprender esas habilidades a la par que haces una contribución inmediata será más importante que poder decir que eres la persona que fundó algo nuevo.\nYa sea que te unas a un grupo existente o inicies uno propio, tu efectividad será mayor si investigas un poco sobre organización de comunidades. Alinsky (1989), Lakey (2018) son probablemente los trabajos más conocidos sobre organización de grupos de base, mientras que Brown (2007), Midwest Academy (2010), Lakey (2018) son manuales prácticos basados en décadas de experiencia. Si quieres leer más profundamente, Adams and Horton (1975) es la historia de la Highlander Folk School, cuyo enfoque ha sido emulado por muchos grupos exitosos, mientras que Spalding (2014) es una guía para enseñar a personas adultas escrita por alguien con profundas raíces personales en la organización de grupos de base y [NonprofitReady.org][non-profit-ready] ofrece capacitación profesional gratuita."
  },
  {
    "objectID": "community.html#sec-community-four-steps",
    "href": "community.html#sec-community-four-steps",
    "title": "14  Construyendo una comunidad de práctica",
    "section": "14.2 Cuatro pasos",
    "text": "14.2 Cuatro pasos\nTodas las personas que se involucren con tu organización (incluyéndote) pasan por cuatro fases: reclutamiento, incorporación, retención y retiro. No necesitas preocuparte por este ciclo cuando estés gestando una comunidad, pero sí cuando llegues al punto en que se involucren más de un puñado de personas no fundadoras.\nEl primer paso es reclutar voluntarias/os. Tu estrategia de marketing debería ayudarte con esto, al garantizar que tu organización sea localizable y al lograr que la misión y valor sean claros para las personas que quieran involucrarse (Chapter 16). Comparte historias que ejemplifiquen el tipo de ayuda que buscas así como historias sobre las personas a las que estás ayudando, y deja en claro que hay muchas maneras de involucrarse (discutiremos esto con más detalle en la siguiente sección).\nLa mejor fuente de potenciales reclutas son tus propias clases: el método “verlo, practicarlo, enseñarlo” ha funcionado bien para organizaciones voluntarias desde que las organizaciones voluntarias existen. Asegúrate de que cada clase u otro tipo de encuentro termine informando a las personas cómo pueden ayudar y que su ayuda será bienvenida. De esta manera, las personas que se acerquen a ti sabrán lo que haces y habrán tenido la experiencia reciente de ser receptores de lo que ofreces, lo que contribuye a que tu organización evite el punto ciego de la persona experta a nivel de la comunidad (Chapter 4).\n\n14.2.1 Empieza pequeño\nPedirle a una persona que haga algo pequeño por ti es un buen paso para lograr que haga algo más grande. Esto se basa en el [efecto Ben Franklin][ben-franklin-effect]: quien ya le ha hecho un favor a alguien es más propensa/o a hacerle otro favor a la misma persona, (en comparación con la disposisión que tiene quien ha recibido un favor). En el marco de una comunidad de enseñanza, puedes solicitar correcciones de redacción o de errores ortográficos en los materiales de tus lecciones, o sugerencias de nuevos ejercicios o ejemplos. Escribir tus materiales de una manera mantenible (Section 7.3), le da a tu comunidad la oportunidad de practicar algunas habilidades útiles y te permite a ti comenzar una conversación que podría conducir a sumar una nueva persona.\n\nLa mitad del ciclo de vida de una persona voluntaria es la incorporación y la retención, que cubriremos en Section 14.3&gt; y Section 14.4&gt;. El último paso es cuando alguien deja de ser parte de la organización: eventualmente, el resto de las personas siguen adelante, y las organizaciones saludables se preparan para ese momento. Algunas cosas simples pueden generar una sensación positiva ante el cambio, tanto para la persona que se va como para todas las que se quedan:\n\nPide a las personas ser explícitas sobre su partida\n\npara que el resto sepa que realmente se han ido.\n\nAsegúrate de que no se sientan con vergüenza por irse\n\no por cualquier otro motivo.\n\nDales la oportunidad de transmitir sus conocimientos.\n\nPor ejemplo, puedes pedirles que asesoren a alguien durante algunas semanas como su última contribución, o que sean entrevistadas/os por alguien que se queda en la organización para recopilar cualquier historia que valga la pena volver a contar.\n\nAsegúrate de que entreguen las llaves.\n\nEs incómodo descubrir, seis meses después de que alguien se fue, que esa era la única persona que sabía cómo reservar un lugar para el picnic anual.\n\nHaz un seguimiento 2 a 3 meses después de que se vayan\n\npara ver si tienen más ideas sobre lo que funcionó y lo que no funcionó mientras estuvieron contigo, o algún consejo para ofrecer que tampoco pensaron dar o que se sentían incómodas/os de dar mientras se iban.\n\nAgradéceles,\n\ntanto cuando se van como la próxima vez que tu grupo se reúna.\n\n\n\n14.2.2 El manual que falta\nSe han escrito miles de libros sobre cómo iniciar una empresa. Solo unos pocos describen cómo cerrar una o cómo dejarla sin problemas, a pesar de que existe un final para cada comienzo. Si alguna vez escribes uno, por favor házmelo saber."
  },
  {
    "objectID": "community.html#sec-community-onboarding",
    "href": "community.html#sec-community-onboarding",
    "title": "14  Construyendo una comunidad de práctica",
    "section": "14.3 Incorporación",
    "text": "14.3 Incorporación\nDespués de decidir formar parte de un grupo, la gente necesita ponerse al día, y Sholler et al. (2019) resume lo que sabemos al respecto. La primera regla es tener y hacer cumplir un código de conducta (Section 10.1) y encontrar alguien independiente a tu comunidad que acepte recibir y revisar informes de comportamiento inapropiado. Alguien fuera de la organización tendrá la objetividad de la que las/los integrantes pueden carecer. Además, una persona externa puede proteger a quienes dudan si denunciar incidentes relacionados a las personas a cargo de proyectos por temor a represalias o daños a su reputación. El equipo que lidera el proyecto debe hacer públicas las decisiones donde se aplique el código de conducta para que la comunidad reconozca que realmente se toma en serio, que se aplica y se le da relevancia.\nLa siguiente regla más importante es ser amigable. Como dijo Fogel Fogel (2005), “Si un proyecto no hace una buena primera impresión, quienes recién llegan van a esperar mucho tiempo antes de darle una segunda oportunidad.” Otras investigaciones han confirmado empíricamente la importancia de entornos sociales, amables y educados en proyectos abiertos Singh (2012),Steinmacher et al. (2013),Steinmacher et al. (2018):\n\nPublica un mensaje de bienvenida\n\nen las páginas de redes sociales, canales de comunicación de tu comunidad, foros o listas de correo electrónico del proyecto. Los proyectos podrían considerar mantener un canal o lista de “Bienvenida”, donde alguna de las personas que lideran el proyecto o gestiona la comunidad escribe una breve publicación pidiendo que quienes recién llegan se presenten.\n\nAyuda a las personas a hacer una contribución inicial,\n\npor ejemplo, puedes etiquetar lecciones particulares o talleres que necesitan trabajo como “adecuados para las personas recién llegadas” y pedir a miembros ya establecidos que no las arreglen. De esta forma se aseguran lugares adecuados para que las personas recién llegadas comiencen a trabajar.\n\nDirige a las personas recién llegadas hacia miembros similares a ellas\n\npara demostrarles que pertenecen a tu comunidad.\n\nComparte los recursos esenciales del proyecto con las personas recién llegadas,\n\ntal como las normas y pautas para contribuir.\n\nDesigna una o dos personas del proyecto como contacto\n\npara cada persona nueva. Esto puede hacer que quienes recién llegan sean menos reticentes a formular preguntas.\n\n\nUna tercera regla que ayuda a todas las personas (no solo a quienes recién llegan) es hacer que el conocimiento esté actualizado y a disposición. Las personas nuevas son como exploradoras/es que deben orientarse dentro de un paisaje desconocido Dagenais et al. (2010). La información dispersa hace que las nuevas personas se sientan perdidas y desorientadas. Considerando las diferentes opciones de lugares para mantener información, (por ejemplo, wikis, archivos en un repositorio con control de versiones, documentos compartidos, tweets antiguos, mensajes en un chat grupal o archivos de correo electrónico) es importante mantener la información sobre un tema específico consolidada en un único lugar, de modo que las personas nuevas no naveguen por múltiples fuentes de datos para encontrar lo que necesitan. Organizar la información hace que las personas recién llegadas tengan más confianza y mejor orientación Steinmacher et al. (2016).\nFinalmente, reconoce las primeras contribuciones de quienes recién comienzan y piensa dónde y cómo podrían ayudar a largo plazo. Una vez realizada su primera contribución, es probable que tengan una mejor idea de lo que pueden ofrecer y cómo el proyecto puede ayudarles. Ayuda a las personas nuevas a encontrar el siguiente problema en el que tal vez quieran trabajar o guiales hacia el siguiente tema que podrían disfrutar leyendo. En particular, animarles a ayudar a la próxima ola de nuevas personas es una buena manera de reconocer lo que han aprendido y una forma efectiva de transmitirlo."
  },
  {
    "objectID": "community.html#sec-community-retention",
    "href": "community.html#sec-community-retention",
    "title": "14  Construyendo una comunidad de práctica",
    "section": "14.4 Retención",
    "text": "14.4 Retención\n\nSi tu gente no la está pasando bien, algo está muy mal. — Saul Alinsky\n\nQuienes participan de la comunidad no deberían esperar disfrutar cada momento de su trabajo con tu organización, pero si no disfrutan ninguno no se quedarán. Disfrutar no significa necesariamente tener una fiesta anual: la gente puede disfrutar cocinar, entrenar a otras personas o simplemente trabajar en silencio junto al resto del grupo. Hay varias cosas que toda organización debe hacer para garantizar que las personas tengan algo que valoran de su trabajo:\n\nPregunta a las personas qué quieren en vez de adivinar.\n\nAsí como no eres tus estudiantes (Section 7.1), probablemente seas diferente a otras personas de tu organización. Pregunta a las personas qué quieren hacer, qué se sienten cómodas haciendo (que puede no ser lo mismo), y qué limitaciones de tiempo tienen. Pueden decir: “Cualquier cosa”, pero incluso una breve conversación probablemente ayude a descubrir que les gusta interactuar con las personas pero preferirían no administrar las finanzas del grupo, o viceversa.\n\nProporciona muchas formas de contribuir.\n\nCuantas más formas haya para que las personas ayuden, más gente podrá hacerlo. Alguien a quien no le gusta estar frente a público puede mantener el sitio web de su organización, manejar sus cuentas o corregir las lecciones.\n\nReconoce las contribuciones.\n\nA todas/os nos gusta que nos aprecien, así que las comunidades deben reconocer las contribuciones de sus miembros, tanto en público como en privado, mencionándolas/os en presentaciones, poniéndolas en el sitio web, etc. Cada hora que alguien le haya dado a tu proyecto puede ser una hora restada de su vida personal o de su empleo oficial; reconoce ese hecho y deja en claro que, si bien más horas serían bienvenidas, no esperas que hagan sacrificios insostenibles.\n\nHaz espacio.\n\nCrees que estás siendo útil, pero intervenir en cada decisión priva de autonomía a las demás personas, lo que reduce su motivación (Chapter 11). En particular, si siempre eres quien responde primero a correos electrónicos o mensajes de chat, las personas tienen menos oportunidades de crecer como miembros y crear colaboraciones horizontales. Como resultado, la comunidad continuará centrada en una o dos personas en lugar de convertirse en una red altamente conectada en la que otras/os se sientan cómodas/os participando.\n\n\nOtra forma de recompensar la participación es ofrecer capacitación. Las organizaciones necesitan presupuestos, propuestas de subsidios y resolución de disputas. A la mayoría de las personas no se les enseña cómo hacer estas tareas más de lo que se les enseña a enseñar, así que la oportunidad de adquirir habilidades transferibles es una razón poderosa para que las personas se involucren y se mantengan involucradas. Si vas a hacer esto, no intentes proporcionar la capacitación por tu cuenta a menos que sea en lo que te especializas. Muchos grupos cívicos y comunitarios tienen programas de este tipo y probablemente puedas llegar a un acuerdo con alguno de ellos.\nFinalmente, si bien las personas voluntarias pueden hacer mucho, tareas como la administración del sistema y la contabilidad eventualmente necesitan personal remunerado. Cuando llegues a este punto, o no pagas nada o pagas un salario adecuado. Si no les paga nada, su verdadera recompensa es la satisfacción de hacer el bien; por otro lado, si les pagas una cantidad simbólica, le quitas esa satisfacción sin darles la posibilidad de ganarse la vida."
  },
  {
    "objectID": "community.html#sec-community-governance",
    "href": "community.html#sec-community-governance",
    "title": "14  Construyendo una comunidad de práctica",
    "section": "14.5 Gobernanza",
    "text": "14.5 Gobernanza\nCada organización tiene una estructura de poder: la única pregunta es si es formal y deriva en responsabilidades, o informal y, por lo tanto, no hay responsabilidades explícitas Freeman (1972). La estructura informal funciona bastante bien para grupos de hasta media docena de personas en los que todas las personas se conocen. Si el grupo es más grande, necesitas reglas para explicar quién tiene la autoridad para tomar qué decisiones y cómo lograr consensos (Section 23.2).\nEl modelo de gobernanza que prefiero es del tipo cooperativo, conocido como commons en inglés. La gobernanza cooperativa es una manera de gestión conjunta realizada por una comunidad de acuerdo a las reglas que ella misma ha desarrollado y adoptado Ostrom (2015). Como subraya Bollier (2014), las tres partes de esta definición son esenciales: la gobernanza es cooperativa no solo porque hay un bien compartido, como una propiedad o un conjunto de bibliotecas de software, sino que también se incluye a la comunidad que comparte estos recursos y a las reglas que usan para hacerlo.\nLos modelos más populares son los de corporaciones con fines de lucro y los de organizaciones sin fines de lucro (aunque no todos son necesariamente de gobernanza cooperativa). La mecánica varía de una jurisdicción a otra, por lo que debes buscar asesoramiento antes de elegir Este es uno de los momentos en que vale la pena tener vínculos con el gobierno local u otras organizaciones afines.. Ambos tipos de organización otorgan la máxima autoridad a su directorio. En términos generales, se trata de un directorio de servicio con miembros que también asumen otras funciones en la organización o un directorio de gobernanza o simplemente directorio cuya responsabilidad principal es contratar, supervisar y, si es necesario, despedir a quien dirige la organización. Las/los integrantes del directorio pueden ser elegidos por la comunidad o nombrados; en cualquier caso, es importante priorizar la capacidad sobre la pasión (la última es más importante para las bases) y tratar de reclutar habilidades particulares como contabilidad, marketing, etc.\n\n14.5.1 Elige la democracia\nCuando llegue el momento, haz de tu organización una democracia: tarde o temprano (generalmente más temprano que tarde), cada directorio o junta designada se convierte en una sociedad de mutuo acuerdo. Darle poder a tus miembros es complicado, pero es la única forma inventada hasta ahora para garantizar que las organizaciones continúen satisfaciendo las necesidades reales de las personas."
  },
  {
    "objectID": "community.html#sec-community-care",
    "href": "community.html#sec-community-care",
    "title": "14  Construyendo una comunidad de práctica",
    "section": "14.6 Cuidarte y cuidar a tu comunidad",
    "text": "14.6 Cuidarte y cuidar a tu comunidad\nEl síndrome de desgaste ocupacional (burnout en inglés) es un riesgo crónico en cualquier actividad comunitaria Pigni (2016), así que aprende a decir no más seguido de lo que dices sí. Si no te cuidas, no podrás cuidar a tu comunidad.\n\n14.6.1 Quedándose sin “No”\nInvestigaciones en la década de 1990 parecían mostrar que nuestra capacidad de ejercer fuerza de voluntad es finita: si tenemos que resistirnos a comer el último bombón de la caja cuando tenemos hambre, somos menos propensas/os a doblar la ropa, y viceversa. Este fenómeno se llama agotamiento del ego y si bien estudios recientes no han podido replicar esos primeros resultados Hagger et al. (2016), decir “sí” cuando estamos demasiado cansados para decir “no” es una trampa en la que caen muchos organizadores.\n\nUna forma de asegurarte de cumplir con tu “no” es escribir una lista de no-tareas, en la que anotes cosas que vale la pena hacer pero que no vas a hacer. Al momento de escribir este libro, mi lista incluye cuatro libros, dos proyectos de software, el rediseño de mi sitio web personal y aprender a tocar la flauta irlandesa.\nFinalmente, recuerda de vez en cuando que eventualmente toda organización necesita ideas frescas y nuevo liderazgo. Cuando llegue ese momento, entrena a tus sucesoras/es y sigue adelante con la mayor gracia posible. Indudablemente tomarán decisiones que tú no harías, pero pocas cosas en la vida son tan satisfactorias como ver que algo que ayudaste a construir cobra vida propia. Celebra eso — no tendrás ningún problema para encontrar otra actividad que te mantenga ocupada/o."
  },
  {
    "objectID": "community.html#sec-community-funding",
    "href": "community.html#sec-community-funding",
    "title": "14  Construyendo una comunidad de práctica",
    "section": "14.7 Financiamiento para una comunidad",
    "text": "14.7 Financiamiento para una comunidad\nLa estrategia puede cambiar en el caso que tengas la responsabilidad de conseguir el financiamiento para una organización que tiene un grupo de docentes. La forma más directa es cobrar a tus estudiantes una inscripción por ser parte de tus capacitaciones. (citar porqué está bueno cobrar de todas maneras, por el tema de la cantidad de gente que luego no se presenta al curso) En esta sección del capítulo presentamos algunos modelos alternativos utilizados por comunidades de práctica que se dedican a enseñar.\nModelo The Carpentries\nThe Carpentries enseña conocimientos básicos de codificación y ciencia de datos a cientificos/as de todo el mundo. La organización es un proyecto patrocinado fiscalmente por Community Initiatives, una organización registrada como 501(c)3 sin ánimo de lucro con sede en California, Estados Unidos.\nLa organización tiene un esquema de organizaciones miembros y patrocinadores sumado a una activa recaudación de fondos y campañas de donación.\n\nUna Organización Miembro es una organización que se ha comprometido con el crecimiento y la difusión de la organización. Estas instituciones miembro reciben acceso prioritario a la formación de instructores/as y a la orientación para el desarrollo de capacidades en su organización. Con instructores/as locales, las organizaciones miembros pueden organizar fácilmente talleres locales de bajo coste. Además, los/as instructores/as locales reciben apoyo, tutoría y un foro para el desarrollo de lecciones comunitarias por medio de la comunidad global. Las membresías también proporcionan a The Carpentries ingresos para garantizar el desarrollo y el mantenimiento continuos de las lecciones que demandan las comunidades de investigación. Actualmente el programa tiene diferentes niveles de patrocinio que cambia el monto a aportar y este monto se ajusta de acuerdo al país de orígen de la institución que quiere ser miembro.\nEl programa de patrocinio tiene como objetivo ayudar a la organización a asociarse con organizaciones afines que quieran contribuir financieramente para ayudar en los esfuerzos para hacer que las habilidades de codificación y datos sean equitativas a nivel mundial y ampliar nuestras operaciones para satisfacer mejor las necesidades la comunidad.\nExisten diversas oportunidades de financiamiento por medio de subisidios ofrecidos por fundaciones, agencias y asociaciones. La organización se presenta a estos llamados de subsidios que le permiten mantener sus actividades.\n\nLas personas que enseñan lo hacen de forma voluntaria, al igual que quienes desarrollan y mantienen las lecciones. Hay un staff que es empleado de la organización y quienes tienen su trabajo rentado.\nModelo MetaDocencia\nMetaDocencia es una organización sin fines de lucro que nutre una comunidad docente hispanohablante enseñando métodos educativos concretos, basados en evidencia y centrados en tus estudiantes. Desarrolla colaborativamente recursos abiertos, reutilizables y accesibles para fomentar prácticas de enseñanza eficaces.\nEn sus inicios todas las actividades fueron voultarias y sus servicios gratuitos. Dentro de los objetivos siempre estuvo la intención de no cobrar a los estudiantes por los cursos.\nPara poder afrontar los costos de llevar adelante la organización y poder pagar alguna de las actividades de los voluntarios, MetaDocencia también aplicó a llamados de subsidios, los cuales consiguó y le permiten cubrir los costos de funcionamiento y pagar algunas de las actividades de los docentes y generadores de contenido. Por conseguir estos financiamientos hoy es un proyecto patrocinado fiscalmente por Code for Science and Society.\nEsto abrió la posibilidad de recibir donaciones.\nModelo Mumuki\nEn este caso los clientes son las instituciones que quieren capacitar a sus empleados. Estas organizaciones pagan el costo de los cursos, no las personas que toman la capacitación.\nTienen un programa de tutores que son rentados y un esquema de enseñanza asincronica online.\n\n\nAgregar como conceptos que es un fiscal sponsor, que es un project leader, que es la gobernanza y hacer refencias a las diferentes secciones o capítulos correspondientes.\n\n\n\n\nVer sección 14.1, 14.2 y 14.3 pueden aportar algo a esto."
  },
  {
    "objectID": "community.html#sec-community-exercises",
    "href": "community.html#sec-community-exercises",
    "title": "14  Construyendo una comunidad de práctica",
    "section": "14.8 Ejercicios",
    "text": "14.8 Ejercicios\nVarios de estos ejercicios se toman de Brown (2007).\n\n14.8.1 ¿Qué tipo de comunidad? (individual/15’)\nVuelve a leer la descripción de los cuatro tipos de comunidades y decide con cuál o cuáles se identifican o a cuales aspiran.\n\n\n14.8.2 Personas que puedes conocer (grupos pequeños/30’)\nAl organizar una comunidad, parte de tu trabajo es ayudar a las personas a encontrar una manera de contribuir a pesar de sí mismas. En grupos pequeños, elige tres de las personas descriptas a continuación y discute cómo les ayudarías a convertirse en mejores colaboradoras/es para tu organización.\n\nAna\n\nsabe más sobre cada tema que todas las demás personas juntas — al menos, ella cree que lo hace. No importa lo que digas, ella te corregirá; no importa lo que sepas, ella lo sabe mejor.\n\nCatalina\n\ntiene tan poca confianza en su propia habilidad que no tomará ninguna decisión, sin importar qué tan pequeña sea, hasta haber consultado con alguien más.\n\nFernando\n\ndisfruta de saber cosas que otras personas no saben. Puede hacer milagros, pero cuando se le pregunta cómo lo hizo, sonreirá y dirá: “Oh, estoy seguro de que puedes resolverlo”.\n\nAndrea\n\nes tranquila. Nunca habla en las reuniones, incluso cuando sabe que otras personas están equivocadas. Podría contribuir a la lista de correo, pero es muy sensible a las críticas y siempre retrocede en lugar de defender su punto.\n\nCristian\n\naprovecha el hecho de que la mayoría de las personas preferirían hacer su parte del trabajo antes que quejarse de él. Lo frustrante es que él es muy convincente cuando alguien finalmente lo confronta. “Todas las partes han cometido errores,” dice él, o “Bueno, creo que estás siendo un poco quisquillosa/o.”.\n\nMelisa\n\ntiene buenas intenciones pero, por alguna razón, siempre surge algo y termina sus tareas a último momento. Por supuesto, eso significa que quienes dependen de ella no pueden hacer su trabajo hasta después de ese último momento …\n\nJuan José\n\nes grosero. “Esa es la forma en que hablo”, dice. “Si no puedes solucionarlo, ve a buscar otro equipo”. Su frase favorita es: “Eso es estúpido” y dice una obscenidad cada segunda oración.\n\n\n\n\n14.8.3 Valores (grupos pequeños/45’)\nResponde estas preguntas por tu cuenta y luego compara tus respuestas con las del resto del grupo.\n\n¿Cuáles son los valores que expresa tu organización?\n¿Son estos los valores que deseas que la organización exprese?\nSi tu respuesta es no, ¿qué valores te gustaría expresar?\n¿Cuáles son los comportamientos específicos que demuestran esos valores?\n¿Qué comportamientos demostrarían lo contrario de esos valores?\n\n\n\n14.8.4 Procedimientos para reuniones (grupos pequeños/30’)\nResponde estas preguntas por tu cuenta y luego compara tus respuestas con las del resto del grupo.\n\n¿Cómo se manejan las reuniones?\n¿Es así como quieres que se realicen tus reuniones?\n¿Las reglas para conducir reuniones son explícitas o simplemente se asumen?\n¿Estas son las reglas que quieres tener?\n¿Quién tiene derecho a votar o tomar decisiones?\n¿Son estas las personas a quienes quisieras otorgar autoridad para tomar decisiones?\n¿Utilizan la regla de la mayoría, toman decisiones por consenso o usan otro mecanismo?\n¿Es así como quieres tomar decisiones?\n¿Cómo se enteran las personas en una reunión que se ha tomado una decisión?\n¿Cómo saben las personas que no estuvieron en una reunión qué decisiones se tomaron?\n¿Funciona esto para tu grupo?\n\n\n\n14.8.5 Tamaño (grupos pequeños/20’)\nResponde estas preguntas por tu cuenta y luego compara tus respuestas con las del resto del grupo.\n\n¿Qué tan grande es tu grupo?\n¿Es este el tamaño que deseas para su organización?\nSi tu respuesta es no, ¿de qué tamaño te gustaría que fuera?\n¿Tienes algún límite en cuanto a la cantidad de miembros?\n¿Te beneficiarías de establecer ese límite?\n\n\n\n14.8.6 Convertirse en miembro (grupos pequeños/45)\nResponde estas preguntas por tu cuenta y luego compara tus respuestas con las del resto del grupo.\n\n¿Cómo se incorpora alguien a tu grupo?\n¿Qué tan bien funciona este proceso?\n¿Hay cuotas de membresía?\n¿Se requiere que las personas estén de acuerdo con alguna regla de comportamiento al unirse?\n¿Son estas las reglas de comportamiento que quieres?\n¿Cómo descubren las personas recién llegadas lo que hay que hacer?\n¿Qué tan bien funciona este proceso?\n\n\n\n14.8.7 Contrataciones (grupos pequeños/30’)\nResponde estas preguntas por tu cuenta y luego compara tus respuestas con las del resto del grupo.\n\n¿Tienes personal asalariado en tu organización o son todas/os voluntarias/os?\n¿Deberías tener personal asalariado?\n¿Quieres / necesitas más o menos personal?\n¿Qué hace cada integrante de tu personal? ¿A qué se dedica?\n¿Son estos los roles y funciones principales que necesitas que el personal desempeñe?\n¿Quién supervisa a tu personal?\n¿Es este el proceso de supervisión que quieres para tu grupo?\n¿Cuánto le pagan a tu personal?\n¿Es este el salario adecuado para realizar el trabajo necesario?\n\n\n\n14.8.8 Dinero (grupos pequeños/30’)\nResponde estas preguntas por tu cuenta y luego compara tus respuestas con las del resto del grupo.\n\n¿Quién paga qué?\n¿Esa es la persona que quisieras que pague?\n¿De dónde consiguen el dinero?\n¿Es así como quieres conseguirlo?\nSi no, ¿tienes algún plan para conseguirlo de otra manera?\nSi es así, ¿cuáles son esos planes?\n¿Quién da seguimiento a estos planes para asegurarse de que sucedan?\n¿Cuánto dinero tienen?\n¿Cuánto dinero necesitan?\n¿En qué gastan la mayor parte del dinero?\n¿Es así como quieres gastar el dinero?\n\n\n\n14.8.9 Tomando ideas prestadas (toda la clase/15’)\nMuchas de mis ideas sobre cómo construir una comunidad han sido moldeadas por mi experiencia en el desarrollo de software de código abierto. Fogel (2005) (que está [disponible en línea][producing-oss]) es una buena guía de lo que ha funcionado y lo que no ha funcionado para esas comunidades, y el [sitio de Guías de Código Abierto][opensource-guide-es] también tiene una gran cantidad de información útil. Elige una sección de este último recurso, puede ser “Encontrando Usuarios para Tu Proyecto”, o “Liderazgo y Gobierno” y presenta al grupo, en dos minutos, una idea que encontraste útil o una con la que estuviste muy en desacuerdo.\n\n\n14.8.10 ¿Quién eres tú? (grupos pequeños/20’)\nLa Administración Nacional Oceánica y Atmosférica estadounidense (NOAA por sus siglas en inglés) tiene una guía breve, útil y divertida para [lidiar con comportamientos disruptivos][noaa-disruptive]. La guía clasifica esos comportamientos bajo etiquetas como “habladora/hablador”, “indecisa/o” y “tímida/o” y describe estrategias para manejar cada uno. En grupos de 3 a 6 personas, lean la guía (está disponible solo en inglés) y decidan cuál de las descripciones les queda mejor. ¿Crees que las estrategias descriptas para manejar personas como tú son efectivas? ¿Son otras estrategias igualmente efectivas o más?\n\n\n14.8.11 Creando lecciones en comunidad (grupos pequeños/30’)\nUna de las claves del éxito de [Carpentries][carpentries] es su énfasis en construir y mantener lecciones en forma colaborativa Wilson (2016), Devenyi et al. (2018). Trabajando en grupos de 3 a 4 personas:\n\nElige una lección breve que todo el grupo haya usado.\nHaz una revisión cuidadosa para crear una única lista con sugerencias de mejoras.\nOfrece esas sugerencias a las/los autoras/es de la lección.\n\n\n\n14.8.12 ¿Estás crujiente? (individual/10’)\n[Johnathan Nightingale escribió][nightingale-comments]:\n\nCuando trabajaba en Mozilla, utilizábamos el término “crujiente” (crispy en inglés) para referirnos al estado justo antes de llegar al síndrome de desgaste ocupacional. Las personas que son crujientes no son divertidas. Son bruscas. Están ansiosas por una pelea que pueden ganar. Lloran sin mucha advertencia. …reconocíamos lo “crujiente” en nuestros colegas y nos cuidábamos mutuamente [pero] es una cosa tan fea, que vimos tanto, que teníamos un proceso cultural completo a su alrededor.\n\nResponde “sí” o “no” a cada una de las siguientes preguntas. ¿Qué tan cerca estás de tener síndrome de desgaste ocupacional?\n\n¿Te has vuelto cínica/o o crítica/o en el trabajo?\n¿Tienes que arrastrarte al trabajo o tienes problemas para comenzar a trabajar?\n¿Te has vuelto irritable o impaciente con tus compañeros de trabajo?\n¿Te resulta difícil concentrarte?\n¿No logras satisfacción con tus logros?\n¿Estás usando comida, drogas o alcohol para sentirte mejor o simplemente no sentir?\n\n\n\n\n\nAdams, Frank, and Myles Horton. 1975. Unearthing Seeds of Fire: The Idea of Highlander. Blair.\n\n\nAlinsky, Saul D. 1989. Rules for Radicals: A Practical Primer for Realistic Radicals. Vintage.\n\n\nBollier, David. 2014. Think Like a Commoner: A Short Introduction to the Life of the Commons. New Society Publishers.\n\n\nBrown, Michael Jacoby. 2007. Building Powerful Community Organizations: A Personal Guide to Creating Groups That Can Solve Problems and Change the World. Long Haul Press.\n\n\nDagenais, Barthélémy, Harold Ossher, Rachel K. E. Bellamy, Martin P. Robillard, and Jacqueline P. de Vries. 2010. “Moving into a New Software Project Landscape.” In 2010 International Conference on Software Engineering (ICSE’10). ACM Press. https://doi.org/10.1145/1806799.1806842.\n\n\nDevenyi, Gabriel A., Rémi Emonet, Rayna M. Harris, Kate L. Hertweck, Damien Irving, Ian Milligan, and Greg Wilson. 2018. “Ten Simple Rules for Collaborative Lesson Development.” PLoS Computational Biology 14 (3). https://doi.org/10.1371/journal.pcbi.1005963.\n\n\nFogel, Karl. 2005. Producing Open Source Software: How to Run a Successful Free Software Project. O’Reilly Media.\n\n\nFreeman, Jo. 1972. “The Tyranny of Structurelessness.” The Second Wave 2 (1).\n\n\nHagger, M. S., N. L. D. Chatzisarantis, H. Alberts, C. O. Anggono, C. Batailler, A. R. Birt, R. Brand, et al. 2016. “A Multilab Preregistered Replication of the Ego-Depletion Effect.” Perspectives on Psychological Science 11 (4): 546–73. https://doi.org/10.1177/1745691616652873.\n\n\nLakey, George. 2018. How We Win: A Guide to Nonviolent Direct Action Campaigning. Melville House.\n\n\nMidwest Academy. 2010. Organizing for Social Change: Midwest Academy Manual for Activists. Fourth. The Forum Press.\n\n\nOstrom, Elinor. 2015. Governing the Commons: The Evolution of Institutions for Collective Action. Cambridge University Press.\n\n\nPigni, Alessandra. 2016. The Idealist’s Survival Kit: 75 Simple Ways to Prevent Burnout. Parallax Press.\n\n\nSahlberg, Pasi. 2015. Finnish Lessons 2.0: What Can the World Learn from Educational Change in Finland? Teachers College Press.\n\n\nSholler, Dan, Igor Steinmacher, Denae Ford, Mara Averick, Mike Hoye, and Greg Wilson. 2019. “Ten Simple Rules for Helping Newcomers Become Contributors to Open Source Projects.” https://github.com/gvwilson/10-newcomers/.\n\n\nSingh, Vandana. 2012. “Newcomer Integration and Learning in Technical Support Communities for Open Source Software.” In 2012 ACM International Conference on Supporting Group Work - GROUP’12. ACM Press. https://doi.org/10.1145/2389176.2389186.\n\n\nSpalding, Dan. 2014. How to Teach Adults: Plan Your Class, Teach Your Students, Change the World. Jossey-Bass.\n\n\nSteinmacher, Igor, Tayana Uchoa Conte, Christoph Treude, and Marco Aurélio Gerosa. 2016. “Overcoming Open Source Project Entry Barriers with a Portal for Newcomers.” In 2016 International Conference on Software Engineering (ICSE’16). ACM Press. https://doi.org/10.1145/2884781.2884806.\n\n\nSteinmacher, Igor, Gustavo Pinto, Igor Scaliante Wiese, and Marco Aurélio Gerosa. 2018. “Almost There: A Study on Quasi-Contributors in Open-Source Software Projects.” In 2018 International Conference on Software Engineering (ICSE’18). ACM Press. https://doi.org/10.1145/3180155.3180208.\n\n\nSteinmacher, Igor, Igor Wiese, Ana Paula Chaves, and Marco Aurelio Gérosa. 2013. “Why Do Newcomers Abandon Open Source Software Projects?” In 2013 International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE’13). Institute of Electrical; Electronics Engineers (IEEE). https://doi.org/10.1109/chase.2013.6614728.\n\n\nWenger-Trayner, Etienne, and Beverly Wenger-Trayner. 2015. “Communities of Practice: A Brief Introduction.” http://wenger-trayner.com/intro-to-cops/.\n\n\nWilkinson, Richard, and Kate Pickett. 2011. The Spirit Level: Why Greater Equality Makes Societies Stronger. Bloomsbury Press.\n\n\nWilson, Greg. 2016. “Software Carpentry: Lessons Learned.” F1000Research, January. https://doi.org/10.12688/f1000research.3-62.v2."
  },
  {
    "objectID": "events.html",
    "href": "events.html",
    "title": "15  Tipos de Eventos",
    "section": "",
    "text": "Segunda edición\n\n\n\nEstás leyendo la segunda edición en progreso y en castellano de Enseñar Tecnología en Comunidad (Teaching Tech Together). Este capítulo es actualmente un mero borrador de ideas, y no recomendamos su lectura.\n\n\nLunch & Learn session. Tell people to invite their friends. They may not realize how powerful their own networks are. When you get people together, you can share what you’re all working on from different departments.\nhosted a monthly R user group with the following agenda:\nIntro (3-5 min): We provide an overview about the guest presenter we will host and their presentation topic (always an internal R user that is doing something neat with R that could benefit our R programming community)\nCompany Data Science Updates (5 min): We discuss data warehouse and system updates that might impact our internal community\nPackage Updates (5-10 min): Here we cover major updates to existing popular packages and we update the audience on new and improved internally developed packages\nGuest Presentation (30-40 min)\nCall for Ideas / Topics to discuss in future meetups (5 min)”\nhosted the following types of meetups:\nTraining that takes several meetings. The most common are 4 weekly meetings. The introduction to R is the one that is most requested. For face-to-face meetings, universities, research institutes and municipalities will often provide locations with computers. For on-line, R-Ladies Global provides a Zoom account.\nMeetup to complete scholarships to participate in conferences. For this one-day event, we got together and helped write or review scholarship applications to attend important conferences like useR! \nMetameetups. These events are organized between several chapters of the same country or that share the same language. They last between 1 to 3 hours. Talks or workshops are presented. This type of event was a huge success with the possibility of doing it online.\nJoint meetup with a conference. We have hosted tutorials, conducted tutorials, or given talks about R and/or R-Ladies during particular conferences. There are also social events such as all R-Ladies eating together.\nMeetup – Your first talk. An event where a safe and friendly space is generated for people to practice and deliver their first talk. The talk lasts between 5 to 10 minutes, after which feedback is provided.\nBook club meeting. Weekly or monthly meetings are held where different books related to R and data science are read and discussed (and if they have exercises they are solved together). The pandemic made it possible to organize these events between several chapters because of the online aspect.\n\n15.0.1 Club de Lectura\nEl objetivo de un club de lectura es leer, discutir, aprender y poner en común experiencias generadas a partir del libro. Este libro se ha usado para club de lecturas online, con encuentros sincrónicos y con hilos de discusión en redes sociales. Algunos pasos a seguir para su organización.\n\nPaso 1. Definir los objetivos del club\n\nLa idea es poder analizar cada capítulo, realizar los ejercicios propuestos y generar nuevos aprendizajes y construcciones en comunidad. Reflexionar sobre nuestra práctica educativa a la luz de lo leído, como por ejemplo reconocer recursos ya utilizados e identificar recursos y estrategias que podemos sumar.\n\nPaso 1. Definir los encuentros (cantidad y duración).\n\nDecidir frecuencia y duración de los encuentros: ¿Cuántos encuentros?, ¿Con qué frecuencia?, ¿Cuál es la duración adecuada para cada encuentro?. Es probable que la respuesta a estas preguntas sea diferente para cada grupo de personas y si los encuentros son en persona u online. En nuestra experiencia un encuentro semanal de una hora permite tener tiempo para preparse, da continuidad y es más sencillo de acomodar en un agenda apretada.\n\nPaso 2. Definir el calendario de temas\n\nEs necesario repartir los capítulos que se verán en cada encuentro: ¿Cuántos capítulos por encuentro?, ¿Leemos también los anexos?. Se pueden agrupar los capítulos y anexos por afinidad temática o bien seguir el orden del libro. Lo importante es tener un calendario predefinido que permita a las personas organizarse. Dos posibles organizaciones:\n\n\n\nUn capítulo por cada encuentro semanal, con la última semana del mes libre para ponerse al día.\n\n*Ocho encuentros en total, semanales. Se agrupan los capítulos y los anexos de esta manera.\n&lt;FIXME: agregar tabla de organziación&gt;\n\nPaso 3. Definir responsabilidades\n\nLa rotación de los roles de liderazgo generan una experiencia más rica. Algunos roles se deben definir antes de iniciar, por ejemplo, organización del club, presentación de un encuentro, moderación de un encuentro. Las personas que participan pueden ir tomando diferentes roles en cada encuentro y quienes tienen más experiencia pueden invitar y apoyar a otras personas a tomar estos roles.\n\nPaso 4: Configurar la infraestrutura\n\nGenerar un sitio web con los detalles sobre cómo se hará, por qué, para quién, la dinámica (sincrónico/asincrónico), en qué plataforma (Twitter, Zoom, Slack, Telegram), cómo registrarse, fechas, horarios y temas de los encuentros. Es recomendable una encuesta de feedback anónima para el final de cada encuentro para poder ir mejorando la experiencia del club. Se debe seleccionar un código de conducta.\n\nPaso 5. Difusión.\n\nHay que anunciar el club de lectura para que más personas se enteren que se realizará.Redes sociales (con un hashtag propio), listas de emails, meetups, Slack/Telegram propio y de comunidades amigas. Si se puede, tener comunicaciones periódicas, contar qué pasó en cada encuentro y compartirlo con la comunidad en general, puede alentar a nuevas personas a sumarse al club.\n\nPaso 6. Guía de participación durante el encuentro.\n\nGenerar un documento compartido (Google Doc/Slides, HackMD) estructurado para cada encuentro con una serie de secciones ?sec-shared-notes . Las posibles secciones: Título y Datos generales, preguntas que guiarán la discusión y la charla (ejercicios para romper el hielo, trabajo en grupo, todos contestan, etc), preguntas generales fijas en todos los encuentros, material interesante y lo que viene. En este documento se seleccionan ejercicios de cada capítulo y se resuelven en grupo.\n\nPaso 7. Llevar adelante los encuentros.\n\nLos responsables inician la plataforma, dan la bienvenida, recuerdan el código de conducta y dirigen la actividad (chat, documento compartido, diapositivas, salas para grupos, etc). Quien presenta repasa los contenidos y gestiona la discusión. Cuando se cumple el tiempo, se comparte la encuesta anónima y los temas del encuentro siguiente. Si son encuentros sincónicos, online, se deja abierto el zoom y la posibilidad de extendernos en el horario, quienes pueden se quedan. En general quienes participaban se quedaban media hora más.\n\nPaso 8. Darle un cierre memorable.\n\nInvitar a autores y/o traductores al encuentro final puede ser un excelente cierre. Si no hablan el mismo idioma contratar a una traductora en vivo permite que cada persona hable en el idioma que se siente más cómoda. Los capítulos de las reglas y porqué enseño se discutieron con la presencia del autor. Se recolectaron opiniones e ideas sobre como mejorar el libro.\n\nPaso 9. Evaluar el club y sistematizar lo aprendido.\n\nLa encuesta de devolución provee material para evaluar (y mejorar) lo realizado. Ir ajustando cada encuentro con las devoluciones permite mejorar el tipo de actividad y de intercambios. Tener diversas formas de participación (hablado, escrito, en el chat, en el documento compartido, en el Slack) genera un ambiente amigable."
  },
  {
    "objectID": "outreach.html#sec-outreach-marketing",
    "href": "outreach.html#sec-outreach-marketing",
    "title": "16  Difusión y vinculación",
    "section": "16.1 Marketing",
    "text": "16.1 Marketing\nLas personas con antecedentes académicos y técnicos a menudo piensan que el marketing se trata de confundir y engañar. En realidad, trata sobre ver cosas desde la perspectiva de otras personas, comprendiendo sus deseos y necesidades, y explicando cómo puedes ayudarlas—en pocas palabras, cómo enseñarles. Este capítulo analizará cómo usar ideas de los capítulos anteriores para hacer que las personas entiendan y apoyen lo que estás haciendo.\nEl primer paso es averiguar qué le ofreces a cada persona, es decir, lo que realmente atrae a voluntarios/as, fondos y otro tipo de apoyo que puedas necesitar para continuar. La respuesta es contra-intuitiva. Por ejemplo, la mayoría de los/las científicos/as creen que los artículos científicos (conocidos como papers) que publican en revistas académicas son sus productos, pero en realidad los productos son los proyectos que presentan a convocatorias de subsidios: son estos proyectos los que atraen el dinero Kuchner (2011). Los artículos científicos son la publicidad que convence a otras personas de financiar esas propuestas, así como los álbumes son los que convencen a la gente de comprar entradas a conciertos y camisetas de bandas musicales.\nImagina que tu grupo ofrece talleres de programación de fin de semana a personas que están reinsertándose a la actividad laboral después de haber estado inactivas por varios años. Si quienes participan del taller pueden pagar lo suficiente para cubrir tus costos, entonces son tus clientes y el taller es tu producto. Si por otro lado, los talleres son gratuitos o tus estudiantes sólo están pagando un monto simbólico para reducir la tasa de ausencias, entonces tu producto real puede ser una mezcla de:\n\ntus propuestas de proyectos para solicitar subsidios;\nlas personas que terminan exitosamente tus talleres a las que las empresas que te patrocinaron les gustaría contratar;\nel resumen de media página de tus talleres que quien gobierna incluye en el balance o resumen anual presentado al concejo deliberante, que muestra cómo apoya al sector tecnológico local; o\nla satisfacción personal que obtienen los/las voluntarios/as cuando enseñan.\n\nAl igual que el diseño de lecciones (Chapter 7), los primeros pasos en marketing son crear las personas tipo de la gente que podría estar interesada en lo que estás haciendo, y averiguar cuáles de sus necesidades puedes cumplir. Una manera de resumir lo último es escribir discursos de presentación dirigidos a diferentes personas tipo. Una plantilla ampliamente utilizada para este objetivo es:\n\n\n\n\n\n\n\nPara\nobjetivo de público\n\n\nquien\ninsatisfacción con lo que está disponible actualmente\n\n\nnuestros/as\ncategoría\n\n\nproveen\nbeneficio clave\n\n\nA diferencia de\nalternativas\n\n\nnuestro programa\ncaracterística distintiva clave.\n\n\n\nEn el ejemplo del taller de fin de semana, podríamos usar este tono para los/las participantes\n\nPara personas que regresan a la actividad laboral después de estar inactivas por varios años quienes tienen todavía responsabilidades familiares, nuestros talleres introductorios de programación proveen clases los fines de semana con guardería incluida. A diferencia de las clases en línea, nuestro programa le da a la gente la oportunidad de conocer a otras personas en la misma etapa de la vida.\n\ny este otro discurso de presentación para quienes toman decisiones en las empresas que podrían patrocinar los talleres:\n\nPara empresas que quieren reclutar desarrolladores/as de software de nivel básico quienes tienen dificultades para encontrar candidatos/as con suficiente madurez en diversas formaciones nuestros talleres introductorios de programación proveen potenciales candidatos/as. A diferencia de una feria de reclutamiento universitario, nuestro programa conecta empresas con una gran variedad de candidatos/as.\n\nSi no sabes por qué diferentes patrocinadores/as potenciales podrían estar interesados/as en lo que haces, pregúntales. Si lo sabes, pregúntales igual: las respuestas pueden cambiar con el tiempo, y puedes descubrir cosas que no habías notado antes.\nEstos discursos de presentación, una vez elaborados, deberían guiar lo que publicas en tu sitio web y en el material de difusión, para ayudar a la gente a descubrir lo más rápido posible si tú y ellos tienen algo de qué hablar. (No deberías copiar los discursos textualmente, porque muchas personas en el área tecnológica han visto esta plantilla tantas veces que perderán el interés si vuelven a leerla.)\nMientras escribes estos discursos, recuerda que hay varias razones para aprender cómo programar (Section 2.3). Una sensación de logro, control sobre sus propias vidas y ser parte de una comunidad puede motivar a las personas más que el dinero (Chapter 11).\nAlgunas personas podrían ofrecerse a enseñar contigo de forma voluntaria porque sus amistades lo están haciendo. Igualmente, una empresa puede decir que está patrocinando clases para estudiantes de secundaria en condiciones económicas desfavorables porque quiere tener un grupo más grande de empleados potenciales en el futuro, aunque quizás quien dirige la empresa lo podría estar haciendo simplemente porque es lo correcto."
  },
  {
    "objectID": "outreach.html#sec-outreach-branding",
    "href": "outreach.html#sec-outreach-branding",
    "title": "16  Difusión y vinculación",
    "section": "16.2 Marcas y posicionamiento",
    "text": "16.2 Marcas y posicionamiento\nUna marca es la primera reacción de una persona a la mención de un producto; si la reacción es “¿Qué es eso?”, todavía no tienes una marca. La marca es importante porque la gente no va a ayudar a algo que no conoce o no le importa.\nLa mayor parte de la discusión actual sobre las marcas se enfoca en cómo crear reconocimiento en línea. Las listas de correo, los blogs y Twitter te dan maneras de llegar a la gente, pero a medida que aumenta el volumen de desinformación, la gente presta menos atención a cada interrupción individual.\nEsto hace que el posicionamiento sea cada vez más importante. A veces llamado “diferenciación”, es lo que distingue tu oferta de las otras: la sección “a diferencia de” de tu discurso de presentación. Cuando te comunicas con personas que están familiarizadas con tu campo, debes enfatizar el posicionamiento, ya que es eso lo que llamará su atención.\nHay otras cosas que puedes hacer para ayudar a construir tu marca. Una de ellas es usar ejemplos de éxito, como un robot que una de tus estudiantes hizo a partir de piezas que encontró en su casa Schwarz (2013) o el sitio web que otro estudiante hizo para el geriátrico sus padres.\nOtra opción es hacer un video corto—no más de unos pocos minutos de duración— que resalte los antecedentes y logros de tus estudiantes. El objetivo de los ítems anteriores es contar una historia: mientras que la gente siempre pide datos, lo que creen y recuerdan son las historias.\n\n16.2.1 Mitos fundacionales\nUna de las historias más convincentes que una persona o grupo puede contar es por qué y cómo comenzaron. ¿Estás enseñando algo que desearías que alguien te hubiera enseñado pero no lo hizo? ¿Había una persona en particular a la que querías ayudar y eso abrió las puertas?\nSi no hay una sección en tu sitio web que comience con “Había una vez”, piensa en agregar una.\n\nUn paso crucial es lograr que tu organización sea encontrada en las búsquedas en internet. DiSalvo, Reid, and Roshan (2014) descubrió que las clases de computación fuera de la escuela no eran encontradas con los términos de búsqueda que los padres y las madres utilizaban. Otros tipos de clases u organizaciones se enfrentan a desafíos similares. Hay mucho mito sobre técnicas para hacer que las cosas puedan ser encontradas en internet (lo que a veces se refiere como motor de optimización de posicionamiento en buscadores o SEO por su sigla en inglés (“Search Engine Optimization”)). Dado el poder casi-monopólico y la falta de transparencia de Google, la mayor parte de estas estrategias se reduce a estar un paso por delante de los algoritmos diseñados para prevenir a las personas sobre rankings manipulados, sesgados o poco realistas.\nA menos que tengas muy buena financiación, lo mejor que puedes hacer es hacer búsquedas regulares de tu organización y de ti en internet para ver qué encuentras. Con esa información puedes leer [estas guías (en inglés)][page-factors] y hacer lo que esté a tu alcance para mejorar tu sitio. Ten en mente [esta viñeta de XKCD (en inglés)][xkcd-university-websites]: la gente no quiere saber sobre tu organigrama u obtener un recorrido virtual de su sitio—las personas quieren tu dirección, información sobre estacionamiento cerca y alguna idea de lo que enseñas, cuándo lo enseñas y cómo va a cambiar sus vidas.\n\n16.2.2 No todo el mundo vive en línea\nEstos ejemplos asumen que la gente tiene acceso a internet y que los grupos tienen dinero, materiales, tiempo libre y/o habilidades técnicas. La mayoría no tiene estos recursos—de hecho, aquellos que trabajan con grupos económicamente desfavorecidos muy probablemente no los tengan. (Como Rosario Robinson dice, “Gratis funciona para aquellas personas que pueden permitirse lo gratuito.”) Las historias son más importantes que el programa del curso en esas situaciones, porque son más fáciles de volver a contar. Igualmente, si las personas a las que esperas llegar no están en línea tan a menudo como tú, entonces publicar avisos en las carteleras de las escuelas, en bibliotecas locales, en centros de ayuda, y en los mercados y tiendas puede ser la forma más efectiva de llegar a tu público."
  },
  {
    "objectID": "outreach.html#sec-outreach-cold-call",
    "href": "outreach.html#sec-outreach-cold-call",
    "title": "16  Difusión y vinculación",
    "section": "16.3 El arte de la llamada en frío",
    "text": "16.3 El arte de la llamada en frío\nCrear un sitio web y esperar que las personas lo encuentren es fácil; llamar por teléfono o golpear en las puertas de sus casas sin ningún tipo de introducción previa es mucho más difícil. Al igual que ponerse de pie y enseñar, sin embargo, es un oficio que puede aprenderse. Aquí hay diez reglas simples para convencer a las personas:\n\n1: No lo hagas\n\nSi tienes que convencer a alguien de hacer algo, lo más probable es que realmente no quieran hacerlo. Respeta eso: casi siempre es mejor a largo plazo dejar algo en particular sin hacer que usar la culpa o cualquier truco psicológico encubierto que sólo generará resentimiento.\n\n2: Sé amable.\n\nNo sé si existe un libro llamado Trucos secretos de los maestros ninja de ventas, pero si existe, probablemente le dice a sus lectores que hacer algo por un cliente potencial crea un sentido de obligación, lo que a su vez aumenta las probabilidades de una venta. Esto puede funcionar, pero solo funciona una vez y no es una práctica recomendable. Por otro lado, si eres genuinamente amable y ayudas a otras personas porque eso es lo que las buenas personas hacen, sólo podrías inspirarlas a ser buenas personas también.\n\n3: Apela al bien mayor.\n\nSi comienzas hablándole a las personas sobre lo que hay disponible para ellas, les estás señalando que deberían pensar en su interacción contigo como si se tratara de un intercambio comercial que se puede negociar. En cambio, comienza explicando cómo su aporte y ayuda puede hacer del mundo un lugar mejor y dilo en serio. Si lo que estás proponiendo no va a hacer del mundo un lugar mejor, debes mejorar tu propuesta.\n\n4: Comienza por algo pequeño.\n\nLa mayoría de las personas son comprensiblemente reacias a sumergirse de lleno en las cosas, así que debes darles la oportunidad de conocer el terreno y conocerte a ti y a las demás personas involucradas en lo que sea que necesites ayuda. No te sorprendas o decepciones si ahí es donde terminan las cosas: todo el mundo está ocupado o cansado o tiene proyectos propios, o tal vez simplemente tiene un modelo mental diferente de cómo se supone que funcionan las colaboraciones. Recuerda la regla 90-9-1– el 90% va a mirar, el 9% va a hablar y el 1% realmente va a hacer cosas—ajusta tus expectativas de modo acorde.\n\n5: No construyas un proyecto: construye una comunidad.\n\nSolía pertenecer a un equipo de béisbol que nunca jugaba realmente al béisbol: nuestros “juegos” eran sólo una excusa para que estuviéramos juntos y disfrutemos de la compañía de las demás personas. Probablemente no quieras llegar tan lejos, pero compartir una taza de té con alguien o celebrar el cumpleaños de su nieto/a pueden darte cosas que no podrías obtener con ninguna cantidad razonable de dinero.\n\n6: Establece un punto de conexión.\n\n“Estaba hablando con X” o “Nos conocimos en Y” les da contexto, lo que a su vez hace sentir más cómodas a las personas. Esto debe ser específico: quienes envían correo basura y quienes hacen llamadas en frío nos han entrenado para ignorar cualquier cosa que comience con la frase “Hace poco tiempo encontré tu sitio web …”\n\n7: Sé específico/a sobre lo que estás pidiendo.\n\nEste detalle es necesario para que las personas puedan determinar si el tiempo y las habilidades que tienen coinciden con lo que necesitas. Ser realista desde el principio también es una señal de respeto: si le dices a alguien que necesitas una mano para mover algunas cajas cuando en realidad estás mudando una casa entera, probablemente no te ayudarán por segunda vez.\n\n8: Establece tu credibilidad.\n\nMenciona a quienes te patrocinan, tu tamaño, cuánto tiempo hace que existe tu grupo o algo que hayas logrado en el pasado para que las personas crean que vale la pena tomarte en serio.\n\n9: Crea una ligera sensación de urgencia.\n\n“Esperamos lanzar esto en primavera” es mucho más probable que genere una respuesta positiva que “Con el tiempo queremos lanzar esto.” Sin embargo la palabra “ligera” es importante: si tu pedido es urgente, la mayoría de las personas pueden asumir que eres una persona desorganizada o que algo ha salido mal y por lo tanto pueden pecar de prudencia.\n\n10: Entiende la indirecta.\n\nSi la primera persona a la que le pides ayuda dice no, pregúntale a otra. Si la quinta o décima persona dice no, pregúntate si lo que estás tratando de hacer tiene sentido y vale la pena hacerlo.\n\n\nLa siguiente plantilla de correo electrónico sigue todas estas reglas. Ha funcionado bastante bien: descubrimos que alrededor de la mitad de los correos fueron respondidos, en aproximadamente la mitad de estas respuestas querían conocer más, y la mitad de estos últimos contactos condujeron a talleres, lo que significa que entre el 10 y 15% de las cuentas de correo a las que nos dirigimos resultaron en talleres. Esto puede ser bastante desmoralizador si no estás acostumbrado/a, pero es mucho mejor que la tasa de respuesta del 2 a 3% que la mayoría de las organizaciones esperan con llamadas en frío.\n\nHola NOMBRE\nEspero que no te resulte inoportuno recibir este correo, pero quería continuar con nuestra conversación en LUGAR DE REUNIÓN para ver si tendrías interés en que realicemos un taller de entrenamiento para docentes—estamos programando la próxima tanda para las próximas dos semanas.\nEste taller de un día les enseñará a tus voluntarios/as una serie de prácticas de enseñanza útiles y basadas en evidencias. El taller se ha impartido más de cien veces de diversas maneras en los seis continentes para organizaciones sin fines de lucro, bibliotecas y empresas, y todo el material está disponible gratuitamente en línea en http://teachtogether.tech.\nEl temario incluye:\n\nestudiantes tipo\ndiferencias entre diferentes tipos de estudiantes\nuso de evaluaciones formativas para diagnosticar malentendidos\nla enseñanza como un arte performativo\nque motiva y desmotiva a estudiantes adultos/as\nla importancia de la inclusión y como ser un buen aliado/a\n\nSi esto te resulta interesante, por favor avísame—Agradecería la oportunidad de hablar de los modos y por qué medios sería adecuado hacerlo.\nGracias,\nNOMBRE\n\n\n16.3.1 Referencias\nConstruir alianzas con otros grupos que hacen cosas relacionadas a tu trabajo vale la pena por muchas razones. Una de ellas son las referencias: si la persona que se aproxima en busca de tu ayuda podría ser mejor atendida por alguna otra organización, tómate un momento para presentarlos. Si ya has hecho esto varias veces, agrega información a tu sitio web para ayudar a la próxima persona a encontrar lo que necesita. En retribución, las organizaciones a las que estás ayudando pronto empezarán a ayudarte."
  },
  {
    "objectID": "outreach.html#sec-outreach-schools",
    "href": "outreach.html#sec-outreach-schools",
    "title": "16  Difusión y vinculación",
    "section": "16.4 Cambio académico",
    "text": "16.4 Cambio académico\nTodo el mundo tiene miedo a lo desconocido y a pasar vergüenza. En consecuencia, la mayoría de la gente prefiere fracasar que cambiar. Por ejemplo, Lauren Herckis investigó [por qué los/las docentes de nivel universitario no adoptan mejores metodos de enseñanza][faculty-teaching-methods]. Lauren halló que el principal motivo es el miedo a parecer estúpido/a delante de los/las estudiantes; Las otras razones fueron: preocupación de que el cambio de los métodos de enseñanza pudiera afectar las evaluaciones de los cursos de forma negativa (lo cual a su vez podría afectar promociones y cargos) y el deseo de la gente de seguir emulando a los/las docentes que son fuente de inspiración.\nNo tiene sentido discutir si estas cuestiones son “reales” o no: los/las docentes creen que son reales, por lo que cualquier plan para trabajar con el personal docente de las universidades necesita tenerlas en cuenta Así como la prevalencia de una mentalidad cerrada entre los/las docentes cuando se trata de enseñanza, es decir, la creencia de que algunas personas son “solo mejores enseñando” .\nBarker, Hovey, and Gruning (2015) realizaron un estudio de dos etapas sobre cómo quienes son docentes de ciencias de la computación adoptan nuevas prácticas de enseñanza, ya sea individualmente, como organización o en la sociedad en su conjunto. En este estudio se preguntaron y respondieron tres asuntos claves:\n\n¿Cómo se enteran de nuevas prácticas de enseñanza?\n\nBuscan intencionalmente nuevas prácticas porque su motivación es resolver un problema (en particular, la participación de sus estudiantes), son conscientes de las nuevas prácticas a través de iniciativas deliberadas por parte de sus instituciones, las replican de colegas, o las obtienen por interacciones esperadas e inesperadas en conferencias (relacionadas a la enseñanza o de otro tipo).\n\n¿Por qué las prueban?\n\nA veces, debido a los incentivos institucionales (por ejemplo, innovan para mejorar sus chances de promoción), pero a menudo hay tensión en las instituciones de investigación, donde la retórica sobre la importancia de la enseñanza tiene poca credibilidad. Otra razón importante es su propio análisis costo/beneficio: ¿les va a ahorrar tiempo esa innovación? Una tercera razón es que se inspiran en modelos de roles a seguir—otra vez, esto afecta en gran medida a las innovaciones destinadas a mejorar la motivación y participación más que los resultados del aprendizaje. Finalmente, el cuarto factor son fuentes de confianza, por ejemplo, personas que han conocido en congresos o conferencias que se encuentran en la misma situación que ellos/as y han tenido experiencias exitosas al adoptar las nuevas prácticas. Pero los/las docentes tienen preocupaciones que no siempre son abordadas por el grupo de personas que abogan por modificaciones. La primera era la ley de Glass: cualquier nueva herramienta o práctica inicialmente te ralentiza, entonces mientras que las nuevas prácticas pueden hacer la enseñanza más efectiva a largo plazo, no pueden permitirse en el corto plazo. Otra preocupación es que el diseño físico de las aulas dificulta muchas prácticas nuevas: por ejemplo, los grupos de discusión no funcionan bien en asientos de estilo teatro.\n\n\nPero el resultado más revelador fue el siguiente: “A pesar de ser los propios investigadores/as quienes enseñan, la mayor parte de los/las docentes de ciencias de computación con quienes hablamos no creía que los resultados de estudios sobre educación fueran razones creíbles para probar prácticas de enseñanza.” Esto es consistente con otros hallazgos: incluso personas cuyas carreras están dedicadas a la investigación a menudo ignoran investigaciones sobre educación.\n\n¿Por qué las siguen usando?\n\nComo dice Barker, Hovey, and Gruning (2015), “Las devoluciones de los estudiantes son vitales,” y son normalmente la razón más fuerte para continuar usando una práctica, a pesar de que sabemos que las auto-evaluaciones realizadas por estudiantes no se correlacionan fuertemente con los resultados del aprendizaje Stark and Freishtat (2014), Uttl, White, and Gonzalez (2017) (aunque la asistencia a clases sí es un buen indicador del compromiso de los/las estudiantes). Otro motivo para retener una práctica son los requisitos institucionales, pero si esta es la única motivación, las personas abandonarán la práctica cuando el incentivo explícito o el monitoreo desaparezcan.\n\n\nLa buena noticia es que puedes abordar estos problemas sistemáticamente. Bauer et al. (2015) observó la adopción de nuevas técnicas médicas dentro de la Administración de Veteranos de los Estados Unidos. Hallaron que las prácticas médicas basadas en evidencia toman en promedio 17 años en ser incorporadas a las prácticas generales de rutina, y que solo cerca de la mitad de estas prácticas llegan a ser ampliamente adoptadas. Este deprimente hallazgo, junto con otros, ha estimulado el crecimiento de la ciencia de la implementación, que es el estudio de cómo lograr que la gente adopte mejores prácticas.\nComo decía el Chapter 14, el punto de partida es descifrar qué es lo que creen que necesitan las personas que quieres ayudar. Por ejemplo, Yadav et al. (2016) resume las devoluciones de docentes de nivel primario y secundario sobre la preparación y el apoyo que desean. Aunque esto puede no ser aplicable a todos los entornos, tomar una taza de té con unas pocas personas y escucharlas antes de hablar hace un mundo de diferencia en su voluntad de intentar algo nuevo.\nUna vez que sepas lo que la gente necesita, el siguiente paso es hacer cambios de manera incremental, dentro de los propios esquemas de las instituciones. Narayanan et al. (2018) describe un programa intensivo de tres años basado en cohortes muy unidas y apoyo administrativo que triplicó las tasas de graduación, mientras que Hu et al. (2017) describe el impacto de implementar un programa de certificaciones de seis meses para docentes de secundaria que quieren enseñar computación. El número de docentes de computación se ha mantenido estable entre 2007 y 2013, pero se cuadruplicó –sin disminuir la calidad– después de la introducción de un nuevo programa de certificación: los/las docentes que eran personas novatas en computación parecían ser tan eficaces en el curso introductorio como los/las docentes con más entrenamiento o formación informática en la enseñanza.\nEn un sentido más amplio, Borrego and Henderson (2014) presenta categorías para lograr que ocurran cambios en la educación superior. Las categorías están definidas de acuerdo a si el cambio es individual o sistémico y si se prescribe (de arriba hacia abajo) o es un cambio emergente (de abajo hacia arriba). La persona que trata de hacer los cambios (y hacer que duren) tiene un rol distinto en cada una de estas situaciones, y consecuentemente debe seguir diferentes estrategias. El artículo continúa explicando en detalle cada uno de los métodos, mientras que Henderson et al. (2015a), Henderson et al. (2015b) presentan las mismas ideas en una forma más procesable.\nAl llegar a una institución, probablemente en principio caigas en la categoría de cambio individual/emergente, dado que te aproximas a cada docente uno a uno y tratarás de lograr que los cambios ocurran de abajo hacia arriba. Si este es el caso, las estrategias que recomiendan Borrego y Henderson se enfocan en que los/las docentes reflexionen sobre sus prácticas de enseñanza de manera individual o en grupos. Haz programación en vivo para mostrarles lo que haces o los ejemplos que usas, luego haz que tus estudiantes programen en vivo en turnos para mostrar cómo usarían esas ideas y técnicas en su desempeño así les darás a todos/as la oportunidad de elegir cosas que les serán útiles en su contexto."
  },
  {
    "objectID": "outreach.html#sec-outreach-final",
    "href": "outreach.html#sec-outreach-final",
    "title": "16  Difusión y vinculación",
    "section": "16.5 Reflexiones finales",
    "text": "16.5 Reflexiones finales\nEs imposible cambiar grandes instituciones por tu cuenta: necesitas aliados/as y para conseguir aliados/as, necesitas tácticas. La guía más útil que he encontrado es Manns and Rising (2015), que cataloga más de cuatro docenas de estas tácticas y las organiza de acuerdo a si se implementan mejor temprano, más adelante, a lo largo del ciclo de cambio, o cuando encuentras resistencia. Algunos de sus patrones incluyen:\n\nEn tu espacio:\n\nMantén la nueva idea visible colocando recordatorios en toda la organización.\n\nSímbolo:\n\nPara una nueva idea se mantenga viva en la memoria de una persona, entrega un objeto simbólico que pueda identificarse con el tema que se está presentando.\n\nEl rol del escepticismo:\n\nIdentifica a los/las líderes de opinión fuertes que son escépticos de tu nueva idea para desempeñar el papel de “persona escéptica oficial”. Usa sus comentarios para mejorar tus esfuerzos, incluso si no logras hacer que cambien de opinión.\n\nCompromiso futuro:\n\nSi puedes anticipar algunas de sus necesidades, podrás pedir (y tener éxito) en obtener un compromiso futuro de las personas más ocupadas. Si se les da algún tiempo de anticipación, es posible que tengan mayor disposición a ayudar porque permites que se organicen.\n\n\nLa estrategia más importante es el deseo de cambiar tus metas basado en lo que aprendes de las personas a las que estás tratando de ayudar. Por ejemplo, enseñarles tutoriales que muestran cómo usar una hoja de cálculo podría ser una ayuda más rápida y confiable que una introducción a JavaScript. A menudo he cometido el error de confundir cosas que me apasionan con cosas que las otras personas deberían saber; si realmente quieres ser quien las acompañe, recuerda siempre que el aprendizaje y el cambio tienen que ir en ambos sentidos.\nLa parte más difícil de construir relaciones es comenzarlas. Reserva una o dos horas cada mes para encontrar aliados/as y mantener tus relaciones con ellos/as. Una forma de hacer esto es pedirles consejos: ¿cómo creen que deberías hacer para que lo que están haciendo sea más conocido? ¿Dónde han encontrado espacio para dar clases? ¿Qué necesidades creen que no son cubiertas y tú serías capaz de lograr? Cualquier grupo que haya existido durante algunos años tendrá consejos útiles; también se sentirán halagados/as de que se les haya consultado, y sabrán quién eres la próxima vez que llames.\nY como dice Kuchner (2011), si no puedes ser el/la primero/a en una categoria, tratar de crear una nueva categoría en la que sí puedas. Si no puedes hacerlo, únete a un grupo existente o piensa en hacer algo completamente diferente. Esto no es derrotista: si alguien más ya está haciendo lo que tienes en mente, deberías incorporarte y contrinuir a ese grupo o abordar alguna de las otras cosas igualmente útiles en las que podrías estar trabajando."
  },
  {
    "objectID": "outreach.html#sec-outreach-exercises",
    "href": "outreach.html#sec-outreach-exercises",
    "title": "16  Difusión y vinculación",
    "section": "16.6 Ejercicios",
    "text": "16.6 Ejercicios\n\n16.6.1 Discurso de presentación para un concejero/a municipal (individual/10’)\nEste capítulo describe una organización que ofrece talleres de programación de fin de semana para las personas que re-ingresan a la actividad laboral. Escribe un discurso de presentación para esa organización, dirigido a un/a integrante del consejo de la ciudad o municipio cuyo apoyo necesita esa organización.\n\n\n16.6.2 Presenta tu organización (individual/30’)\nIdentifica dos grupos de personas de los que tu organización necesite apoyo y escribe un discurso de presentación dirigido a cada uno de estos grupos.\n\n\n16.6.3 Asuntos de correo electrónico (parejas/10’)\nEscribe las líneas de asunto (y solo las líneas de asunto) para tres mensajes de correo electrónico: uno anunciando un nuevo curso, uno anunciando un nuevo patrocinio, y uno anunciando un cambio en el liderazgo del proyecto. Compara tus líneas de asunto con las de tu pareja. Analicen si pueden combinar las mejores características de cada asunto a la par que los acortan.\n\n\n16.6.4 Manejando la resistencia pasiva (grupos pequeños/30’)\nLas personas que no quieren cambios a veces lo dirán en voz alta, pero a menudo pueden utilizar otras formas de resistencia pasiva, como simplemente no lidiar con ello, o plantear un posible problema después de otro para hacer que el cambio parezca más arriesgado y más costoso de lo que en realidad es probable que sea Scott (1987). En grupos pequeños, enumeren tres o cuatro razones por las que las personas podrían no querer que tu iniciativa de enseñanza siga adelante, y expliquen qué pueden hacer con el tiempo y los recursos que tienen para contrarrestar cada una de esas razones.\n\n\n16.6.5 ¿Por qué aprender a programar? (individual/15’)\nRevisa el ejercicio “¿Por qué aprender a programar?” en la Section 2.3. ¿Dónde conciden tus razones para enseñar y las razones de tus estudiantes para aprender? ¿Dónde no coinciden? ¿Cómo afecta eso a tu marketing?\n\n\n16.6.6 Programadores/as conversacionales (pensar-parejas-compartir/15’)\nUn/una programador/a conversacional es alguien que necesita saber lo suficiente sobre computación para tener una conversación valiosa con otro/a programador/a, pero no va a programar por su cuenta. Wang et al. (2018) descubrió que la mayoría de los recursos de aprendizaje no abordan las necesidades de este grupo. En parejas, escriban un discurso para un taller de medio día destinado a ayudar a las personas que se ajustan a esta descripción. Luego, compartan el discurso que armaron con el resto de la clase.\n\n\n16.6.7 Colaboraciones (grupos pequeños/30’)\nResponde por tu cuenta las siguientes preguntas, luego compara tus respuestas con las dadas por el resto de tu grupo.\n\n¿Tienes algún acuerdo o relación con otros grupos?\n¿Quieres generar lazos con algún otro grupo?\nEl hecho de tener (o no tener) colaboraciones, ¿podría ayudarte a alcanzar tus metas?\n¿Cuáles son tus colaboraciones clave?\n¿Son estos los colaboradores adecuados o indicados para alcanzar tus metas u objetivos?\n¿Con qué grupos o entidades te gustaría que tu organización tuviera acuerdos o lazos?\n\n\n\n16.6.8 Educación (toda la clase/10’)\nLabaree (2008) explora por qué los Estados Unidos y otros países siguen trasladando la solución a los problemas sociales hacia las instituciones educativas y por qué eso sigue sin funcionar. Tal como él remarca, “[La educación] ha hecho muy poco para promover la igualdad de raza, clase y género; para mejorar la salud pública, la productividad económica y la buena ciudadanía; o reducir el sexo sin cuidados en la adolescencia, las muertes por accidentes de tránsito, la obesidad y la destrucción ambiental. De hecho, en muchos sentidos la educación ha tenido un efecto negativo sobre estos problemas, sacando dinero y energía de las reformas sociales que podrían haber tenido un impacto más substancial.” El autor continúa escribiendo:\n\nEntonces, ¿cómo debemos entender el éxito de esta institución, a la luz de su fracaso en lo que le pedimos? Una forma de pensar en esto es que la educación puede no estar haciendo lo que pedimos, pero está haciendo lo que queremos. Queremos una institución que persiga nuestros objetivos sociales de una manera que esté en línea con el individualismo en el corazón del ideal liberal, con el objetivo de resolver problemas sociales buscando cambiar los corazones, mentes y capacidades de cada estudiante individual. Otra forma de decir esto es que queremos una institución a través de la cual podamos expresar nuestros objetivos sociales sin violar el principio de elección individual que se encuentra en el centro de la estructura social, incluso si esto tiene el costo de no lograr estos objetivos. Entonces la educación puede servir como un punto de orgullo cívico, un lugar para exponer nuestros ideales, y un medio para participar en disputas edificantes pero que en última instancia intrascendentes sobre visiones alternativas de la buena vida. Al mismo tiempo, la educación también puede servir como un conveniente chivo expiatorio al que podemos culpar por su fracaso en lograr nuestras más altas aspiraciones como sociedad.\n\n¿Cómo los esfuerzos para enseñar pensamiento computacional y la ciudadanía digital en las escuelas se adaptan a este marco? ¿Los programas de entrenamiento intensivo evitan estas trampas o simplemente las entregan con una nueva apariencia?\n\n\n16.6.9 Adopción institucional (toda la clase/15’)\nRelean la lista de motivaciones para adoptar nuevas prácticas presentada en la Section 16.4.\n¿Cuáles de estas motivaciones se aplican a tí y a tus colegas? ¿Cuáles son irrelevantes en tu contexto? ¿En cuáles de estas motivaciones haces hincapié en los casos en que interactúas con personas que trabajan en instituciones educativas formales?\n\n\n16.6.10 Si al principio no tienes éxito (grupos pequeños/15’)\nW.C. Fields probablemente nunca dijo “Si al principio no tienes éxito, inténtalo, inténtalo de nuevo. Luego abandona—no sirve de nada ser un maldito tonto al respecto.” Sin embargo, sigue siendo un buen consejo: si las personas con las que intentas comunicarte no están respondiendo, podría ser que nunca las convenzas. En grupos de 3 a 4 personas, hagan una breve lista de señales que indiquen que debes dejar de intentar hacer algo en lo que crees. ¿Cuántas de estas señales ya son verdaderas?\n\n\n16.6.11 Haz que falle (individual/15’)\nFarmer (2006) presenta algunas reglas irónicas para lograr que nuevas herramientas no sean adoptadas, todas de las cuales aplican a nuevas prácticas de enseñanza:\n\nHazlo opcional.\nEconomiza en entrenamiento.\nNo las uses en un proyecto real.\nNunca la integres.\nÚsala esporádicamente.\nHazla parte de una iniciativa de calidad.\nMarginaliza al campeón/a.\nCapitaliza los primeros errores.\nHaz una inversión pequeña.\nExplota el miedo, la incertidumbre, la duda, la pereza y la inercia.\n\n¿Cuál de estas reglas has visto implementarse recientemente? ¿Cuáles has utilizado tú mismo/a? ¿De qué forma se usaron esas reglas?\n\n\n16.6.12 Mentoreo (todo la clase/15’)\nEl [Institute for African-American Mentoring in Computer Science][iaamcs] (Instituto de Mentoría Afroamericana en Ciencias de la Computación) ha publicado [guías para mentorear estudiantes de doctorado][iaamcs-guidelines]. Lee estas guías individualmente (en inglés), luego discutan en la clase y califiquen los esfuerzos para tu propio grupo como: +1 (definitivamente lo haría), 0 (no estoy seguro o no es aplicable), o -1 (definitivamente no lo haría).\n\n\n\n\nBarker, Lecia, Christopher Lynnly Hovey, and Jane Gruning. 2015. “What Influences CS Faculty to Adopt Teaching Practices?” In 2015 Technical Symposium on Computer Science Education (SIGCSE’15). Association for Computing Machinery (ACM). https://doi.org/10.1145/2676723.2677282.\n\n\nBauer, Mark S., Laura Damschroder, Hildi Hagedorn, Jeffrey Smith, and Amy M. Kilbourne. 2015. “An Introduction to Implementation Science for the Non-Specialist.” BMC Psychology 3 (1). https://doi.org/10.1186/s40359-015-0089-9.\n\n\nBorrego, Maura, and Charles Henderson. 2014. “Increasing the Use of Evidence-Based Teaching in STEM Higher Education: A Comparison of Eight Change Strategies.” Journal of Engineering Education 103 (2): 220–52. https://doi.org/10.1002/jee.20040.\n\n\nDiSalvo, Betsy, Cecili Reid, and Parisa Khanipour Roshan. 2014. “They Can’t Find Us.” In 2014 Technical Symposium on Computer Science Education (SIGCSE’14). Association for Computing Machinery (ACM). https://doi.org/10.1145/2538862.2538933.\n\n\nFarmer, Eugene. 2006. “The Gatekeeper’s Guide, or How to Kill a Tool.” IEEE Software 23 (6): 12–13. https://doi.org/10.1109/ms.2006.174.\n\n\nHenderson, Charles, Renée Cole, Jeff Froyd, Debra Friedrichsen, Raina Khatri, and Courtney Stanford. 2015a. Designing Educational Innovations for Sustained Adoption. Increase the Impact.\n\n\n———. 2015b. “Designing Educational Innovations for Sustained Adoption (Executive Summary).” http://www.increasetheimpact.com/resources.html; Increase the Impact.\n\n\nHu, Helen H., Cecily Heiner, Thomas Gagne, and Carl Lyman. 2017. “Building a Statewide Computer Science Teacher Pipeline.” In 2017 Technical Symposium on Computer Science Education (SIGCSE’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3017680.3017788.\n\n\nKuchner, Marc J. 2011. Marketing for Scientists: How to Shine in Tough Times. Island Press.\n\n\nLabaree, David F. 2008. “The Winning Ways of a Losing Strategy: Educationalizing Social Problems in the United States.” Educational Theory 58 (4): 447–60. https://doi.org/10.1111/j.1741-5446.2008.00299.x.\n\n\nManns, Mary Lynn, and Linda Rising. 2015. Fearless Change: Patterns for Introducing New Ideas. Addison-Wesley.\n\n\nNarayanan, Sathya, Kathryn Cunningham, Sonia Arteaga, William J. Welch, Leslie Maxwell, Zechariah Chawinga, and Bude Su. 2018. “Upward Mobility for Underrepresented Students.” In 2018 Technical Symposium on Computer Science Education (SIGCSE’18). Association for Computing Machinery (ACM). https://doi.org/10.1145/3159450.3159551.\n\n\nSchwarz, Viviane. 2013. Welcome to Your Awesome Robot. Flying Eye Books.\n\n\nScott, James C. 1987. Weapons of the Weak: Everyday Forms of Peasant Resistance. Yale University Press.\n\n\nStark, Philip, and Richard Freishtat. 2014. “An Evaluation of Course Evaluations.” ScienceOpen Research, September. https://doi.org/10.14293/s2199-1006.1.sor-edu.aofrqa.v1.\n\n\nUttl, Bob, Carmela A. White, and Daniela Wong Gonzalez. 2017. “Meta-Analysis of Faculty’s Teaching Effectiveness: Student Evaluation of Teaching Ratings and Student Learning Are Not Related.” Studies in Educational Evaluation 54 (September): 22–42. https://doi.org/10.1016/j.stueduc.2016.08.007.\n\n\nWang, April Y., Ryan Mitts, Philip J. Guo, and Parmit K. Chilana. 2018. “Mismatch of Expectations: How Modern Learning Resources Fail Conversational Programmers.” In 2018 Conference on Human Factors in Computing Systems (CHI’18). Association for Computing Machinery (ACM). https://doi.org/10.1145/3173574.3174085.\n\n\nYadav, Aman, Sarah Gretter, Susanne Hambrusch, and Phil Sands. 2016. “Expanding Computer Science Education in Schools: Understanding Teacher Experiences and Challenges.” Computer Science Education 26 (4): 235–54. https://doi.org/10.1080/08993408.2016.1257418."
  },
  {
    "objectID": "paid.html#sec-getting-paid-start",
    "href": "paid.html#sec-getting-paid-start",
    "title": "17  Como vivir de enseñar",
    "section": "17.2 Por donde empezar",
    "text": "17.2 Por donde empezar\nAqui hay un par de opciones sobre como empezar a ofrecer tus servicios y dar clases como docente autónomo.\n\nEmpieza como parte del grupo de apoyo.\n\nSé ayudante en el curso o evento que otras personas hayan organizado. Te servirá para aprender como funciona este negocio y para hacer contactos.\nSi se trata de una capacitación paga, la persona responsable debería cubrir los costos de tu participación (Ej: viaje, alojamiento) y pagarte una tarifa por tu tiempo. Si la capacitación no es comercial, puedes preguntar si te dejan enseñar una parte de la clase y luego te den su opinión de tu desempeño y te aconsejen como mejorar.\n\nEmpieza con personas conocidas.\n\n¿Conoces a alquien que trabaje en algún lugar que se beneficiaría del tipo de formación que ofreces? Si es así, pregunta si te puede presentar con la persona a cargo o con alguien de recursos humanos (que suelen encargarse de organizar las capacitaciones), para que puedas ofrecer tus servicios.\n\nContacta a las asociaciones, consejos y colegios de profesionales y a los gremios.\n\nEstas organizaciones nuclean personas que se dedican a ejercer una disciplina. En general, tienen un área de capacitación que ofrece cursos y actualizaciones sus miembros. Puedes ponerte en contacto con las personas responsables de esta actividad y ofrecer tus servicios. Además, son un buen lugar para generar contactos y experiencia. Si sos parte de alguna de estas organzaciones, empieza por allí.\n\nEmpieza por las conferencias.\n\nLas conferencias, hackatones y eventos similares son una gran oportunidad para hacer contactos y conocer clientes potenciales. Muchas conferencias tienen una sección o día destinado a tutoriales; busca que eventos y conferencias se van a realizar entre los próximos 6 a 12 meses y revisa si hay un llamado a propuestas de tutoriales. Contacta a las personas responsables de la organización de la conferencia (o directamente con la persona responsable de organizar las capacitaciones) para ver qué buscan o si quieren lo que tú ya tienes. Si hay un llamado a presentación de tutoriales, este suele solicitar algunos detalles sobre tu propuesta, que también vas a necesitar si te invitan a participar. Te sugerimos que tu propuesta presente al menos los siguientes puntos:\n\nAudiencia: podes presentar esta parte usando personas tipo (referencia).\nObjetivos de aprendizaje: lista que van a aprender tus estudiantes (referencia).\nPropuestas pedagógica: detalla como será la dinámica del curso, que tipo de herramientas de enseñanza activa vas a utilizar (ej: evaluaciones formativas, trabajo en grupo, codificación participatoria en vivo, etc.)\nEsquema y duración: una agenda tentativa del curso donde se vea explicitamente los cortes y las ejercicitaciones.\nPre-requisitos: para quienes tomen el curso en cuanto a hardware, software y conocimientos previos.\n\n\n\nEstos puntos muestran que tienes conocimiento sobre como enseñar el tema, además del tema en si. En el FIXME:  podes ver algunas plantillas para generar estos documentos.\n\nEnseña en comunidades de práctica, organizaciones sin fines de lucro e instituciones públicas.\n\ny su puedes, hazlo sin cobrar dinero. Greg ha impartido media docena de clases gratuitas para bibliotecas públicas en los últimos años porque cree que las bibliotecas públicas son una de las mejores invenciones de la civilización y quiere ayudarlas tanto como pueda. También ha impartido clases para empresas locales a cambio de donaciones a organizaciones benéficas que quiere apoyar.\nYanina ha ofrecido sus cursos de forma gratuita a agrupaciones como R-Ladies y como cursos extracurriculares en universidades públicas en Argentina. De esta manera puede devolver un poco de todo lo que ha recibido de la educación pública de su país y de las comunidades de práctica de las cuales es parte. Además, esta práctica, les permite generar nuevos contactos, probar material nuevo, ver cómo enseñan con una persona con la que no han enseñado antes y formar personas para que enseñen utilizando las técnicas y herramientas que aprendimos en este libro.\n\nVe donde no están los demás.\n\nhoy todas las industrias necesitan ayuda con el manejo y explotación de sus datos; no es necesario ofrecer tus servicios a los negocios más conocidos o de moda. Cualquiera sea el mercado donde ofrezcas tus servicios, usa ejemplos que sean directamente relevantes para su campo y conoce a tu audiciencia hablando con más personas además de tus contactos iniciales para poder hacerte una idea de como son las personas tipo de esa comunidad y que conocimientos previos ya tienen.\n\nProgramas de entrenamiento intensivos (bootcamps)\n\nSi te estás aproximando a un programa de entrenamiento intensivo que ya existe, tu mejor estrategia podría ser enfatizar lo que sabes sobre enseñanza, en lugar de lo que sabes sobre tecnología, ya que gran parte de las personas que trabajan en estos emprendimientos tiene experiencia en programación pero poca o ninguna formación en educación. Puedes demostrar lo que sabes usando el material presentado en los primeros capítulos de este libro (que ya a funcionado con estos espacios en el pasado). Además Lang (2016) describe prácticas de enseñanza basadas en evidencia que pueden implementarse con un esfuerzo mínimo y a bajo costo. Aunque estas prácticas no son las de mayor impacto, pueden ser útiles para lograr éxitos iniciales que te ayuden a lograr apoyo para prácticas que requieren mayor esfuerzo.\n\n\nUna nota de precaución: Debes tener en cuenta que algunos de estos programas son de muy alta calidad, pero otros existen esencialmente para sacarle dinero a la gente McMillan Cottom (2017). Thayer and Ko (2017) entrevistó a 26 personas graduadas de entrenamientos intensivos que tienen como objetivo dar una segunda oportunidad a quienes ya intentaron aprender computación. Estas personas enfrentan grandes costos y riesgos personales porque deben invertir una cantidad significativa de tiempo, dinero y esfuerzo durante todo el proceso de entrenamiento y el cambio de carrera, posterior a graduarse, puede tomar un año o más. Varias de las personas entrevistadas sienten que sus certificados fueron subestimados por sus empleadores, algunas expresaron que obtener un trabajo significa aprobar una entrevista, pero dado que quienes te entrevistan, en general, no comparten los motivos del rechazo, es difícil saber qué mejorar o qué más aprender. Muchas personas han tenido que recurrir a pasantías (pagas o de otro tipo) y pasan mucho tiempo construyendo sus porfolios y desarrollando su red de contactos. Las tres barreras informales que más fácilmente identificaron las personas entrevistadas fueron la jerga, el síndrome del impostor/a y una sensación de no encajar. Burke et al. (2018) profundizó en este tema al comparar las habilidades y credenciales que la industria tecnológica busca con aquellas habilidades provistas por carreras universitarias de cuatro años y programas de entrenamiento intensivo. A partir de entrevistas con 15 responsables de contratación de empresas de varios tamaños y algunos grupos focales, encontraron que las personas que reclutan enfatizaban uniformemente en habilidades blandas (especialmente trabajo en equipo, comunicación y la habilidad para continuar aprendiendo). Muchas compañías requerían un título de cuatro años (aunque no necesariamente en ciencias de la computación), pero muchas también elogiaron a quienes han egresado de estos programas de entrenamiento intensivo por tener más madurez y poseer conocimientos más actualizados.\nEn resumen, presta atención a que tipo de proyecto y emprendimiento te estas sumando.\n\nReusa y traduce materiales de enseñanza exitosos a tu lenguaje\n\nEl lenguaje puede ser una barrera importante a la hora de acceder a contenido actualizado. Hay muchas personas que comparten sus materiales educativos en linea, algunos de estos materiales han sido reutilizados y refinados, logrando lecciones de calidad que funcionan muy bien (por ejemplo las lecciones de The Carpentries y MetaDocencia). Si la licencia de uso lo permite, podrías aprovecharlos para tus propias clases y materiales, adaptándolos si es necesario. Parte de esas adaptaciones puede ser la traducción a tu idioma, si cuentan con una licencia que permite obras derivadas. Siempre es una buena idea contactar a la persona autora de los materiales y hacerle saber tus intenciones de uso, adaptación y traducción.\nSi ya están trabajando en eso tal vez puedas sumarte al equipo. Este reuso puede ahorrarte trabajo en el desarrollo y diseño de lecciones, puede darte buenas ideas para lecciones propias y puedes aportar a tu comunidad haciendo el material más accesible por medio de la traducción. Además, si has traducido materiales conocidos y útiles, serás una de las personas autoras de la traducción, lo que es una buena forma de hacerte conocer y generar contactos.\n\nHabla con tu empleador.\n\nSi, como muchas otras personas, vas a dedicarte a enseñar mientras tienes otro trabajo (hasta que puedas dedicarte a tiempo completo a enseñar), es buena idea que tu empleador lo sepa. Es muy probable es que se entere de todas maneras y siempre es mejor que se entere primero por ti. Es recomendable mantener tu negocio de docente de tus otros trabajos. Tango Greg como Yanina, realizaban tareas relacionadas con su servicio de enseñanza (como desarrollar los materiales de sus cursos o responder a correos electrónicos) fuera del horario laboral y usando sus usuarios y equipos personales. Además, ofrécele a tu actual empleador realizar alguna formación interna de forma gratuita (donde gratuita significa “durante horas de trabajo, como parte de su empleo regular remunerado”)."
  },
  {
    "objectID": "paid.html#sec-getting-paid-charge",
    "href": "paid.html#sec-getting-paid-charge",
    "title": "17  Como vivir de enseñar",
    "section": "17.3 Como determinar cuanto cobrar / Negociando el pago",
    "text": "17.3 Como determinar cuanto cobrar / Negociando el pago\nMuchas veces el pago está fijado con antelación, por ejemplo, en una institución formal hay convenios colectivos de trabajo que determinan el sueldo de un docente.\nTambién puede ser que en conferencias y algunas comunidades de práctica el pago sea determinado por quienes organizan el evento. En otras ocasiones las contrataciones gubernamentales o en empresas cuentan con un presupuesto prefijado destinado a capacitaciones, por ejmplo un monto máximo al año o un valor fijo de la hora de enseñanza. En estos casos, como el precio no se puede negociar, tienes que analizar si el arreglo es conveniente o no para ti, teniendo en cuenta algunos de los puntos de la sección anterior.\nOtras veces te van a pedir un presupuesto por tu trabajo docente. Determinar este precio depende de diversos factores, como por ejemplo la región del mundo donde vas a vender tu curso, el tipo de empresa u organización que te lo pide, la duración del curso, la modalidad (presencial, online o híbrida) o el nivel de personalización requerido, por mencionar algunos.\nEn esta sección te presentamos una serie de pasos para determinar el precio de tu tarea docente.\n\nCalcular el precio (por hora)\n\nun primer paso es asignar un precio a la hora de trabajo. Los colegios profesionales y los gremios suelen brindar listados de precios por hora para las tareas de sus profesionales, muchas veces están publicados en sus sitios web. Otra fuente puede ser el valor por hora de un docente de nivel superior (universitario/terciario), al cual se debe multiplicar por 2.5 o 3 para obtener un precio que contemple los costos que tiene trabajar de forma autónoma (Gunderloy2009?). También podes consultar con colegas qué precio por hora cobran y analizar el precio promedio en las publicaciones y ofertas de cursos similares a los tuyos. En 2021 se lanzó 500 Women Scientists’ Fix The Gap initiative para generar una base de datos pública con una lista de honorarios por dar charlas en CTIM (Ciencia, Tecnología, Ingeniería y Matemáticas), aunque la mayoría de los datos se concentra en el norte global es una buena fuente de consulta.\n\nDeterminar una tarifa base\n\nenseñar un curso no es solo ir en la fecha acordada, pararse delente de la clase y empezar a enseñar. La preparación del material corresponde a un porcentaje importante del tiempo invertido en el curso. En general los clientes no van a aceptar pagarte ese tiempo, por lo que incorporarlo en el costo del curso es una forma de cobrar por esa tarea. Una hora de curso corresponde entre una y tres horas de preparación. Esta relación puede cambiar si el curso es totalmente nuevo o ya tienes algo de material preparado. Por ejemplo, podrías iniciar con una tarifa base de dos horas adicional de costo por cada hora frente a estudiantes.\n\nMás pedidos, más costo\n\nA esa tarifa de base se le pueden agregar más horas de acuerdo a los pedidos del cliente. Agregar entre una a tres horas en el costo para la personalización del material (ejemplos, ejercicios, desafíos o ejercitación extra) utilizando datos relacionados con su actividad. También añadir entre dos a cuatro horas de costo extra si solicitan grabar la clase para uso futuro o para publicarla. No aceptes agregás “una cosa más” sin confirmar primero que vas a vas a cobrar por el trabajo. Si lo que estás enseñando es especializado o avanzado y requiere una preparación extra (por ejemplo, incorporar las APIs de la empresa en el material del curso sobre como usar R para análisis de datos) o contar con conocimientos avanzados y actualizados puedes agregar entre dos a cuatro horas al costo total.\n\nEnseñando en equipo\n\nYa hemos mencionado que es mejor si enseñamos con otras personas. Ya sea porque siempre enseñas en equipo, por que por el numero de estudiantes que va a tener tu curso necesitas ayuda, debes agregar al costo las horas de clase de quienes enseñaran contigo. Si el curso es presencial también se agregan los costos de viaje y alojamiento, tanto tuyo como de tus co-docentes y ayudantes.\n\nUltimos ajustes\n\npuede ser que no quieras tener la misma tarifa para una universidad pública que para una empresa; para una organización sin fines de lucro que para un banco o compañía de seguros. Puedes tener un valor de la hora diferente para diferente tipos de organizaciones. También puedes ofrecer tus servicios de forma gratuita o acordar un precio diferente si donan tu pago a una organización que desees ayudar. Finalmente, no trabajes barato con la esperanza de que la capacitación te lleve a un trabajo de consultoría: ocurre, pero es muy infrecuente como para apostar por ello."
  },
  {
    "objectID": "paid.html#sec-getting-paid-outreach",
    "href": "paid.html#sec-getting-paid-outreach",
    "title": "17  Como vivir de enseñar",
    "section": "17.4 Dándote a conocer",
    "text": "17.4 Dándote a conocer\nTus clientes deben poder encontrarte y conocer lo que ofreces para poder contratarte. En esta sección veremos algunas opciones para tener una presencia online que te ayude a realizar tu trabajo de enseñanza.\n\nManten tus redes sociales actualizadas\n\nasegúrate de que tu perfil de LinkedIn está actualizado, los potenciales clientes van a consultarlo antes de contratarte. Con respecto de las otras redes sociales, es preferible tener menos redes sociales activas que muchas redes que luego no se mantienen. Algunas comunidades o negocios usan una red social más que otra, tener una presencia en ellas es una forma que te encuentren y te conozcan. Considera estas cuentas parte de tu marca personal, porque asi lo considerarán tus futuros clientes. Si te es posible utiliza el mismo nombre de usuario en todas las redes donde estés presente. Esto hace que sea más sencillo para las personas encontrarte online. Por ejemplo, Greg es gvwilson en casi todas sus redes sociales, mientras que Yanina es yabellini.\n\nCrea un sitio web de aspecto profesional.\n\nTu página web debería tener - información de contacto (no uses el correo electrónico de tu trabajo si empiezas a dedicarte a esto a medio tiempo); - una breve biografía; - muestras de tus cursos (vamos a ver más detalle en la próxima sección); - un par de vídeos cortos donde estés enseñando o dando charlas; - un blog con algunas publicaciones recientes relacionadas con lo que enseñas o que describan compromisos recientes (con énfasis en recientes: si el último post tiene dos años, puede ser contraproducente); - comentarios positivos de clientes anteriores (o de profesores para los que has sido asistente, o personas con las cuales has trabajado antes) y - el código de conducta de tus talleres. - opcionalmente, y si te sientes cómoda/o, puedes compartir un calendario de los próximos compromisos, como por ejemplo las conferencias a las que vas a asistir, porque aunque no estés enseñando hay personas que pueden aprovechar la oportunidad para contactarte.\n\n\n\n17.4.1 Materiales\nEn el punto anterior mencionamos que es una buena idea tener una muestra de tus materiales de enseñanza en tu sitio web. Como se detalla en Devenyi et al. (2018) generar material educativo requieren un esfuerzo significativo tanto para su desarrollo inicial como para mantenerlo actualizado.\nA pesar que existe la paradoja de la reusabilidad ( (Frantiska2016?)) que postula que un material didáctico será más reutilizables cuando sea lo más genérico posible pero será más efectivo cuando esté personalizado para una audiencia particular, en un contexto particular ( (Wiley2004?)); compatir nuestro material de una manera que otras personas puedan encontrarla, utilizarla, mejorarla y citarla es una actividad que vale la pena el esfuerzo. Además, si los materiales son buenos, hay una alta probabilidad que terminen en internet de todas maneras, poder compartirlo bajo tus propios términos es una mejor opción.\nSumemos a esto que tanto Devenyi et al. (2018) como (Wilson2019?), mencionan que tratar las lecciones como un recurso comunitario que debe actualizarse, adaptarse y mejorarse gradualmente puede incrementar la calidad del material educativo y liberar un tiempo valioso en el diseño del propio material. Compartiendo nuestro material, estamos ayudando a nuestros colegas y también a nuestros estudiantes, que pueden acceder a nuestras lecciones sin costo y en el momento que lo necesiten.\nFinalmente, si seguimos una serie de pasos, tendríamos un producto citable, es decir, podríamos pedir y obtener crédito por el material que desarrollamos, y también podríamos saber quién está usando este material y dónde, lo que muchas veces nos ayudará a mejorarlo.\nTres simples pasos para compartir lecciones\n\nPaso 1: seleccionar una licencia abierta que sea clara con respecto a como usar el material.\nLos materiales que cuentan con una licencia permiten ser utilizados correctamente. Si la licencia no figura explicitamente, por defecto el contenido es cerrado. Sugerimos seleccionar una licencia abierta tanto para el material (texto, imágenes, videos) como para el software.\n\nMaterial: las licencias Creative Commons proveen diversos tipos dependiendo de lo que deseamos que pueda hacer quien use nuestros materiales. Este selector de licencias puede ayudarnos a elegir la licencia que mejor se adapta a nuestras necesidades.\nSoftware: Para el software, existen múltiples opciones. Te presentamos tres: 1) La licencia MIT, que permite dar cualquier uso al código. 2) la Licencia Pública General de GNU (GPL), que también permite hacer cualquier uso que quieran exigiendo que compartan su propio código bajo esta licencia y\n\n\nla licencia hipocrática, que permite usar el código libremente siempre que el uso no viole los tratados básicos de derechos humanos. Hay que tener en cuenta que si utilizamos código de otras personas pueden existir restricciones con respecto a que licencia podemos asignar a nuestro propio código.\n\nPaso 2: almacenar el material en un repositorio que nos permita publicarlo.\nUn lugar que nos permite realizar esta tarea es GitHub que se usa para desarrollar una variedad de materiales porque nos permite tener diferentes tipos de contenido como diapositivas, documentos, código fuente, imágenes y también nos permite desarrollarlo continuamente a través de un proceso iterativo y con comentarios de otros, ya que GitHub implementa un sistema de control de versiones. Si no has usado GitHub, podes utilizar este tutorial inicial sobre Git.\nPaso 3: agregar un indentificador de objeto digital (DOI) para que sea citable.\nPodemos hacer esto linkeando nuestro material en GitHub con la plataforma Zenodo. Este artículo tiene una explicación paso a paso para agregar el DOI a tus materiales.\n\nTambién contamos con la posibilidad de publicar nuestros materiales en el Journal of Open Source Education (Revista de Software Libre de Educación). JOSE es una revista de software educativo abierto y contenidos educativos de código abierto. Publica artículos breves que describen materiales educativos de código abierto o herramientas de software educativo de código abierto. El proceso de publicación es similar a otras revistas, con una revisión por pares y una publicación del artículo en caso que sea aceptado.\nUn par de puntos más sobre los materiales\n\nNunca cedas los derechos de tu material.\n\nTanto como si prefieres publicar tus materiales o guardarlos para ti, no dejes que un cliente te diga que tu material le pertenece o que tiene el derecho exclusivo a usarlo, a menos que que te haya pagado (muy bien) por ese privilegio.\n\nMateriales armados durante tu trabajo de empleado\n\nSi quiere utilizar externamente el material que has desarrollado en tu trabajo como empleado (por ejemplo, si has creado un curso para una universidad y ahora quieres utilizar esas lecciones en una conferencia), asegúrate de confirmar por escrito o por correo electrónico que tu empleador está de acuerdo antes de hacerlo."
  },
  {
    "objectID": "paid.html#sec-getting-paid-exercises",
    "href": "paid.html#sec-getting-paid-exercises",
    "title": "17  Como vivir de enseñar",
    "section": "17.5 Ejercicios",
    "text": "17.5 Ejercicios\n\n17.5.1 Sobre hombros de gigantes (individual/15’)\nEn la web del Journal of Open Source Education busca publicaciones relacionadas con los temas que enseñas. Analiza el formato y contenido de los artículos.\n\n¿Podrías presentar tus cursos de esta manera?\n¿Alguna de las publicaciones podría serte útil para tus propios cursos?\n¿Es claro la licencia de los trabajos? ¿Y como citarlos?\n\n\n\n17.5.2 Licencias (individual/15’)\nUtiliza el selector de licencias de Creative Commons para decidir que tipo de licencia usarías con tus materiales.\n\n¿Cuál elegiste? ¿Porqué?\n¿Usarías la misma para todos tus cursos?\n\n\n\n17.5.3 Cuanto cobrar (clase completa/15’)\n\nUtilicen el sitio web 500 Women Scientists’ Fix The Gap initiative para analizar cuanto se cobra por diferentes actividades de enseñanza.\n¿Es útil esta información? ¿Te parece que son necesarios estos sitios?\nComparen esos precios con los que ustedes cobran.\n(opcional) Agreguen sus datos y experiencias a la base de datos para ayudar a más personas a determinar un costo ético y justo para su actividad.\n\n\n\n17.5.4 Determinando la licencia de un material (en grupos/15’)\nRecorre las lecciones de The Carpentries y contesta:\n\n¿Dónde se especifica la licencia? ¿Cuál es?\n¿Qué podrías hacer con este material?\n\n\n\n17.5.5 Contribuyendo (en grupos/15’)\nEn el repositorio de este libro hay una lista de issues a resolver.\n\nSi ves alguno que te interesa, agrega tus comentarios o la solución al problema si es que la tienes.\nCrea un nuevo issue si tienen una sugerencia, arreglo, mejora, que no está en los issues existentes.\n\n\n\n\n\nBurke, Quinn, Cinamon Bailey, Louise Ann Lyon, and Emily Greeen. 2018. “Understanding the Software Development Industry’s Perspective on Coding Boot Camps Versus Traditional 4-Year Colleges.” In 2018 Technical Symposium on Computer Science Education (SIGCSE’18). Association for Computing Machinery (ACM). https://doi.org/10.1145/3159450.3159485.\n\n\nDevenyi, Gabriel A., Rémi Emonet, Rayna M. Harris, Kate L. Hertweck, Damien Irving, Ian Milligan, and Greg Wilson. 2018. “Ten Simple Rules for Collaborative Lesson Development.” PLoS Computational Biology 14 (3). https://doi.org/10.1371/journal.pcbi.1005963.\n\n\nLang, James M. 2016. Small Teaching: Everyday Lessons from the Science of Learning. Jossey-Bass.\n\n\nMcMillan Cottom, Tressie. 2017. Lower Ed: The Troubling Rise of for-Profit Colleges in the New Economy. The New Press.\n\n\nThayer, Kyle, and Amy J. Ko. 2017. “Barriers Faced by Coding Bootcamp Students.” In 2017 International Computing Education Research Conference (ICER’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3105726.3106176."
  },
  {
    "objectID": "joining.html#modularizar-los-contenidos.",
    "href": "joining.html#modularizar-los-contenidos.",
    "title": "21  Unirse a nuestra comunidad",
    "section": "21.2 Modularizar los contenidos.",
    "text": "21.2 Modularizar los contenidos.\nTambién es posible crear módulos de cada contenido y enseñarlos en talleres sincrónicos de entre una hora y media y tres horas.\n\n21.2.1 Encuentro online sincrónico de tres horas\nEl objetivo es introducir buenas prácticas básicas para manejo de espacios de intercambio de conocimiento sincrónico, como por ejemplo, una clase, un seminario, un taller o una charla. Todos los detalles del encuentro, empezando por el formulario de registro hasta el pedido de devolución antes de finalizar el taller, pasando por la ejecución del mismo, son una demostración de las estrategias mencionadas en este libro y que pueden ser adoptadas o adaptadas a cualquier intercambio de saberes que suceda interactuando en simultáneo con una audiencia.\nLos conceptos pedagógicos que se introducen son:\n\nDiseño del espacio de intercambio de saberes pensando en la audiencia objetivo (personas tipo)\nMapas conceptuales para el diseño de lecciones y evaluación.\nEvaluación formativa diagnóstica cada 10-15 minutos para determinar si la audiencia sigue lo explicado y corregir en el momento explicación y contenido.\nParticipación en un documento compartido colaborativo para tomar notas, resolver evaluaciones formativas, compartir material\nHerramientas pedagógicas rápidas basadas en evidencia y fáciles de implementar en entornos online, hibridos y presenciales.\nComo pedir y dar devoluciones efectivas.\nCompartir fuentes de las cuales seguir aprendiendo y expandiendo prácticas pedagógicas\n\nYanina impartió este taller con este formato más de 20 veces durante 2020 a 2022. Aqui se pueden encontrar un ejemplo de los materiales utilizados en español.\n\n\n21.2.2 Encuentro sincónico de hora y media\nNuevamente el objetivo es crear conciencia de la existencia de buenas prácticas básicas para manejo de espacios de intercambio de conocimiento sincrónico y proveer un momento donde experimentar estas buenas prácticas en primera persona durante el taller.\nLos conceptos pedagógicos que se introducen son:\n\nDiseño del evento pensando en la audiencia objetivo.\nMapas conceptuales.\nEvaluación formativa diagnóstica para determinar entendimiento y corregir en el momento la explicación y el contenido.\nUso de un documento compartido colaborativo para tomar notas, resolver evaluaciones formativas, compartir material.\nHerramientas pedagógicas rápidas basadas en evidencia y fáciles de implementar en entornos en línea, híbridos y presenciales.\nComo pedir devoluciones efectivas.\nCompartir fuentes de las cuales seguir aprendiendo y expandiendo prácticas pedagógicas\n\nYanina impartió este taller con este formato 10 veces durante 2020. Aqui se pueden encontrar un ejemplo de los materiales utilizados en español.\n\n\n21.2.3 ¿Qué enseñamos en cada formato?\nEn dos jornadas completas (16 horas de curso) se puede cubrir gran parte de los capítulos Chapter 3 a Chapter 7, Chapter 9, y Chapter 11.\nTambién se puede hacer en una jornada completa o dos medias jornadas (8 horas de curso), en ese caso, estos son los objetivos de aprendizaje\n\n\nEn el caso de los talleres de tres horas, tenemos dos talleres diferentes.\n\n21.2.3.1 Introducción a enseñar\nObjetivo: Introducir buenas prácticas básicas basadas en evidencia para el manejo de espacios de intercambio de conocimiento presencial (por ejemplo, clase, seminario, taller o charla) o remoto, (por ejemplo, clases sincrónicas usando plataformas de videoconferencia remotas). Cada detalle del taller, empezando por el formulario de registro hasta el pedido de devolución cuando termina el taller, pasando por la ejecución del mismo, son una demostración de estrategias que pueden ser adoptadas o adaptadas a cualquier tarea docente que sucede interactuando en simultáneo con una audiencia.\nDurante este taller: * Mostraremos como contactar y preparar a tu audiencia para sumarse a una clase o evento sincrónico (“la previa”) * Manejaremos un evento remoto a través de Zoom que mantendrá a una audiencia participando activamente durante tres horas. * Veremos ejemplos de cómo crear un ambiente positivo para nuestra audiencia * Tendremos una introducción a conceptos pedagógicos de:\n\nDiseño de la clase o evento pensando en la audiencia que va a estar recibiendo el material (estudiantes/personas tipo)\nUso de mapas conceptuales\nEvaluación formativa diagnóstica cada para saber si tu audiencia sigue lo que explicas y corregir sobre la marcha cuando detectes que algo no es claro para la mayoría\nParticipación en un documento conjunto colaborativo para tomar notas o resolver evaluaciones formativas\nOtras herramientas pedagógicas rápidas basadas en evidencia y fáciles de implementar\nPedido de devolución a tu audiencia luego de cada clase y cómo dar devoluciones efectivas\nCompartiremos fuentes de las cuales seguir aprendiendo prácticas pedagógicas\n\n\n\n21.2.3.2 Cómo enseñar a programar\nIntroducir técnicas y buenas prácticas para diseñar tus cursos de programación y evaluar a tus estudiantes.\nDurante este taller:\n\nMostraremos cómo diseñar tus cursos de programación de una manera eficiente y productiva.\nHablaremos de la utilidad de la revisión entre pares y la importancia de recibir feedback. Discutiremos cómo implementar estas prácticas.\nPresentaremos diferentes tipos de evaluación y ejercicios posibles. Por ejemplo: problemas de Parsons, Completar los espacios en blancos, etc.\nHaremos un recorrido por las buenas prácticas de programación y las formas de promover su uso entre tus estudiantes.\nPresentaremos la práctica de Códificación en vivo (Live Coding). Veremos ejemplos prácticos que ayudarán a reconocer detalles a tener en cuenta a la hora de llevarla a cabo.\nDurante todo el taller ilustraremos los conceptos presentados usando ejemplos de uso en diferentes lenguajes de programación.\n\n\n\n\n21.2.4 ¿Quién puede enseñar este material?\nEl club de lectura es una buena forma de tener una enseñanza entre pares, para un grupo de personas que están interesadas en trabajar sobre el material.\nParte de este material se utilizó en el entrenamiento de instructores de The Carpentries y RStudio (ahora Posit), por lo que las personas que están certificadas como instructores de estos programas son una opción razonable para enseñar el material del libro porque les ha sido enseñado y lo han estado aplicando en su tarea docente.\nThe Carpentries también forma trainers, que son las personas que forman a los instructores. Personas certificadas como trainers tienen un conocimiento más detallado de las prácticas pedagógicas presentadas en el libro y la experiencia de haber formado personas en estos temas."
  },
  {
    "objectID": "individual.html#sec-individual-strategies",
    "href": "individual.html#sec-individual-strategies",
    "title": "6  Aprendizaje individual",
    "section": "6.1 Seis estrategias",
    "text": "6.1 Seis estrategias\nLas/los psicólogas/os estudian el aprendizaje en una amplia variedad de formas, pero han llegado a conclusiones similares sobre qué funciona realmente Markovits and Weinstein (2018). Las/Los [Learning Scientists][learning-scientists] (Científicos/as del aprendizaje) han catalogado seis de estas estrategias y las resumieron en [una serie de afiches para descargar][learning-scientists-posters]Los afiches se encuentran en español, busca el botón posters in other languages en la web. Si enseñas estas estrategias a tus estudiantes, y las mencionas por su nombre cuando las utilices en la clase, estarás ayudando a que aprendan cómo aprender más rápido y mejor Weinstein, Madan, and Sumeracki (2018),Weinstein, Sumeracki, and Caviglioli (2018).\n\n6.1.1 Práctica distribuida\nDiez horas de estudio repartidas en cinco días es más efectivo que dos días de estudio con cinco horas, y mucho mejor que un día de diez horas. Por lo tanto, deberías crear un cronograma de estudio en el que distribuyas tus actividades de estudio a lo largo del tiempo: reserva al menos media hora para estudiar cada tema, cada día, en vez de amontonar todo para la noche antes del examen Kang (2016).\nTambién deberías revisar los materiales después de cada clase, pero no inmediatamente después—toma al menos media hora de receso. Cuando repases, asegúrate de incluir aunque sea un pequeño porcentaje del material anterior: por ejemplo, utiliza veinte minutos para revisar las notas de la clase de hoy y luego cinco minutos para revisar material de los días anteriores y de la semana pasada. Esto te ayudará a identificar algún vacío o errores en tus apuntes previos cuando todavía haya tiempo para corregirlos o hacer preguntas: es doloroso darse cuenta la noche del examen de que no tienes idea por qué subrayaste “¡¡Evaluación no estándar!!” tres veces.\nAl repasar, haz notas sobre las cosas que te hayas olvidado: por ejemplo, haz una tarjeta de memoria para cada concepto que no pudiste recordar o que recordaste incorrectamente Matthes (2019). Esto te ayudará a enfocarte en aquello que necesite más atención cuando vuelvas a estudiar.\n\n6.1.2 El valor de las clases magistrales\nSegún Miller (2016), “Las clases magistrales que predominan en los cursos presenciales son formas relativamente ineficientes de enseñar, pero probablemente contribuyen a distribuir el material en los momentos correctos, porque se desenvuelven en un cronograma pre-establecido. Por el contrario, dependiendo de cómo se organicen los cursos, las/los estudiantes en línea a veces pueden evitar exponerse al material por completo hasta que una tarea esté cerca.”\n\n\n\n6.1.3 La práctica de recordar lo aprendido\nEl factor limitante de la memoria a largo plazo no es retener (qué se almacena) sino recordar (qué puede accederse). La habilidad de recordar una información específica puede entrenarse, asi que para mejorar los resultados en situaciones reales es útil hacer exámenes de práctica o resumir en detalle un tema de memoria y luego revisar qué has recordado y qué no. Por ejemplo, Karpicke and Roediger (2008) encontró que hacer exámenes de forma repetida mejora el recuerdo de listas de palabras, de un 35% a un 80%.\nLa habilidad de recordar mejora cuando en la práctica se utilizan actividades similares a las que se evalúan. Por ejemplo, escribir entradas en un diario personal ayuda con las preguntas de opción múltiple, aunque menos que hacer exámenes de práctica Miller (2016). Este fenómeno se llama transferencia apropiada de procesamiento.\nUna manera de ejercitar las habilidades para recordar es resolver un mismo problema dos veces. La primera vez, hacerlo completamente de memoria, sin notas o discusiones con pares. Después de evaluar tu propio trabajo con una rúbrica de respuestas distribuidas por la/el docente, resuelve el problema de nuevo, utilizando el material de apoyo que quieras. La diferencia entre ambos te muestra qué tan bien pudiste recordar y aplicar el conocimiento.\nOtro método (mencionado previamente) es crear tarjetas de estudio. Las tarjetas físicas tienen una pregunta en un lado y la respuesta en el otro, y existen muchas aplicaciones para generarlas disponibles para teléfono móvil. Si estás estudiando en grupo, intercambiar las tarjetas de estudio con tus colegas te ayudará a descubrir ideas importantes que tal vez habías obviado o malinterpretado.\nLeer-cubrir-recordar{leer-cubrir-recordar} es una alternativa rápida a las tarjetas de estudio. Mientras lees algo, cubre los términos clave o secciones con notas adhesivas pequeñas. Cuando hayas terminado, vuelve a leer y ve qué tan bien puedes adivinar las palabras cubiertas por las notas adhesivas. Independientemente del método que uses, no sólo practiques recordar datos y definiciones: asegúrate de evaluar la comprensión de grandes ideas y de las conexiones entre ellas. Una forma rápida de hacer esto es diseñar un mapa conceptual y compararlo con tus apuntes o con un mapa conceptual dibujado previamente.\n\n6.1.4 Hipercorrección\nUn descubrimiento poderoso en la investigación del aprendizaje es el fenómeno de hipercorrección Metcalfe (2016). A la mayoría de las personas no le gusta que le digan cuando dicen algo incorrecto, así que sería razonable asumir que mientras más confianza tenga una persona en la respuesta que da en un examen, más difícil será cambiar su opinión si el resultado era incorrecto. Y resulta que lo opuesto es cierto: mientras más confianza tenga una persona en que tiene la razón, más probable será que no repita el error si recibe una corrección.\n\n\n\n6.1.5 Práctica intercalada\nUna forma de espaciar la práctica es intercalar el estudio de diferentes temas: en vez de dominar un tema, luego el segundo y el tercero, alterna las sesiones de estudio. Aún mejor, cambia el orden: A-B-C-B-A-C es mejor que A-B-C-A-B-C, que a la vez es mejor que A-A-B-B-C-C Rohrer, Dedrick, and Stershic (2015). Esto funciona porque intercalar permite la creación de más vínculos entre los diferentes temas, lo cual mejora el aprendizaje.\nCuánto deberías tardar en cada ítem depende del tema y de qué tan bien lo conozcas. Entre 10 y 30 minutos es un tiempo suficiente para entrar en tema (Section 6.2) pero no para deambular. Al principio, intercalar el estudio parecerá más difícil que enfocarse en un único tema, pero ese es un signo de que está funcionando. Si usas tarjetas de estudio o haces exámenes de práctica para medir tu progreso, deberías ver una mejora después de un par de días.\n\n\n6.1.6 &lt;span i=“elaboración (estrategia de aprendizaje);”estrategia de aprendizaje!elaboración”“&gt;Elaboración\nExplicarte los temas a tí misma/o mientras estudias permite entenderlos y recordarlos. Una forma de hacer esto es complementar la respuesta en un examen práctico con la explicación de por qué la respuesta es correcta o, al contrario, con una explicación de por qué otras respuestas plausibles no serían correctas. Otra alternativa es decirte a tí misma/o cómo una nueva idea es similar o diferente a una que ya hayas visto previamente.\nSi bien hablarte a tí misma/o puede parecer una forma extraña de estudiar, Bielaczyc, Pirolli, and Brown (1995) encontró que las personas entrenadas en auto-explicarse destacan cuando se comparan con quienes no se entrenaron. De manera similar, Chi et al. (1989) encontró que algunas/os estudiantes simplemente frenan cuando se encuentran con un paso que no entienden al tratar de resolver problemas. Otras personas paran y generan una explicación de lo que está pasando: así aprenden más rápido. Un ejercicio para construir esta habilidad es revisar un ejemplo de programación línea por línea con una clase, de modo que diferentes personas expliquen cada línea y digan por qué está ahí y qué es lo que produce.\n\n\n6.1.7 Ejemplos concretos\nUna forma particularmente útil de la estrategia de aprendizaje de elaboración es el uso de ejemplos concretos. Cuando se tiene una definición de un principio general, intenta proveer uno o más ejemplos de su uso o, por el contrario, toma un problema en particular y enuncia los principios generales que representa. Rawson, Thomas, and Jacoby (2014) encontró que intercalar ejemplos y definiciones de esta forma permite que las/los estudiantes puedan recordar las definiciones correctamente.\nUna forma estructurada de hacer esto es con el [método ADEPT][adept]: da una Analogía, dibuja un Diagrama, presenta un Ejemplo, describe la idea en un lenguaje Sencillo (del inglés “Plain Language”), y luego da los detalles Técnicos. De nuevo, si estás estudiando con otra persona o en grupo, puedes intercambiar y revisar el trabajo: ve si estás de acuerdo con el ejemplo que tus pares eligieron para representar el principio que se está discutiendo, o analiza qué principios se usan en un ejemplo que no hayan anotado.\nOtra técnica útil es &lt;span i=“enseñar por contraste (patrón de lección);”patrón de lección!enseñar por contraste”“&gt;enseñar por contraste,\np.ej. mostrar a tus estudiantes cuál no es la solución o cuál es la técnica que no resolverá un problema. Por ejemplo, al mostrar a las/los niñas/os cómo simplificar fracciones, es importante darles a menos un par de ejemplos que no puedan simplificarse, como 5/7, para que no se frustren buscando respuestas que no existen.\n\n\n6.1.8 &lt;span i=“codificación dual (estrategia de aprendizaje);”extrategia de aprendizaje!codificación dual”“&gt;Codificación Dual\nLa última de las seis estrategias principales descriptas en [Learning Scientists][learning-scientists] es presentar palabras e imágenes juntas. Como discutimos en la Section 5.1, diferentes subsistemas en nuestro cerebro manejan y almacenan la información lingüística y visual, de tal manera que, si se presenta información complementaria por ambos canales, se refuerzan mutuamente. Sin embargo, aprender es menos efectivo cuando la misma información se presenta de forma simultánea por dos canales diferentes, porque el cerebro tiene que hacer un esfuerzo para comparar los canales entre sí Mayer and Moreno (2003).\nUna forma de aprovechar la codificación dual es dibujar o etiquetar líneas de tiempo, mapas o árboles familiares, o cualquier otro material que sea relevante. (Personalmente, me gustan las imágenes que muestran qué funciones llaman a qué otras en un programa.) Dibujar un diagrama sin etiquetas, y después volver atrás para etiquetarlo, es una práctica excelente para recordar."
  },
  {
    "objectID": "individual.html#sec-individual-time",
    "href": "individual.html#sec-individual-time",
    "title": "6  Aprendizaje individual",
    "section": "6.2 Gestión del tiempo",
    "text": "6.2 Gestión del tiempo\nSolía presumir sobre la cantidad de horas que trabajaba. No en muchas palabras, obviamente—tenía algunas habilidades sociales—pero me presentaba en clases alrededor del mediodía, sin rasurar y bostezando, y casualmente mencionaba a quien sea que pudiera escuchar que había trabajado toda la noche.\nHaciendo memoria, no puedo recordar a quién trataba de impresionar. Pero lo que sí recuerdo es que tuve que desechar gran parte del trabajo que hice durante esas trasnochadas una vez que lo revisé después de dormir un poco. Para peor, el trabajo que no descarté le hizo bastante daño a mis calificaciones.\nMi error fue confundir “trabajar” con “ser productivo.” No puedes producir software (o cualquier otra cosa) sin hacer algo de trabajo, pero se puede hacer mucho trabajo sin producir nada de valor. Convencer de esto a otras personas es difícil, especialmente cuando son adolescentes o tienen alrededor de veinte años, pero paga tremendos dividendos.\nLos estudios científicos sobre el trabajo en exceso y la deprivación del sueño se remontan, al menos, a la década de 1890s—puedes ver Robinson (2005) para un resumen breve y legible. Los resultados más importantes para estudiantes son:\n\nTrabajar más de 8 horas al día por un periodo extendido de tiempo disminuye la productividad total, no sólo la productividad por hora —es decir, haces menos en total (no sólo por hora) cuando tienes trabajo acumulado y estás cerca de una fecha límite de entrega.\nTrabajar durante 21 horas seguidas aumenta la posibilidad de que tengas un error catastrófico tanto como estar legalmente en estado de ebriedad.\nLa productividad varía a lo largo de la jornada laboral, con la mayor productividad en las primeras 4 a 6 horas. Después de cierta cantidad de horas, la productividad disminuye a cero; y eventualmente se vuelve negativa.\n\nEstos hechos se han reproducido y verificado durante más de un siglo, y los datos detrás de ellos son tan sólidos como los que relacionan el tabaquismo con el cáncer de pulmón. El problema es que las personas generalmente no notan que sus habilidades disminuyen. Al igual que las personas que en estado de ebriedad creen que todavía pueden conducir, las personas que están deprivadas de sueño no se dan cuenta de que no están terminando sus oraciones (o pensamientos). Se ha demostrado que cinco días de 8 horas por semana maximizan la producción total a largo plazo en todas las industrias que se han analizado; estudiar o programar no es diferente.\nPero, ¿qué pasa con las rachas que surgen de vez en cuando, como trabajar toda la noche para cumplir con un plazo? Eso también se ha estudiado y los resultados no son agradables. La habilidad de pensar disminuye en un 25% por cada 24 horas sin dormir. Puesto de otra forma, el coeficiente intelectual de una persona promedio es sólo 75 después de una trasnochada, lo que la desplaza al 5% inferior de la población. Si haces dos trasnochadas seguidas, tu coeficiente intelectual es de 50, que es el nivel en el que las personas suelen ser consideradas incapaces de vivir de forma independiente.\n“Pero—pero—, ¡tengo tantas tareas que hacer!” dices. “¡Y todas tienen que ser entregadas al mismo tiempo! ¡Tengo que trabajar horas extra para completarlas!” No: para ser productivas las personas tienen que priorizar tareas y enfocarse, lo cual se les debe enseñar. Una técnica ampliamente utilizada es hacer una lista de tareas a hacer, organizadas por prioridad, y luego desconectarse del correo electrónico u otras interrupciones por 30–60 minutos y completar una de esas tareas. Si una de las tareas de la lista lleva más de una hora, sepárala en actividades más pequeñas y priorízalas de forma separada.\nLa parte más importante de esto es apagar las interrupciones. A pesar de lo que mucha gente quiere creer, los seres humanos no somos buenos haciendo múltiples tareas a la vez. En lo que sí podemos volvernos buenos es en la automaticidad, es decir, la habilidad de hacer algo de forma rutinaria de fondo, mientras realizamos otra tarea Miller (2016). La mayoría de las personas puede hablar mientras corta una cebolla, o tomar café mientras lee; con la práctica, también podemos tomar notas mientras escuchamos, pero no podemos estudiar de forma efectiva, programar o hacer otra tarea mentalmente exigente mientras prestamos atención a algo más—solo creemos que podemos.\nEl objetivo de organizarse y prepararse es entrar en el estado mental más productivo posible. Las/los psicólogas/os lo llaman flujo Csikszentmihaly (2008); las/los atletas lo llaman “estar en la zona,” y las/los músicos hablan de perderse en lo que están tocando. Cualquiera sea el nombre que uses, las personas producen mucho más por unidad de tiempo en este estado que en un estado normal. La mala noticia es que se tarda aproximadamente 10 minutos en volver a entrar en este estado después de tener una interrupción, sin importar lo corta que haya sido la interrupción. Lo que significa que si te interrumpieron seis veces por hora, nunca llegaste al máximo de tu productividad.\n\n6.2.1 ¿Cómo lo supo?\nEn su breve historia en 1961 “[Harrison Bergeron][bergeron-harrison]”, Kurt Vonnegut describió un futuro en el que las personas están obligadas a ser iguales. Las personas atractivas tienen que usar máscaras, las personas atléticas tienen que cargar pesas—y las personas inteligentes están obligadas a llevar radios que interrumpen sus pensamientos en intervalos aleatorios. A veces me pregunto si—oh, un momento, mi teléfono acaba de—perdón, ¿de qué estábamos hablando?"
  },
  {
    "objectID": "individual.html#individual-peer",
    "href": "individual.html#individual-peer",
    "title": "6  Aprendizaje individual",
    "section": "6.3 Evaluación de pares",
    "text": "6.3 Evaluación de pares\nPedirle a las personas de un equipo que evalúen a sus pares es una práctica común en la industria. Søndergaard and Mulder (2012) revisaron la literatura sobre evaluación de pares, distinguiendo entre calificar y evaluar. Descubrieron que la evaluación de pares aumentaba la cantidad, la diversidad y la puntualidad de la retroalimentación, ayudaba a las/los estudiantes a ejercitar el pensamiento de nivel superior, fomentaba la práctica reflexiva, y promovía el desarrollo de habilidades sociales. Las preocupaciones fueron predecibles: validez y confiabilidad, motivación y procrastinación, agresión, confabulación y plagio.\nSin embargo, la evidencia muestra que estas preocupaciones no fueron significativas en la mayoría de las clases. Por ejemplo, Kaufman and Felder (2000) comparó las evaluaciones y calificaciones confidenciales de pares en varios ejes para dos cursos en licenciatura en ingeniería, y descubrió que la auto-calificación y la evaluación de pares tuvo una concordancia estadística, que la confabulación no fue significativa (es decir, no dieron irrespectivamente la nota más alta a todos sus pares), que las/los estudiantes no inflaron sus auto-calificaciones y, lo más importante, que las calificaciones no estaban sesgadas por cuestiones de género ni por racismo.\nUna forma de implementar la evaluación de pares es contribuyendo a la pedagogía estudiantil, en la cual tus estudiantes producen artefactos para contribuir al aprendizaje de otros. Esto puede hacerse desarrollando una lección corta y compartiéndola con la clase, contribuir a un banco de preguntas, o escribir notas de una lección en particular para una publicación durante la clase. Por ejemplo, Frank-Bolton and Simha (2018) evidenció que las/los estudiantes que realizan videos cortos para enseñar conceptos a sus pares tuvieron un incremento significativo de su propio aprendizaje comparado al de aquellas personas que sólo estudiaron el material o vieron los videos. He observado que pedir a diario a mis estudiantes que compartan a la clase un error en su código y cómo lo solucionaron ayuda en sus habilidades analíticas y disminuye su síndrome del impostor/a.\nOtra alternativa es la revisión por pares calibrada, en la cual tus estudiantes revisan uno o más ejemplos utilizando una rúbrica y comparan su evaluación con la evaluación del cuerpo docente Kulkarni et al. (2013). Una vez que la evaluación de tu estudiante sea similar a la del cuerpo docente, pueden empezar a evaluar el trabajo de sus pares. Si se combinan muchas evaluaciones de pares, este método puede ser tan preciso como la evaluación del cuerpo docente Paré and Joordens (2008).\nComo todo lo demás, la evaluación es ayudada por rúbricas. La planilla de evaluación de la Section 24.2 muestra un ejemplo para que puedas empezar. Para usarla, evalúate y luego evalúa a tus colegas, luego calcula y compara las notas. Una diferencia grande generalmente indica la necesidad de más conversación."
  },
  {
    "objectID": "individual.html#sec-individual-exercises",
    "href": "individual.html#sec-individual-exercises",
    "title": "6  Aprendizaje individual",
    "section": "6.4 Ejercicios",
    "text": "6.4 Ejercicios\n\n6.4.1 Estrategias de aprendizaje (individual/20’)\n\n¿Cuál de las seis estrategias de aprendizaje generalmente usas? ¿Cuáles generalmente no usas?\nEscribe tres conceptos generales que quieras que tus estudiantes aprendan y da dos ejemplos específicos para cada caso (practica ejemplos concretos). Para cada uno de estos conceptos, trabaja al revés: parte de uno de los ejemplos y elabora sobre el concepto que lo explica (elaboración).\n\n\n\n6.4.2 Conectando ideas (parejas/5’)\nEste ejercicio es un ejemplo de utilizar la elaboración para mejorar la retención. Tú y tu pareja deben elegir una idea de manera independiente. Luego de contarse sus ideas, trata de encontrar una cadena de cuatro eslabones que las conecte.\nPor ejemplo, si las dos ideas son “Titicaca” y “estadística,” los eslabones pueden ser:\n\nEl lago Titicaca se encuentra en territorios de Bolivia y Perú;\nBolivia y Perú son países;\nlos países tienen gobiernos;\nlos gobiernos utilizan estadísticas para analizar la opinión pública.\n\n\n\n6.4.3 Evolución convergente (parejas/15’)\nUna práctica que no hemos abordado anteriormente son las notas guiadas. Se trata de notas preparadas por la/el docente, quien solicita a sus estudiantes que respondan preguntas respecto a la información clave de una clase magistral o discusión. Estas preguntas pueden ser espacios en blancos donde tus estudiantes agregan información, asteriscos junto a términos que deben definir, etcétera.\nCrea entre dos y cuatro tarjetas con notas guiadas para una lección que hayas enseñado recientemente o que vas a enseñar. Intercambia tarjetas con tu colega: ¿Qué tan fácil es entender lo que se está preguntando? ¿Cuánto tiempo te lleva completar las respuestas? ¿Qué tan bien funciona esto para ejemplos de programación?\n\n\n6.4.4 Cambiando de opinión (parejas/10’)\nKirschner and van Merriënboer (2013) argumentan que los mitos sobre personas nativas digitales, estilos de aprendizaje, y personas autodidactas se derivan de una misma creencia equivocada: que las/los estudiantes saben lo que es mejor para ellas/os. Los autores advierten que podemos estar en una espiral descendente en la que todos los intentos de las personas que investigan en educación para refutar estos mitos, confirmen la creencia de sus oponentes de que la ciencia de aprendizaje es pseudociencia. Elige algo que hayas aprendido hasta ahora en este libro, que te haya sorprendido o haya contradecido algo que creías previamente, y practica explicar esa idea a tu colega en 1–2 minutos. ¿Cuán convincente eres?\n\n\n6.4.5 Tarjetas de estudio (individual/15’)\nUtiliza notas adhesivas, o algo similar que tengas a mano, para hacer seis tarjetas de estudio para un tema que recientemente hayas enseñado o aprendido. Intercambia con tu colega y ve cuánto tiempo tardas en recordar al 100% cada tarjeta. Deja las tarjetas a un lado cuando termines y vuelve media hora después para evaluar cuál es tu tasa de retención.\n\n\n6.4.6 Utilizando ADEPT (toda la clase/15’)\nElige un tema que recién hayas enseñado o aprendido, y delinea una pequeña lección que utilice los cinco pasos del método ADEPT para introducir el tema.\n\n\n6.4.7 El costo de la multitarea (parejas/10’)\n[El blog de The Learning Scientists][learning-scientists-blog] describe un experimento simple que puedes hacer con solo un cronómetro para demostrar el costo de hacer múltiples tareas a la vez. En parejas, mide cuánto tarda cada persona en hacer cada una de estas tres tareas:\n\nContar del 1 al 26 dos veces.\nRecitar el alfabeto de la A a la Z dos veces.\nIntercalar números y letras, es decir, “1, A, 2, B, …” y continuar.\n\nLuego, cada pareja informa sus tiempos a la clase. Sin práctica específica, intercalar números y letras siempre toma significativamente más tiempo que cada uno de los componentes por separado.\n\n\n6.4.8 Mitos en la educación de computación (toda la clase/20’)\nGuzdial (2015) presenta una lista de las 10 creencias erróneas más comunes sobre educación en computación, que incluye:\n\nLa ausencia de mujeres en ciencias de la computación es similar a lo que ocurre en otras áreas de ciencias, tecnología, ingeniería y matemáticas.\nPara tener más mujeres en las ciencias de la computación necesitamos más docentes mujeres en el área.\nLas evaluaciones de estudiantes son la mejor forma de evaluar la enseñanza.\nLas/los buenas/os docentes personalizan la educación a los estilos de aprendizaje de sus estudiantes.\nLas/los buenas/os docentes en ciencias de la computación deberían modelar buenas prácticas de desarrollo de software porque su trabajo es producir ingenieras/os de software excelentes.\nAlgunas personas son naturalmente mejores programadoras que otras.\n\nCada persona de la clase es invitada a votar +1 (de acuerdo), -1 (en desacuerdo) o 0 (neutro) para cada punto. Luego, la/el docente lee la explicación completa en [el artículo original][guzdial-myths] y se vuelve a hacer la votación. ¿En cuáles preguntas las personas cambiaron de parecer? ¿Cuáles todavía creen que son verdad, y por qué?\n\n\n6.4.9 Revisión por pares calibrada (parejas/20’)\n\nCrea una rúbrica de 5–10 puntos con entradas como “buenos nombres de variables,” “sin código redundante,” y “flujo de control propiamente anidado” para calificar el tipo de programa que esperarías que tus estudiantes escriban.\nElige o crea un pequeño programa que contenga 3–4 violaciones a estas entradas.\nCalifica el programa de acuerdo a la rúbrica.\nPide a tu colega que califique el mismo programa con la misma rúbrica. ¿Qué aceptó tu colega pero tú no aceptaste? ¿Qué criticó tu colega pero tú no criticaste?"
  },
  {
    "objectID": "individual.html#sec-individual-revision",
    "href": "individual.html#sec-individual-revision",
    "title": "6  Aprendizaje individual",
    "section": "6.5 Revisión",
    "text": "6.5 Revisión\n\n\n\nConceptos: Aprendizaje activo\n\n\n\n\n\n\nBielaczyc, Katerine, Peter L. Pirolli, and Ann L. Brown. 1995. “Training in Self-Explanation and Self-Regulation Strategies: Investigating the Effects of Knowledge Acquisition Activities on Problem Solving.” Cognition and Instruction 13 (2): 221–52. https://doi.org/10.1207/s1532690xci1302_3.\n\n\nChi, Michelene T. H., Miriam Bassok, Matthew W. Lewis, Peter Reimann, and Robert Glaser. 1989. “Self-Explanations: How Students Study and Use Examples in Learning to Solve Problems.” Cognitive Science 13 (2): 145–82. https://doi.org/10.1207/s15516709cog1302_1.\n\n\nCsikszentmihaly, Mihaly. 2008. Flow: The Psychology of Optimal Experience. Harper.\n\n\nFrank-Bolton, Pablo, and Rahul Simha. 2018. “Docendo Discimus: Students Learn by Teaching Peers Through Video.” In 2018 Technical Symposium on Computer Science Education (SIGCSE’18). Association for Computing Machinery (ACM). https://doi.org/10.1145/3159450.3159466.\n\n\nFreeman, S., S. L. Eddy, M. McDonough, M. K. Smith, N. Okoroafor, H. Jordt, and M. P. Wenderoth. 2014. “Active Learning Increases Student Performance in Science, Engineering, and Mathematics.” Proc. National Academy of Sciences 111 (23): 8410–15. https://doi.org/10.1073/pnas.1319030111.\n\n\nGick, Mary L., and Keith J. Holyoak. 1987. “The Cognitive Basis of Knowledge Transfer.” In Transfer of Learning: Contemporary Research and Applications, edited by S. J. Cormier and J. D. Hagman, 9–46. Elsevier. https://doi.org/10.1016/b978-0-12-188950-0.50008-4.\n\n\nGuzdial, Mark. 2015. “Top 10 Myths about Teaching Computer Science.” https://cacm.acm.org/blogs/blog-cacm/189498-top-10-myths-about-teaching-computer-science/fulltext.\n\n\nKang, Sean H. K. 2016. “Spaced Repetition Promotes Efficient and Effective Learning.” Policy Insights from the Behavioral and Brain Sciences 3 (1): 12–19. https://doi.org/10.1177/2372732215624708.\n\n\nKarpicke, Jeffrey D., and Henry L. Roediger. 2008. “The Critical Importance of Retrieval for Learning.” Science 319 (5865): 966–68. https://doi.org/10.1126/science.1152408.\n\n\nKaufman, Deborah B., and Richard M. Felder. 2000. “Accounting for Individual Effort in Cooperative Learning Teams.” Journal of Engineering Education 89 (2).\n\n\nKirschner, Paul A., and Jeroen J. G. van Merriënboer. 2013. “Do Learners Really Know Best? Urban Legends in Education.” Educational Psychologist 48 (3): 169–83. https://doi.org/10.1080/00461520.2013.804395.\n\n\nKulkarni, Chinmay, Koh Pang Wei, Huy Le, Daniel Chia, Kathryn Papadopoulos, Justin Cheng, Daphne Koller, and Scott R. Klemmer. 2013. “Peer and Self Assessment in Massive Online Classes.” ACM Transactions on Computer-Human Interaction 20 (6): 1–31. https://doi.org/10.1145/2505057.\n\n\nMarkovits, Rebecca A., and Yana Weinstein. 2018. “Can Cognitive Processes Help Explain the Success of Instructional Techniques Recommended by Behavior Analysts?” NPJ Science of Learning 3 (1). https://doi.org/10.1038/s41539-017-0018-1.\n\n\nMatthes, Eric. 2019. Python Flash Cards: Syntax, Concepts, and Examples. No Starch Press.\n\n\nMayer, Richard E., and Roxana Moreno. 2003. “Nine Ways to Reduce Cognitive Load in Multimedia Learning.” Educational Psychologist 38 (1): 43–52. https://doi.org/10.1207/s15326985ep3801_6.\n\n\nMcGuire, Saundra Yancey. 2015. Teach Students How to Learn: Strategies You Can Incorporate into Any Course to Improve Student Metacognition, Study Skills, and Motivation. Stylus Publishing.\n\n\nMetcalfe, Janet. 2016. “Learning from Errors.” Annual Review of Psychology 68 (1): 465–89. https://doi.org/10.1146/annurev-psych-010416-044022.\n\n\nMiller, Michelle D. 2016. Minds Online: Teaching Effectively with Technology. Harvard University Press.\n\n\nMiyatsu, Toshiya, Khuyen Nguyen, and Mark A. McDaniel. 2018. “Five Popular Study Strategies: Their Pitfalls and Optimal Implementations.” Perspectives on Psychological Science 13 (3): 390–407. https://doi.org/10.1177/1745691617710510.\n\n\nNational Academies of Sciences, Engineering, and Medicine. 2018. How People Learn II: Learners, Contexts, and Cultures. National Academies Press.\n\n\nParé, Dwayne E., and Steve Joordens. 2008. “Peering into Large Lectures: Examining Peer and Expert Mark Agreement Using peerScholar, an Online Peer Assessment Tool.” Journal of Computer Assisted Learning 24 (6): 526–40. https://doi.org/10.1111/j.1365-2729.2008.00290.x.\n\n\nRawson, Katherine A., Ruthann C. Thomas, and Larry L. Jacoby. 2014. “The Power of Examples: Illustrative Examples Enhance Conceptual Learning of Declarative Concepts.” Educational Psychology Review 27 (3): 483–504. https://doi.org/10.1007/s10648-014-9273-3.\n\n\nRobinson, Evan. 2005. “Why Crunch Mode Doesn’t Work: 6 Lessons.” http://www.igda.org/articles/erobinson_crunch.php; International Game Developers Association (IGDA).\n\n\nRohrer, Doug, Robert F. Dedrick, and Sandra Stershic. 2015. “Interleaved Practice Improves Mathematics Learning.” Journal of Educational Psychology 107 (3): 900–908. https://doi.org/10.1037/edu0000001.\n\n\nSala, Giovanni, and Fernand Gobet. 2017. “Does Far Transfer Exist? Negative Evidence from Chess, Music, and Working Memory Training.” Current Directions in Psychological Science 26 (6): 515–20. https://doi.org/10.1177/0963721417712760.\n\n\nSøndergaard, Harald, and Raoul A. Mulder. 2012. “Collaborative Learning Through Formative Peer Review: Pedagogy, Programs and Potential.” Computer Science Education 22 (4): 343–67. https://doi.org/10.1080/08993408.2012.728041.\n\n\nWeinstein, Yana, Christopher R. Madan, and Megan A. Sumeracki. 2018. “Teaching the Science of Learning.” Cognitive Research: Principles and Implications 3 (1). https://doi.org/10.1186/s41235-017-0087-y.\n\n\nWeinstein, Yana, Megan Sumeracki, and Oliver Caviglioli. 2018. Understanding How We Learn: A Visual Guide. Routledge."
  },
  {
    "objectID": "classroom.html#sec-classroom-coc",
    "href": "classroom.html#sec-classroom-coc",
    "title": "10  En el salón de clase",
    "section": "10.1 Hacer cumplir el Código de Conducta",
    "text": "10.1 Hacer cumplir el Código de Conducta\nLo más importante que he aprendido sobre enseñar en los últimos 30 años es la importancia de tratar a las demás personas con respeto, tanto dentro como fuera de la clase. Si usas este material de alguna manera, por favor adopta un Código de Conducta como el del Chapter 20 y exige a toda persona que participe en tus clases que lo respete. No puedes evitar que las personas sean ofensivas, de la misma manera que las leyes contra el robo no evitan que las personas roben, pero puedes dejar claras las expectativas y las consecuencias, y señalar que estás tratando de que tu clase sea un lugar seguro y amigable para todas/os.\nUn Código de Conducta sólo es útil si se hace cumplir. Si crees que alguien ha violado el tuyo, puedes advertirle, pedirle que se disculpe, y/o expulsarla/o, dependiendo de la gravedad de la infracción y de si crees que fue intencional o no. Hagas lo que hagas:\n\nHazlo frente a testigos.\n\nLa mayoría de las personas bajarán el tono de su lenguaje y hostilidad en público, tener presente a alguien más asegura que la discusión posterior no degenere en afirmaciones contradictorias sobre quién dijo qué.\n\nSi expulsas a alguien, comunícalo al resto de la clase y explica por qué.\n\nEsto ayuda a evitar que los rumores se difundan y muestra que tu Código de Conducta realmente significa algo.\n\nEnvía un correo electrónico a la persona infractora tan pronto como puedas\n\npara resumir lo que sucedió y los pasos que tomaste, y copia el mensaje a las/los anfitrionas/es del taller o a alguna/o de tus colegas docentes para que haya un registro contemporáneo de la conversación. Si la persona infractora responde, no participes en un debate largo: nunca es productivo.\n\n\nLo que sucede fuera de la clase importa al menos tanto como lo que sucede dentro de ella Partanen (2011), por lo que debes proporcionar una forma para que tus estudiantes puedan informar sobre los problemas que tú no puedes ver. Un paso es pedirle a alguien fuera de tu grupo que sea el primer punto de contacto; de esta manera, si alguien quiere presentar una queja sobre ti o alguno de tus colegas educadores, tiene cierta garantía de confidencialidad y acción independiente. Aurora and Gardiner (2019) tiene muchos otros consejos y es a la vez breve y práctico."
  },
  {
    "objectID": "classroom.html#sec-classroom-peer",
    "href": "classroom.html#sec-classroom-peer",
    "title": "10  En el salón de clase",
    "section": "10.2 Instrucción por pares",
    "text": "10.2 Instrucción por pares\nSin importar qué tan buena sea una persona enseñando, solo puede explicar una cosa a la vez. Entonces, ¿cómo puede aclarar muchos conceptos erróneos diferentes en un tiempo razonable? La mejor solución desarrollada hasta ahora es una técnica llamada instrucción por pares. Originalmente creada por Eric Mazur en Harvard Mazur (1996), se ha estudiado extensamente en una amplia variedad de contextos, incluida la programación Crouch and Mazur (2001),Porter et al. (2013), y Porter et al. (2016) descubrieron que las/los estudiantes valoran la instrucción de sus pares incluso en el primer contacto.\nLa instrucción por pares intenta proporcionar instrucción individualizada de manera escalable intercalando la evaluación formativa con la discusión entre estudiantes:\n\nHaz una breve introducción al tema.\nOfrece a tus estudiantes una pregunta de opción múltiple que investigue sus conceptos erróneos. (en lugar de evaluar el simple conocimiento de hechos).\nHaz que el conjunto de tus estudiantes responda la pregunta de opción múltiple.\n\nSi todas/os tus estudiantes tienen la respuesta correcta, continúa.\nSi todas/os tienen la misma respuesta incorrecta, aborda ese error específico.\nSi tienen una combinación de respuestas correctas e incorrectas, dales varios minutos para discutir entre ellas/os en grupos de 2 a 4, luego que vuelvan a votar.\n\n\nComo muestra [este video][video-concept-test], la discusión en grupo mejora significativamente la comprensión de las/los estudiantes porque descubre lagunas en sus razonamientos y obliga a que aclaren sus pensamientos. Entonces, volver a sondear a la clase permite que la/el docente averigüe si puede continuar o si se necesitan más explicaciones. Después de presentar la respuesta correcta, una ronda de explicación adicional le da a las/los estudiantes una oportunidad más para solidificar su comprensión.\nPero, ¿podría ser esto un falso positivo? ¿Los resultados están mejorando debido a una mayor comprensión durante la discusión o simplemente por un efecto de seguimiento de quien lidera el grupo (“vota como Andrea, ella siempre tiene la razón”)? Smith et al. (2009) evaluaron esta cuestión: luego de la primera pregunta, hicieron una segunda pregunta que las/los estudiantes respondieron individualmente. Descubrieron que la discusión entre pares mejora la comprensión, incluso cuando ninguna de las personas en un grupo de discusión sabía originalmente la respuesta correcta. Siempre que exista diversidad de opiniones dentro del grupo, sus conceptos erróneos se anulan.\n\n10.2.1 Tomar posición\nEs importante que tus estudiantes voten públicamente para que no puedan cambiar de opinión después y racionalizarlo con excusas como: “Acabo de interpretar mal la pregunta.” Gran parte del valor de la instrucción por pares proviene de la hipercorrección: obtener la respuesta incorrecta y tener que pensar en las razones del porqué de esta respuesta (Section 6.1)."
  },
  {
    "objectID": "classroom.html#sec-classroom-together",
    "href": "classroom.html#sec-classroom-together",
    "title": "10  En el salón de clase",
    "section": "10.3 Enseñar en comunidad",
    "text": "10.3 Enseñar en comunidad\nCo-enseñar describe cualquier situación en la que dos docentes trabajan juntas/os en la misma clase. Friend and Cook (2016) describen muchas formas de hacer esto, ejemplificadas con docentes A y B:\n\nEnseñar en equipo:\n\nAmbas/os docentes entregan un único flujo de contenido en conjunto, turnándose como dos músicas/os haciendo solos.\n\nEnseñar y ayudar:\n\nLa/el docente A enseña mientras B se mueve por el aula para ayudar a estudiantes con dificultades.\n\nEnseñanza alternativa:\n\nLa/el docente A proporciona a un pequeño grupo de estudiantes una instrucción más intensiva o especializada mientras B ofrece una lección general al grupo principal.\n\nEnseñar y observar:\n\nLa/el docente A enseña mientras B observa a los estudiantes y recopila datos sobre su comprensión para ayudar a planificar las futuras lecciones.\n\nEnseñanza paralela:\n\nLa clase se divide en dos. Las/los docentes presentan el mismo material simultáneamente a cada grupo.\n\nEnseñanza por estaciones:\n\nLas/los estudiantes se dividen en pequeños grupos que rotan de una estación o actividad a la siguiente, mientras las/los docentes supervisan donde sea necesario.\n\n\nTodos estos modelos crean más oportunidades para la transferencia involuntaria de conocimiento que la enseñanza por sí sola. Enseñar en equipo es particularmente beneficioso en talleres de un día: cada docente tendrá la oportunidad de descansar su voz y se reduce el riesgo de que al final del día el agotamiento sea tan grande que comience a hablar bruscamente con sus estudiantes o a manipularles el teclado.\n\n10.3.1 Ayudar\nMuchas personas que no se sienten cómodas enseñando están dispuestas y son capaces de brindar asistencia técnica en clase. Pueden ayudar a las/los estudiantes con la configuración e instalación de programas, responder preguntas técnicas durante los ejercicios, supervisar la sala para detectar personas que puedan necesitar ayuda o poner atención a las notas compartidas (Section 10.7), y responder preguntas o recordar que la/el docente lo haga durante los descansos.\nLas/los ayudantes a veces son personas que se están capacitando para convertirse en docentes (es decir, son la/el docente B en el modelo de enseñar y apoyar), pero también pueden ser parte del personal de apoyo técnico de la institución anfitriona, ex estudiantes de la clase o estudiantes avanzadas/os que ya conocen bien el material. Usar a estas/os últimas/os como ayudantes es doblemente efectivo: no solo es más probable que comprendan los problemas que tienen sus pares, sino que también evita que se aburran. El aburrimiento es contagioso, así que evitarlo ayuda a que toda la clase se mantenga comprometida: si un puñado de personas comienzan a dispersarse, las personas que las rodean seguirán su ejemplo.\n\nSi estás co-enseñando con una/un colega:\n\nToma de dos a tres minutos antes del comienzo de cada clase para confirmar quién está enseñando qué. Si tienen tiempo, intenten dibujar o revisar en conjunto un mapa conceptual.\nUsa ese tiempo para acordar también un par de señales de manos. “Vas demasiado rápido”, “habla”, “ese estudiante necesita ayuda” y “es hora de ir al baño” son todas útiles.\nCada persona debe enseñar durante al menos 10 a 15 minutos seguidos, ya que los estudiantes se distraen con cambios más frecuentes.\nLa persona que no está enseñando no debe interrumpir, ofrecer correcciones o elaboraciones, o hacer cualquier otra cosa que distraiga de lo que está haciendo o diciendo la persona que enseña. La única excepción es hacer preguntas guía si las/los estudiantes parecen pasivas/os o inseguras/os de sí mismas/os.\nCada persona debería tomarse un par de minutos antes de empezar la clase para ver lo que su co-docente va a enseñar después de su turno y entonces no presentar nada de ese material.\nLa persona que no está enseñando debe mantenerse comprometida con la clase, no debe hacer otra cosa, como ponerse al día con su correo electrónico. Supervisar las notas compartidas (Section 10.7), vigilar a las/los estudiantes para ver quién tiene dificultades, anotar algunos comentarios para dárselos a su co-docente en el próximo receso—cualquier cosa que contribuya a la lección es mejor que cualquier cosa que no lo haga.\n\nLo más importante es que, cuando termine la clase, quienes co-enseñan tomen unos minutos para felicitarse o compadecerse: tanto en la enseñanza como en la vida, la pena compartida disminuye y la alegría compartida aumenta."
  },
  {
    "objectID": "classroom.html#sec-classroom-prior",
    "href": "classroom.html#sec-classroom-prior",
    "title": "10  En el salón de clase",
    "section": "10.4 Evaluar conocimientos previos",
    "text": "10.4 Evaluar conocimientos previos\nCuanto más sepas sobre tus estudiantes antes de comenzar a enseñar, más podrás ayudarles. Dentro de un sistema escolar formal, los pre-requisitos de tu curso te darán información sobre lo que probablemente ya sepan. Sin embargo, en un entorno free-range, tus estudiantes pueden ser mucho más diversas/os, por lo que es posible que quieras hacerles una breve encuesta o cuestionario antes de la clase para averiguar qué conocimientos y habilidades tienen.\nPedir a las personas que se califiquen a sí mismas en una escala del 1 al 5 no tiene sentido porque cuanto menos saben las personas sobre un tema, con menor precisión pueden estimar sus conocimientos (?fig-classroom-dunning-kruger, de [Neurologica][dunning-kruger-critique]), un fenómeno llamado efecto Dunning-Kruger Kruger and Dunning (1999). Por el contrario, las personas que integran grupos sub-representados a menudo subestiman sus habilidades.\n{fig-classroom-dunning-kruger fig-alt = “el gráfico muestra una escala de 0 a 100 en el eje vertical y en el eje horizontal las etiquetas:”Primer cuartil”, “Segundo cuartil”, “Tercer cuartil” y “Cuarto cuartil”, en ese orden. Hay tres series graficadas, la correspondiente a la “habilidad percibida” en el primer cuartil toma valores entre 50 y 60 que son muy similares a los presentes en el segundo cuartil. El tercer cuartil presenta valores por encima de 60 y el cuarto cuartil valores cercanos a 80. La serie “puntaje recibido en la prueba”, copia de forma casi idéntica la serie “habilidad percibida”. La serie “puntuación real de la prueba” toma valores cercanos a 10 en el primer cuartil, valores cercanos a 30 en el segundo cuartil, cercanos a 60 en el tercer cuartil y entre 80 y 90 para el cuarto cuartil.” }\nEn lugar de pedirles a las personas que se autoevalúen, puedes preguntarles con qué facilidad podrían completar algunas tareas específicas. Sin embargo, hacer esto es arriesgado: la escuela entrena a las personas para que traten cualquier cosa que parezca un examen como algo que tienen que aprobar, en lugar de tomarlo como una oportunidad para dar forma a la instrucción. Si alguien responde “No sé” incluso a un par de preguntas en su pre-evaluación, podría concluir que tu clase es demasiado avanzada para su nivel. Por lo tanto, es posible que asustes a muchas de las personas que más deseas ayudar.\nLa Section 24.6 presenta un breve cuestionario de pre-evaluación que la mayoría de tus potenciales estudiantes no va a encontrar intimidante. Si usas este formulario o una herramienta parecida, trata de hacer un seguimiento a las personas que no respondan para averiguar por qué no lo hicieron. Además, compara tu evaluación con la que las personas hicieron de sí mismas, de modo de mejorar tus preguntas en el futuro."
  },
  {
    "objectID": "classroom.html#sec-classroom-mixed",
    "href": "classroom.html#sec-classroom-mixed",
    "title": "10  En el salón de clase",
    "section": "10.5 Planifica para habilidades mixtas",
    "text": "10.5 Planifica para habilidades mixtas\nSi tus estudiantes tienen niveles muy diversos de conocimientos previos, puedes terminar fácilmente en una situación en la que un tercio de tu clase se pierde y un tercio se aburre. Eso es insatisfactorio para toda la clase, pero hay algunas estrategias que puedes utilizar para manejar la situación:\n\nAntes de realizar un taller, comunica claramente su nivel a todas las personas mostrando algunos ejemplos de ejercicios que se les pediría que completen. Esto ayuda a tus potenciales participantes a evaluar el nivel de la clase de manera mucho más efectiva que un listado de temas.\nProporciona ejercicios adicionales que tus estudiantes puedan hacer a su propio ritmo, para que quienes estén más avanzadas/os no terminen temprano y se aburran.\nPon atención a las/los estudiantes que se están quedando atrás y actúa temprano para que no se frustren ni se den por vencidas/os.\nPide a tus estudiantes más avanzadas/os que ayuden a las personas que están a su lado (mira la Section 10.6 debajo).\n\nOtra forma en que puedes adaptarte si hay habilidades mixtas entre tus estudiantes es hacer que todas las personas trabajen en el material por su cuenta a su propio ritmo, como lo harían en un curso en línea pero simultáneamente, y contando con ayudantes que deambulan por la sala para despejar las dudas. Algunas personas llegarán tres o cuatro veces más lejos que otras cuando los talleres se realicen de esta manera, pero todas habrán tenido un día gratificante y desafiante.\n\n10.5.1 Falsas/os principiantes\nUna/Un falsa/o principiante{falso/a principiante} es alguien que ha estudiado un lenguaje previamente pero lo está aprendiendo de nuevo. Pueden ser indistinguibles de principiantes absolutas/os en las pruebas de pre-evaluación, pero avanzan mucho más rápido una vez que comienza la clase porque están volviendo a aprender en lugar de aprender por primera vez.\nSer una/un falsa/o principiante es a menudo una señal de privilegio de preparación Margolis et al. (2010). Las/los falsas/os principiantes son comunes en las clases de programación free-range. Por ejemplo, imaginemos una/un niña/o que pudo ir a un campamento de verano de robótica porque su familia tiene los recursos suficientes. Es posible que tenga un desempeño pobre en una pre-evaluación de conocimientos de programación porque el material no está fresco en su mente. Sin embargo, aún tiene una ventaja sobre una/un niña/o con un trasfondo menos afortunado. Las estrategias descriptas anteriormente pueden ayudar a nivelar el campo de juego en casos como este pero, nuevamente, la solución real es usar tu propio privilegio para abordar los factores externos a la clase que sean de mayor relevancia Partanen (2011).\n\nLo más importante es aceptar que no puedes ayudar a todo el curso todo el tiempo. Si reduces el ritmo para adaptarte a dos personas a quienes les está costando, estás fallando con las otras dieciocho personas. Del mismo modo, si dedicas unos minutos a hablar sobre un tema avanzado con una/un estudiante aburrida/o, el resto de la clase se sentirá excluida."
  },
  {
    "objectID": "classroom.html#sec-classroom-pair",
    "href": "classroom.html#sec-classroom-pair",
    "title": "10  En el salón de clase",
    "section": "10.6 Programación en parejas",
    "text": "10.6 Programación en parejas\nLa programación en parejas es una práctica de desarrollo de software en la que [dos personas programan juntas en una computadora][video-pair-programming]. Una persona (quien conduce) escribe, mientras que la otra (quien navega) ofrece comentarios y sugerencias, y ambas cambian de función varias veces por hora.\nLa programación en parejas es una práctica eficaz en el trabajo profesional Hannay et al. (2009) y también es una buena forma de enseñar: los beneficios incluyen una mayor tasa de éxito en los cursos introductorios, un mejor software y una mayor confianza de las/los estudiantes en sus soluciones. También hay evidencia de que estudiantes de grupos sub-representados se benefician incluso más que otros McDowell et al. (2006),Hanks et al. (2011),Porter et al. (2013),Celepkolu and Boyer (2018). Los pares pueden ayudarse mutuamente durante los ejercicios prácticos, aclarar los conceptos erróneos de la otra persona cuando se presenta la solución y discutir intereses comunes durante los descansos. Lo he encontrado particularmente útil en los cursos con habilidades mixtas, ya que las parejas son más homogéneas que los individuos.\nCuando utilices la programación en parejas, coloca a todas las personas en parejas, no solo a las/los estudiantes que tienen dificultades, para que nadie se sienta señalada/o. También es útil que las personas se sienten en lugares nuevos frecuentemente (y, por lo tanto, trabajen con diferentes personas) y que las personas cambien de rol dentro de cada pareja tres o cuatro veces por hora para que la personalidad más fuerte de cada pareja no domine la sesión.\nSi tus estudiantes usan la programación en parejas por primera vez, toma unos minutos para demostrar de qué se trata para que comprendan que no esperas que la persona que no tiene las manos en el teclado únicamente permanezca sentada y observe. Finalmente, diles que las personas que se enfocan en tratar de completar la tarea lo más rápido posible son menos justas al compartir Lewis and Shah (2015).\n\n10.6.1 Cambio de parejas\nLas/los docentes tienen opiniones encontradas sobre si se debería exigir a las personas que cambien de pareja a intervalos regulares. Por un lado, cambiar de parejas les da a todos la oportunidad de obtener nuevos conocimientos y hacer nuevas amistades. Por otro lado, trasladar las computadoras y los adaptadores de corriente a escritorios nuevos varias veces al día es desgastante y el cambio de parejas puede resultar incómodo para las personas más introvertidas. Dicho esto, Hannay et al. (2010) encontró una correlación débil entre los “cinco grandes” rasgos de personalidad y el rendimiento en la programación en parejas, aunque un estudio anterior Walle and Hannay (2009) encontró que las parejas cuyos integrantes tenían diferentes niveles de rasgos de personalidad se comunicaban con más frecuencia."
  },
  {
    "objectID": "classroom.html#sec-classroom-notetaking",
    "href": "classroom.html#sec-classroom-notetaking",
    "title": "10  En el salón de clase",
    "section": "10.7 Tomar notas…¿juntas/os?",
    "text": "10.7 Tomar notas…¿juntas/os?\nLa toma de notas es una forma de elaboración en tiempo real (Section 6.1): te obliga a organizar y reflexionar sobre el material a medida que se presenta, lo que a su vez aumenta la probabilidad de que lo transfieras a la memoria a largo plazo. Muchos estudios han demostrado que tomar notas mientras se aprende mejora la retención Aiken, Thomas, and Shennum (1975),Bohay et al. (2011). Si bien aún no se ha estudiado ampliamente Orndorff III (2015),Yang and Lin (2015), he descubierto que hacer que tus estudiantes tomen notas juntos en una página en línea compartida también es eficaz:\n\nPermite a las personas comparar lo que creen que ellas están escuchando con lo que están escuchando las otras personas, lo que les ayuda a llenar los vacíos y a corregir conceptos erróneos de inmediato.\nLes da a las/los estudiantes más avanzadas/os de la clase algo útil que hacer. En lugar de aburrirse y revisar Instagram durante la clase, pueden tomar la iniciativa de registrar lo que se dice, lo que mantiene su compromiso a la vez que permite a las/los estudiantes menos avanzadas/os concentrarse más en el nuevo material.\nLas notas que toman las/los estudiantes suelen ser más útiles para ellas/os que las que la/el docente prepararía de antemano. Es probable que los contenidos que les resultan nuevos a las/los estudiantes se vean bien reflejados en las notas compartidas, mientras que para la/el docente es más difícil predecir qué parte del material que enseñará será realmente nuevo.\nMirar notas recientes mientras las/los estudiantes están trabajando en un ejercicio ayuda al docente a descubrir si la clase se perdió o si algo se entendió mal.\n\n\n10.7.1 ¿Es el lápiz más poderoso que el teclado?\nMueller and Oppenheimer (2014) informaron que tomar notas en una computadora es generalmente menos efectivo que tomar notas con lápiz y papel. Si bien su resultado fue ampliamente compartido, Morehead, Dunlosky, and Rawson (2019) no pudieron replicarlo.\n\nSi tus estudiantes toman notas juntos, también puedes aprovechar para hacer evaluaciones formativas: que peguen fragmentos cortos de código o que respondan preguntas en forma de puntos o de oraciones. Siempre que quieras que cada persona responda una pregunta, haz una lista con el nombre de tus estudiantes y pégala en el documento, de modo de evitar que todas las personas intenten editar el mismo par de líneas al mismo tiempo.\nEs frecuente que la primera vez que las/los estudiantes tomen notas compartidas sientan que se distraen, porque tienen que dividir su atención entre lo que dice la/el docente y lo que escriben sus pares (Section 5.1). Si estás trabajando por única vez con un grupo en particular, debes prestar atención a los consejos en la Section 10.12 y pedirles que tomen notas individualmente.\n\n10.7.2 Puntos para mejorar\nUna forma de demostrar a tus estudiantes que están aprendiendo contigo, no solo de ti, es permitirles que tomen notas editando (una copia de) tu lección. En lugar de publicar archivos PDF para que los descarguen, crea copias editables de tus diapositivas, notas y ejercicios en una wiki, un documento de Google o cualquier otra herramienta que te permita revisar y comentar los cambios. Darle crédito a las personas por corregir errores, aclarar explicaciones, agregar nuevos ejemplos y escribir nuevos ejercicios no reduce tu carga de trabajo, pero aumenta el compromiso y el tiempo de vida de la lección. (Section 7.3)."
  },
  {
    "objectID": "classroom.html#sec-classroom-sticky-notes",
    "href": "classroom.html#sec-classroom-sticky-notes",
    "title": "10  En el salón de clase",
    "section": "10.8 Notas adhesivas",
    "text": "10.8 Notas adhesivas\nLas notas adhesivas son una de mis herramientas de enseñanza favoritas, y no soy el único que ama su versatilidad, portabilidad, adherencia, capacidad de plegado y aroma sutil pero atractivo Ward (2015).\n\n10.8.1 Como indicadores de estado\nReparte a cada estudiante dos notas adhesivas de diferentes colores, como, por ejemplo, naranja y verde. Las notas adhesivas se pueden sostener para votar, pero su uso real es como indicadores de estado. Si alguien ha completado un ejercicio y quiere que lo revisen, coloca la nota adhesiva verde en su laptop; si tiene un problema y necesita ayuda, coloca la nota naranja. Esto funciona mucho mejor que pedirle a la gente que levante la mano: es más discreto (lo que significa que es más probable que lo hagan), pueden seguir trabajando mientras su bandera está levantada en lugar de intentar escribir con una sola mano, y puedes ver rápidamente desde el frente del salón en qué estado se encuentra tu clase. Los indicadores de estado son particularmente útiles en clases donde las personas con habilidades mixtas están trabajando en el material a su propio ritmo (Section 10.5).\nUna vez que tus estudiantes se sientan cómodos con dos notas adhesivas, puedes darles una tercera que puedan usar cuando tengan el cerebro lleno o necesiten un descanso para ir al baño Una colega me dijo una vez que la unidad básica de enseñanza es la vejiga. Cuando le contesté que yo nunca había pensado en eso, dijo: “Obviamente nunca has estado embarazado”. Nuevamente, es más probable que los adultos muestren una nota adhesiva a que levanten la mano y una vez que una nota color azul es levantada, generalmente le sigue una ráfaga de otras notas azules.\n\n\n10.8.2 Para distribuir atención\nTambién se pueden usar notas adhesivas para garantizar que tu atención como docente se distribuya de manera justa. Haz que cada estudiante escriba su nombre en una nota adhesiva y que lo coloque en su computadora portátil. Cada vez que alguien responda una de sus preguntas o que tú la/lo llames, quita su nota adhesiva. Una vez que hayas retirado todas las notas adhesivas, tus estudiantes vuelven a colocarlas en sus computadoras.\nEsta técnica hace que sea fácil para la/el docente ver con quién no ha hablado recientemente, lo que a su vez ayuda a evitar prejuicios inconscientes e interactuar preferentemente con sus estudiantes más extrovertidos. Sin una verificación como esta, es muy fácil crear un ciclo de retroalimentación en el que quienes son más extrovertidas/os reciben más atención, por lo cual mejoran, lo que a su vez hace que reciban más atención, mientras que las/los estudiantes más introvertidas/os, menos seguras/os o marginadas/os se quedan detrás Alvidrez and Weinstein (1999),Jussim and Harber (2005).\nTambién muestra a tus estudiantes que la atención se distribuye de manera justa, de modo que cuando se les llame, no se sentirán como si los estuvieran molestando. Cuando trabajo con un grupo nuevo, permito que las personas que prefieren no las llamen quiten sus propias notas adhesivas durante la primera o la segunda hora de clase. Si continúan haciendo esto a medida que pasa el tiempo, trato de tener una conversación tranquila para averiguar por qué y para ver si hay algo que pueda hacer para que se sientan más cómodas/os.\n\n\n10.8.3 Como tarjetas de actas\nTambién puedes usar notas adhesivas como tarjetas de actas. Antes de cada receso, tus estudiantes se toman un minuto para escribir en la nota adhesiva verde algo que creen que les será útil y en la nota naranja algo que consideran que se enseñó demasiado rápido o demasiado lento, que es confuso o irrelevante. Mientras disfrutan de su café o almuerzo, revisa sus notas y busca patrones. Se necesitan menos de cinco minutos para ver qué disfrutan las/los estudiantes de una clase de 40 personas, qué puntos hayan confusos, qué problemas tienen y qué preguntas aún no has respondido.\nLas/Los estudiantes no deben firmar sus tarjetas de actas: están pensadas como comentarios anónimos. La técnica de uno arriba/uno abajo descrita en la Section 10.11 es una oportunidad para la retroalimentación colectiva."
  },
  {
    "objectID": "classroom.html#sec-classroom-blank",
    "href": "classroom.html#sec-classroom-blank",
    "title": "10  En el salón de clase",
    "section": "10.9 Nunca una página en blanco",
    "text": "10.9 Nunca una página en blanco\nLos talleres de programación y otros tipos de clases se pueden construir en torno a un conjunto de ejercicios independientes, pueden desarrollar un único ejemplo extendido en etapas o utilizar una estrategia mixta. Las dos ventajas principales de los ejercicios independientes son que las personas que se retrasan pueden volver a sincronizarse fácilmente y que quienes desarrollan las lecciones pueden agregar, eliminar y reorganizar el material a voluntad (Section 7.3). Un único ejemplo extendido, por otro lado, mostrará a tus estudiantes cómo encajan las partes y piezas que están aprendiendo: en el lenguaje educativo, les brinda más oportunidades para integrar sus conocimientos.\nIndependientemente del enfoque que adoptes, las personas principiantes nunca deben comenzar a hacer ejercicios con una página o pantalla en blanco, ya que a menudo les resulta intimidante o desconcertante. Si te han seguido mientras realizas programación en vivo, pídeles que agreguen algunas líneas más o que modifiquen el ejemplo que creaste. Alternativamente, si están tomando notas compartidas, pega algunas líneas de código de inicio en el documento para que lo amplíen o modifiquen.\nModificar el código existente en lugar de escribir código nuevo desde cero no sólo proporciona a tus estudiantes una estructura: también está más cerca de lo que harán en la vida real. Sin embargo, ten en cuenta que las/los estudiantes pueden distraerse tratando de comprender todo el código de inicio en lugar de hacer su propio trabajo. El public static void main() de Java o un conjunto de sentencias import al inicio de un programa en Python podría tener sentido para ti, pero es una carga extrínsenca para una persona principiante (Chapter 5)."
  },
  {
    "objectID": "classroom.html#sec-classroom-setup",
    "href": "classroom.html#sec-classroom-setup",
    "title": "10  En el salón de clase",
    "section": "10.10 Configuración del entorno de tus estudiantes",
    "text": "10.10 Configuración del entorno de tus estudiantes\nLas/Los estudiantes free-range a menudo quieren traer sus propias computadoras y dejar la clase con esas máquinas configuradas para hacer un trabajo real. Por lo tanto, las/los docentes free-range deberían prepararse para enseñar tanto en Windows como en MacOS “¡Y Linux!”, grita alguien desde el fondo del salón., aunque sería más sencillo requerir que las/los estudiantes utilicen el mismo sistema operativo.\n\n10.10.1 Denominadores comunes\nSi tus participantes utilizan diferentes sistemas operativos, trata de evitar el uso de funciones que sean específicas de uno solo y señala las que sí utilices. Por ejemplo, los controles y el comportamiento de “minimizar ventana” en Windows son diferentes a los de MacOS.\n\nNo importa cuántas plataformas tengas que manejar, coloca instrucciones de configuración detalladas en el sitio web del curso y envía un correo electrónico a tus estudiantes un par de días antes de que comience el taller para recordarles que realicen la configuración. Algunas personas seguirán apareciendo sin el software requerido porque tuvieron problemas, no pudieron encontrar tiempo para completar todos los pasos o simplemente son el tipo de persona que nunca sigue las instrucciones por adelantado. Para detectar esto, haz que todos ejecuten un comando simple tan pronto como lleguen y muestren el resultado a las/los docentes, luego busca ayudantes y otras/os estudiantes para ayudar a las personas que se han encontrado con problemas.\n\n10.10.2 Máquinas virtuales\nAlgunas personas usan herramientas como [Docker][docker] para poner máquinas virtuales en las computadoras de sus estudiantes para que todos trabajen exactamente con las mismas herramientas, pero esto presenta un nuevo conjunto de problemas. Las máquinas más antiguas o más pequeñas simplemente no son lo suficientemente rápidas para ejecutarlas, las/los estudiantes luchan por alternar entre dos conjuntos diferentes de atajos de teclado para cosas como copiar y pegar, e incluso practicantes competentes se confundirán sobre qué está sucediendo exactamente y dónde.\n\nLa configuración es tan complicada que muchas/os docentes prefieren que se usen herramientas basadas en el navegador. Sin embargo, esto hace que la clase dependa del WiFi (que puede ser de calidad muy variable) y no satisface el deseo de las/los estudiantes de irse con sus propias máquinas listas para su uso en el mundo real. A la par que herramientas basadas en la nube como [Glitch][glitch] y [RStudio Cloud][rstudio-cloud] se vuelven más robustas, esta última consideración se torna menos importante.\nUna última forma de abordar los problemas de configuración es dividir la clase en varios días y hacer que las personas instalen lo que se requiere para cada día antes de dejar la clase el día anterior. Dividir el trabajo en partes hace que cada una sea menos intimidante, es más probable que las/los estudiantes realmente lo hagan y garantiza que puedas comenzar a tiempo cada lección, excepto la primera."
  },
  {
    "objectID": "classroom.html#sec-classroom-practices",
    "href": "classroom.html#sec-classroom-practices",
    "title": "10  En el salón de clase",
    "section": "10.11 Otras prácticas de enseñanza",
    "text": "10.11 Otras prácticas de enseñanza\nLas prácticas pequeñas que se describen a continuación no son esenciales, pero todas mejorarán la forma de dar las lecciones. Como ocurre con el ajedrez y el matrimonio, el éxito en la enseñanza suele ser una cuestión de progreso lento y constante.\n\n10.11.1 Comienza con introducciones\nComienza tu clase presentándote. Si eres una persona experta, cuéntales un poco cómo llegaste a donde estás; si solo estás dos pasos por delante de ellos, enfatiza lo que tienes en común con ellas/os. Digas lo que digas, la meta es hacerte más accesible y fomentar la creencia de que pueden tener éxito.\nLas/los estudiantes también deben presentarse. En una clase de una docena, pueden hacer esto verbalmente; en una clase más grande o si aún no se conocen entre sí, encuentro mejor que cada estudiante escriba una o dos líneas sobre sí mismos en las notas compartidas (Section 10.7).\n\n\n10.11.2 Configura tu propio entorno\nConfigurar tu entorno es tan importante como configurar el de tus estudiantes, pero más arduo. Además de contar con acceso a la red y de tener todo el software que vas a utilizar, también debes tener disponible un vaso de agua o una taza de té o café (o mate, o tereré). Esto ayuda a mantener tu garganta lubricada, pero el propósito real es darte una excusa para hacer una pausa y pensar durante un par de segundos cuando alguien te hace una pregunta difícil o cuando pierdes la noción de lo que ibas a decir a continuación. Probablemente también quieras algunos marcadores de pizarra y varias otras cosas que se describen en la Section 24.4.\nUna manera de evitar que tu trabajo diario se entrometa en tu manera de enseñar es creando una cuenta separada en tu computadora para tu rol docente. Usa valores predeterminados del sistema para todo lo referido a esta segunda cuenta, así como un tamaño de letra grande y un fondo de pantalla blanco, y silencia las notificaciones de manera que tus lecciones no sean interrumpidas por ventanas emergentes.\n\n\n10.11.3 Evita dejar tarea para la casa\nLas/Los estudiantes que hayan pasado todo un día programando estarán cansadas/os. Si les das tarea para hacer fuera del horario de clase, también comenzarán el día siguiente con cansancio, así que no lo hagas.\n\n\n10.11.4 No toques el teclado de tu estudiante\nA menudo es tentador arreglar las cosas para tus estudiantes, pero incluso si narras cada paso, es probable que las/los desmotives al enfatizar la brecha entre sus conocimientos y los tuyos. En su lugar, mantén tus manos fuera del teclado y habla con tus estudiantes sobre lo que tengan que hacer: llevará más tiempo, pero es más probable que el conocimiento se mantenga.\n\n\n10.11.5 Repite la pregunta\nSiempre que alguien haga una pregunta en clase, repítesela antes de responder para comprobar que la has entendido y para que las personas que quizás no la hayan escuchado tengan la oportunidad de hacerlo. Esto es particularmente importante cuando se graban o transmiten presentaciones, ya que tu micrófono generalmente no captará lo que otras personas están diciendo. Repetir las preguntas también te da la oportunidad de redirigir la pregunta a algo con lo que te sientas más cómoda/o respondiendo…\n\n\n10.11.6 Uno arriba, uno abajo\nUn complemento de las tarjetas de actas es solicitar retroalimentación resumida al final de cada día. Las/los estudiantes dan alternativamente un punto positivo o negativo sobre el día sin repetir nada de lo que ya se ha dicho. La prohibición de las repeticiones obliga a las personas a decir cosas que de otro modo no harían: una vez que se hayan dado todos los comentarios “seguros”, comenzarán a decir lo que realmente piensan.\n\n10.11.7 Diferentes modos, diferentes respuestas\nLas tarjetas de actas (Section 10.8) son anónimas; la retroalimentación alterna de arriba a abajo no lo es. Debes usar los dos métodos juntos porque el anonimato permite tanto la honestidad como la ofensa.\n\n\n\n10.11.8 Pide que tus estudiantes hagan predicciones\nLas investigaciones han demostrado que las personas aprenden más de las demostraciones si se les pide que predigan lo que sucederá Miller et al. (2013). Esta actividad encaja naturalmente en la programación en vivo: después de agregar o cambiar algunas líneas de un programa, pregunta a la clase qué sucederá cuando se ejecute. Si el ejemplo es incluso moderadamente complejo, la predicción puede servir como una pregunta motivadora para una ronda de instrucción por pares.\n\n\n10.11.9 Configuración de mesas\nEs posible que no tengas ningún control sobre la distribución de los escritorios o mesas en la sala en la que enseñas, pero si lo tienes, hemos encontrado que es mejor tener asientos planos (estilo comedor) en lugar de asientos butacas (estilo teatro). De este modo puedes llegar a quienes necesitan ayuda más fácilmente y será más fácil para tus estudiantes emparejarse entre sí (Section 10.5). Los tomacorrientes en el piso (para que no tengas que pasar cables de alimentación) hacen la vida más fácil y segura, pero siguen siendo poco comunes.\nIndependientemente del diseño de aula que tengas, trata de asegurarte de que cada asiento tenga una vista sin obstáculos de la pantalla. Un buen soporte para la espalda también es importante, ya que las personas estarán en ellos durante un período prolongado. Al igual que los tomacorrientes en el piso, los buenos asientos en el salón de clases aún son infrecuentes.\n\n\n10.11.10 Pastillas para la tos\nSi hablas todo el día en una habitación llena de gente, se te irritará la garganta porque estarás irritando las células epiteliales de la laringe y la faringe. Esto no solo vuelve tu voz ronca, sino que también te hace más vulnerable a las infecciones (que es parte de la razón por la que las personas a menudo se resfrían después de enseñar).\nLa mejor manera de protegerse contra esto es mantener la garganta lubricada: una buena recomendación es usar pastillas para la tos pronto y con frecuencia. Las buenas pastillas también disimularán la aparición del aliento a café, lo que tus estudiantes probablemente agradecerán.\n\n\n10.11.11 Piensa, empareja, comparte\nPiensa, empareja, comparte es una técnica ligera que ayuda a las personas a mejorar sus ideas mediante la discusión con sus pares. Cada persona comienza pensando individualmente sobre una pregunta o problema y anotando algunas notas. Luego, se explican las ideas por parejas, fusionándolas o seleccionando las más prometedoras. Finalmente, algunas parejas presentan sus ideas a todo el grupo. Piensa, empareja, comparte funciona porque obliga a las personas a exteriorizar su cognición (Section 4.1). También les da la oportunidad de detectar y resolver brechas o contradicciones en sus ideas antes de exponerlas a un grupo más grande, lo que puede hacer que tus estudiantes menos extrovertidas/os tengan menos nervios de pasar el ridículo o equivocarse.\n\n\n10.11.12 Mañana, mediodía y noche\nSmarr and Schirmer (2018) descubrieron que a las/los estudiantes les va peor si sus clases y otros trabajos se programan en horarios que no coinciden con sus relojes biológicos, es decir, que si una persona matutina toma clases nocturnas o viceversa, sus calificaciones se ven afectadas. Por lo general, no es posible acomodar esto en grupos pequeños, pero los grupos más grandes deben intentar escalonar las horas de inicio de las sesiones paralelas. Esto también puede ayudar a las personas que hacen malabarismos con las responsabilidades de cuidado de sus hijas/os, adultos mayores y otras limitaciones, además de que en los recreos las filas del café y los baños serán más cortas.\n\n\n10.11.13 Humor\nEl humor debe usarse con moderación al enseñar: la mayoría de los chistes son menos divertidos cuando se escriben y se vuelven aún menos divertidos con cada relectura. Ser espontáneamente divertida/o mientras enseñas generalmente funciona mejor, pero puede salir mal fácilmente: lo que es una broma para tu círculo de amistades puede convertirse en un problema político serio para tu público. Si haces bromas cuando enseñas, no las hagas a expensas de ningún grupo o de ninguna persona excepto posiblemente de tú misma/o."
  },
  {
    "objectID": "classroom.html#sec-classroom-innovate",
    "href": "classroom.html#sec-classroom-innovate",
    "title": "10  En el salón de clase",
    "section": "10.12 Limita la innovación",
    "text": "10.12 Limita la innovación\nCada una de las técnicas presentadas en este capítulo mejorará tus clases, pero no debes intentar adoptarlas todas a la vez. La razón es que cada nueva práctica aumenta tu carga cognitiva, así como la de tus estudiantes, ya que de golpe todas las personas estarán tratando de aprender una nueva forma de aprender, así como el tema de la lección. Si trabajas con un grupo repetidamente, puedes introducir una técnica nueva cada pocas lecciones; si solo enseñas un taller de un día, es mejor elegir un único método que no hayan visto antes y que se sientan cómodas/os con eso."
  },
  {
    "objectID": "classroom.html#sec-classroom-exercises",
    "href": "classroom.html#sec-classroom-exercises",
    "title": "10  En el salón de clase",
    "section": "10.13 Ejercicios",
    "text": "10.13 Ejercicios\n\n10.13.1 Crea un cuestionario (individual/20’)\nUtilizando el cuestionario de la Section 24.6 como plantilla, crea un breve cuestionario que puedas entregar a tus estudiantes antes de impartir una clase propia. ¿Qué es lo que más deseas saber sobre sus antecedentes y cómo pueden ambas partes estar seguras de que están de acuerdo sobre qué nivel de comprensión se está preguntando?\n\n\n10.13.2 Una práctica de enseñanza propia (pensar-emparejar-compartir/15’)\nPiensa en una práctica de enseñanza que no se haya descripto hasta ahora. En parejas, presenta tu idea a tu compañera/o y escucha la suya. Luego, seleccionen una de las dos ideas para presentarla al grupo en general.\n\n\n10.13.3 ¿Puedo conducir? (parejas/10’)\nIntercambia computadoras con una/un compañera/o (preferiblemente con alguien que use un sistema operativo diferente al tuyo) y trabaja en un simple ejercicio de programación. ¿Qué tan frustrante es? ¿Cuánta información te da sobre lo que las personas novatas tienen que pasar todo el tiempo?\n\n\n10.13.4 Emparejar (parejas/15’)\nMira [este video][video-pair-programming] de programación en parejas y luego practica hacerlo con una/un compañera/o. Recuerda cambiar los roles entre conductor/a y navegante cada pocos minutos. ¿Cuánto tiempo tardas en adoptar un ritmo de trabajo?\n\n\n10.13.5 Compara notas (grupos pequeños/15’)\nForma grupos de tres a cuatro personas y compara las notas que han tomado en este capítulo. ¿Qué te pareció digno de mención pero tus pares perdieron de vista y viceversa? ¿Qué entendiste diferente?\n\n\n10.13.6 Credibilidad (individual/15’)\nFink (2013) describe tres cosas que hacen a las/los docentes creíbles a los ojos de sus estudiantes:\n\nCompetencia:\n\nconocimiento del tema como lo demuestra la capacidad para explicar ideas complejas o hacer referencia al trabajo de otras personas.\n\nIntegridad:\n\ntener en cuenta los mejores intereses de las/los estudiantes. Esto se puede demostrar dando retroalimentación individualizada, ofreciendo una explicación racional para las decisiones de calificación y tratando a todas las personas del curso por igual.\n\nDinamismo:\n\nentusiasmo por el tema (Chapter 9).\n\n\nDescribe una cosa que haces al enseñar que se ajuste a cada categoría y luego describe una cosa que no haces pero que deberías hacer.\n\n\n10.13.7 Medir la eficacia (individual/15’)\nKirkpatrick (1994) define cuatro niveles en los cuales evaluar la formación:\n\nReacción:\n\n¿Cómo se sintieron las/los estudiantes con respecto a la formación?\n\nAprendizaje:\n\n¿Cuánto aprendieron realmente?\n\nComportamiento:\n\n¿Cuánto han cambiado su comportamiento como resultado?\n\nResultados:\n\n¿Cómo han afectado esos cambios de comportamiento su resultado o el resultado de su grupo?\n\n\n¿Qué estás haciendo en cada nivel para evaluar qué y cómo enseñas? ¿Qué podrías hacer que no estés haciendo?\n\n\n10.13.8 Objeciones y contraobjeciones (piensa-empareja-comparte/15’)\nHas decidido no preguntar a tus estudiantes si tu clase fue útil porque sabes que no existe una correlación entre sus respuestas y cuánto aprenden realmente (Section 8.1). En cambio, has presentado cuatro propuestas, cada una de las cuales tus colegas han rechazado:\n\nVer si recomiendan la clase a amigas/os.\n\n¿Por qué esto sería más significativo que preguntarles cómo se sienten acerca de la clase?\n\nHacer un examen al final.\n\nPero cuánto saben los estudiantes al final del día es un mal predictor de cuánto recordarán dos o tres meses después, y cualquier tipo de examen final hará que la clase sea mucho más estresante.\n\nHacer un examen dos o tres meses después.\n\nEso es prácticamente imposible con estudiantes free-range. Además, es menos probable que participen del seguimiento aquellas personas que no obtuvieron nada del taller, por lo que habrá un sesgo en los comentarios recopilados.\n\nRevisa si siguen usando lo que aprendieron.\n\nLa instalación de software espía en las computadoras de las/los estudiantes está mal vista, entonces, ¿cómo se implementará?\n\n\nTrabajando por tu cuenta, encuentra respuestas a estas objeciones. Luego, comparte tus respuestas con una/un compañera/o y discutan los enfoques a los que han llegado. Cuando hayan terminado, compartan su aproximación favorita con la clase.\n\n\n\n\nAiken, Edwin G., Gary S. Thomas, and William A. Shennum. 1975. “Memory for a Lecture: Effects of Notes, Lecture Rate, and Informational Density.” Journal of Educational Psychology 67 (3): 439–44. https://doi.org/10.1037/h0076613.\n\n\nAlvidrez, Jennifer, and Rhona S. Weinstein. 1999. “Early Teacher Perceptions and Later Student Academic Achievement.” Journal of Educational Psychology 91 (4): 731–46. https://doi.org/10.1037/0022-0663.91.4.731.\n\n\nAurora, Valerie, and Mary Gardiner. 2019. How to Respond to Code of Conduct Reports. Version 1.1. Frame Shift Consulting LLC.\n\n\nBloom, Benjamin S. 1984. “The 2 Sigma Problem: The Search for Methods of Group Instruction as Effective as One-to-One Tutoring.” Educational Researcher 13 (6): 4–16. https://doi.org/10.3102/0013189x013006004.\n\n\nBohay, Mark, Daniel P. Blakely, Andrea K. Tamplin, and Gabriel A. Radvansky. 2011. “Note Taking, Review, Memory, and Comprehension.” American Journal of Psychology 124 (1): 63. https://doi.org/10.5406/amerjpsyc.124.1.0063.\n\n\nCelepkolu, Mehmet, and Kristy Elizabeth Boyer. 2018. “Thematic Analysis of Students’ Reflections on Pair Programming in CS1.” In 2018 Technical Symposium on Computer Science Education (SIGCSE’18). Association for Computing Machinery (ACM). https://doi.org/10.1145/3159450.3159516.\n\n\nCrouch, Catherine H., and Eric Mazur. 2001. “Peer Instruction: Ten Years of Experience and Results.” American Journal of Physics 69 (9): 970–77. https://doi.org/10.1119/1.1374249.\n\n\nFink, L. Dee. 2013. Creating Significant Learning Experiences: An Integrated Approach to Designing College Courses. Jossey-Bass.\n\n\nFriend, Marilyn, and Lynne Cook. 2016. Interactions: Collaboration Skills for School Professionals. Eighth. Pearson.\n\n\nHanks, Brian, Sue Fitzgerald, Renée McCauley, Laurie Murphy, and Carol Zander. 2011. “Pair Programming in Education: A Literature Review.” Computer Science Education 21 (2): 135–73. https://doi.org/10.1080/08993408.2011.579808.\n\n\nHannay, Jo Erskine, Erik Arisholm, Harald Engvik, and Dag I. K. Sjøberg. 2010. “Effects of Personality on Pair Programming.” IEEE Transactions on Software Engineering 36 (1): 61–80. https://doi.org/10.1109/tse.2009.41.\n\n\nHannay, Jo Erskine, Tore Dybå, Erik Arisholm, and Dag I. K. Sjøberg. 2009. “The Effectiveness of Pair Programming: A Meta-Analysis.” Information and Software Technology 51 (7): 1110–22. https://doi.org/10.1016/j.infsof.2009.02.001.\n\n\nJussim, Lee, and Kent D. Harber. 2005. “Teacher Expectations and Self-Fulfilling Prophecies: Knowns and Unknowns, Resolved and Unresolved Controversies.” Personality and Social Psychology Review 9 (2): 131–55. https://doi.org/10.1207/s15327957pspr0902_3.\n\n\nKirkpatrick, Donald L. 1994. Evaluating Training Programs: The Four Levels. Berrett-Koehle.\n\n\nKruger, Justin, and David Dunning. 1999. “Unskilled and Unaware of It: How Difficulties in Recognizing One’s Own Incompetence Lead to Inflated Self-Assessments.” Journal of Personality and Social Psychology 77 (6): 1121–34. https://doi.org/10.1037/0022-3514.77.6.1121.\n\n\nLewis, Colleen M., and Niral Shah. 2015. “How Equity and Inequity Can Emerge in Pair Programming.” In 2015 International Computing Education Research Conference (ICER’15). Association for Computing Machinery (ACM). https://doi.org/10.1145/2787622.2787716.\n\n\nMargolis, Jane, Rachel Estrella, Joanna Goode, Jennifer Jellison Holme, and Kim Nao. 2010. Stuck in the Shallow End: Education, Race, and Computing. MIT Press.\n\n\nMazur, Eric. 1996. Peer Instruction: A User’s Manual. Prentice-Hall.\n\n\nMcDowell, Charlie, Linda Werner, Heather E. Bullock, and Julian Fernald. 2006. “Pair Programming Improves Student Retention, Confidence, and Program Quality.” Communications of the ACM 49 (8): 90–95. https://doi.org/10.1145/1145287.1145293.\n\n\nMiller, Kelly, Nathaniel Lasry, Kelvin Chu, and Eric Mazur. 2013. “Role of Physics Lecture Demonstrations in Conceptual Learning.” Physical Review Special Topics - Physics Education Research 9 (2). https://doi.org/10.1103/physrevstper.9.020113.\n\n\nMorehead, Kayla, John Dunlosky, and Katherine A. Rawson. 2019. “How Much Mightier Is the Pen Than the Keyboard for Note-Taking? A Replication and Extension of Mueller and Oppenheimer (2014).” Educational Psychology Review, February. https://doi.org/10.1007/s10648-019-09468-2.\n\n\nMueller, Pam A., and Daniel M. Oppenheimer. 2014. “The Pen Is Mightier Than the Keyboard.” Psychological Science 25 (6): 1159–68. https://doi.org/10.1177/0956797614524581.\n\n\nOrndorff III, Harold N. 2015. “Collaborative Note-Taking: The Impact of Cloud Computing on Classroom Performance.” International Journal of Teaching and Learning in Higher Education 27 (3): 340–51.\n\n\nPartanen, Anu. 2011. “What Americans Keep Ignoring about Finland’s School Success.” https://www.theatlantic.com/national/archive/2011/12/what-americans-keep-ignoring-about-finlands-school-success/250564/.\n\n\nPorter, Leo, Dennis Bouvier, Quintin Cutts, Scott Grissom, Cynthia Bailey Lee, Robert McCartney, Daniel Zingaro, and Beth Simon. 2016. “A Multi-Institutional Study of Peer Instruction in Introductory Computing.” In 2016 Technical Symposium on Computer Science Education (SIGCSE’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2839509.2844642.\n\n\nPorter, Leo, Mark Guzdial, Charlie McDowell, and Beth Simon. 2013. “Success in Introductory Programming: What Works?” Communications of the ACM 56 (8): 34. https://doi.org/10.1145/2492007.2492020.\n\n\nSmarr, Benjamin L., and Aaron E. Schirmer. 2018. “3.4 Million Real-World Learning Management System Logins Reveal the Majority of Students Experience Social Jet Lag Correlated with Decreased Performance.” Scientific Reports 8 (1). https://doi.org/10.1038/s41598-018-23044-8.\n\n\nSmith, Michelle K., William B. Wood, Wendy K. Adams, Carl E. Wieman, Jennifer K. Knight, N. Guild, and T. T. Su. 2009. “Why Peer Discussion Improves Student Performance on in-Class Concept Questions.” Science 323 (5910): 122–24. https://doi.org/10.1126/science.1165919.\n\n\nWalle, Thorbjorn, and Jo Erskine Hannay. 2009. “Personality and the Nature of Collaboration in Pair Programming.” In 2009 International Symposium on Empirical Software Engineering and Measurement (ESER’09). Institute of Electrical; Electronics Engineers (IEEE). https://doi.org/10.1109/esem.2009.5315996.\n\n\nWard, James. 2015. Adventures in Stationery: A Journey Through Your Pencil Case. Profile Books.\n\n\nYang, Yu-Fen, and Yuan-Yu Lin. 2015. “Online Collaborative Note-Taking Strategies to Foster EFL Beginners’ Literacy Development.” System 52 (August): 127–38. https://doi.org/10.1016/j.system.2015.05.006."
  },
  {
    "objectID": "exercises.html#exercises-classics",
    "href": "exercises.html#exercises-classics",
    "title": "13  Tipos de ejercicios",
    "section": "13.1 Los clásicos",
    "text": "13.1 Los clásicos\nComo se discute en la Section 3.1, las preguntas de opción múltiple son más efectivas cuando las respuestas incorrectas sondean conceptos erróneos específicos. Están diseñadas para evaluar los niveles más bajos en la Taxonomía de Bloom (Section 7.2), pero también requieren que los/las estudiantes utilicen su propio juicio.\n\n13.1.1 Una pregunta de opción múltiple\n¿En qué orden ocurren las operaciones cuando la computadora evalúa la expresión precio = agregarImpuestos(costo - descuento)?\n\nresta, llamado a función, asignación\nllamado a función, resta, asignación\nllamado a función, luego asignación y resta simultáneamente\nninguna de las anteriores\n\n\nEl segundo tipo de ejercicio clásico es programar y ejecutar, donde el/la estudiante escribe un código que produce una salida especificada. Los ejercicios de programar y ejecutar pueden ser tan simples o complejos como el/la docente quiera, pero cuando se usen en clase deben ser breves y tener solo una o dos respuestas correctas posibles. Generalmente es suficiente pedir a las personas principiantes que calculen e impriman un solo valor o que llamen a una función específica: docentes experimentados/as a menudo olvidan de lo difícil que puede ser averiguar qué parámetros van en qué lugar. Para los/las estudiantes más avanzados, averiguar qué función llamar es una actividad más atractiva y una mejor evaluación de su comprensión.\n\n13.1.2 Programar y ejecutar\nLa variable foto contiene una imagen a todo color de un archivo. Usando una función, crea una versión blanco y negro de la imagen y asígnala a una variable nueva llamada monocromo.\n\nLos ejercicios de programar y ejecutar se pueden combinar con preguntas de opción múltiple. Por ejemplo, esta pregunta de opción múltiple sólo puede ser contestada ejecutando el comando Unix ls:\n\n13.1.3 Combinar preguntas de opción múltiple con programar & ejecutar\nEstás en el directorio /home. ¿Cuál de los siguientes archivos no está en dicho directorio? 1. otonio.csv 2. verano.csv 3. primavera.csv 4. invierno.csv\n\nLos ejercicios de programar y ejecutar ayudan a las personas a practicar las habilidades que más quieren aprender, pero pueden ser difíciles de evaluar: puede haber muchas maneras inesperadas de obtener la respuesta correcta, y es desmoralizante si un sistema de calificación automática rechaza el código de la solución porque no se corresponde con el del docente. Una forma de reducir qué tanto ocurre esto es evaluar solo su producción, pero eso no les da una devolución sobre cómo están programando. Otra manera es darles un pequeño conjunto de evaluación en el que pueden ejecutar su código antes de enviarlo (y entonces el código se evalúa con un conjunto más amplio de pruebas). Hacer esto les ayuda a descubrir si han malinterpretado completamente la intención del ejercicio antes de hacer cualquier cosa que pueda afectarles la nota.\nEn lugar de escribir código que satisface algunas especificaciones, se les puede pedir a los/las estudiantes que escriban pruebas para determinar si un fragmento de código se ajusta a una especificación. Esta habilidad es útil por sí misma y practicarla puede darles a los/las estudiantes un poco más de simpatía por el trabajo duro de sus docentes.\n\n13.1.4 Invirtiendo programar y ejecutar\nLa función suma_monotona calcula la suma de cada sección de una lista de números, en la que los valores aumentan estrictamente.\nPor ejemplo, dada la entrada [1, 3, 3, 4, 5, 1], la salida es [4, 12, 1].\nEscribe y corre pruebas unitarias para determinar cuál de los siguientes errores está contenido en la función:\n\nConsidera cada número negativo como el inicio de una nueva sub-secuencia.\nNo incluye el primer valor de cada sub-secuencia en la sub-suma.\nNo incluye el último valor de cada sub-secuencia en la sub-suma.\nSolo reinicia la suma cuando los valores decrecen en vez de aumentar.\n\n\nCompletar los espacios en blanco es un refinamiento de programar y ejecutar en el que el/la estudiante recibe el comienzo de un código y debe completarlo.\n(En la práctica, la mayoría de los ejercicios programar y ejecutar son en realidad del tipo completar los espacios en blanco, porque el/la docente proporciona comentarios para recordarles a sus estudiantes los pasos que deben seguir). Las preguntas de este tipo son las bases para ejemplos desvanecidos; como se discute en el Chapter 5, las personas principiantes a menudo encuentran a este tipo de ejercicios menos intimidante que escribir todo el código desde cero; y dado que el/la docente ha proporcionado la mayor parte de la estructura de la respuesta, las respuestas enviadas son mucho más predecibles y, por lo tanto, más fáciles de revisar.\n\n13.1.5 Completar los espacios en blanco\nCompleta los espacios en blanco, para que el código de abajo imprima el texto 'cana'.Inspirado en un verso de María Elena Walsh, del libro [Zoo Loco][zoo-loco].\ntext = 'Un canario que ladra si está triste'\nslice = text[____:____]\nprint(slice)\n\nLos problemas de Parsons también evitan el problema de la “pantalla blanca del terror” a la vez que permite que los/las estudiantes se concentren en el flujo de control por separado del vocabulario Parsons and Haden (2006),Ericson et al. (2015),Morrison et al. (2016),Ericson, Margulieux, and Rick (2017).\nExisten herramientas para construir y hacer problemas de Parsons en línea Ihantola and Karavirta (2011), pero pueden ser emuladas (aunque un poco torpemente) pidiendo a los/las estudiantes que reorganicen las líneas de código en un editor de texto.\n\n13.1.6 Problemas de Parsons\nReorganiza e indenta estas líneas para obtener la suma de los valores positivos de una lista. (También deberás agregar dos “dos puntos” en los lugares apropiados)\ntotal = 0\nif v &gt; 0\ntotal += v\nfor v in valores\n\nTen en cuenta que dar a los/las estudiantes más líneas de las que necesitan, o pedirles que reordenen algunas líneas y añadan algunas más, hace que los problemas de Parsons sean significativamente más difíciles Harms, Chen, and Kelleher (2016)."
  },
  {
    "objectID": "exercises.html#exercises-tracing",
    "href": "exercises.html#exercises-tracing",
    "title": "13  Tipos de ejercicios",
    "section": "13.2 Seguir",
    "text": "13.2 Seguir\nSeguir la ejecución es la inversa de un problema de Parsons: dadas unas pocas líneas de código, los/las estudiantes tienen que rastrear el orden en que se ejecutan esas líneas.\nEsta es una habilidad esencial de depuración y una buena manera de consolidar la comprensión de los/las estudiantes de los bucles, los condicionales y el orden de evaluación de las llamadas a funciones y métodos.\nLa forma más fácil de implementarlo es hacer que los/las estudiantes escriban una secuencia de pasos etiquetados. Hacer que elijan la secuencia correcta de un conjunto (es decir, presentarla como una pregunta de opción múltiple) añade carga cognitiva sin añadir valor, ya que tienen que hacer todo el trabajo de averiguar la secuencia correcta y luego buscarla en la lista de opciones.\n\n13.2.1 Seguir el orden de ejecución\n¿En qué orden se ejecutan las líneas etiquetadas en este bloque de código?\nA)     vals = [-1, 0, 1]\nB)     suma_inversa = 0\n       try:\n           for v in vals:\nC)             suma_inversa += 1/v\n       except:\nD)         pass\n\nSeguir los valores es similar a seguir la ejecución, pero en lugar de deletrear el orden en que se ejecuta el código, el/la estudiante enumera los valores que una o más variables toman a medida que se ejecuta el programa.\nUna forma de implementar esto es dar a cada estudiante una tabla cuyas columnas estén etiquetadas con nombres de variables y cuyas filas estén etiquetadas con números de línea, y pedirles que completen los valores que las variables toman en dichas líneas.\n\n13.2.2 Seguir los valores\n¿Qué valores toman izquierda y derecha a medida que este programa se ejecuta?\nA) izquierda = 23\nB) derecha = 6\nC) while derecha:\nD)     izquierda, derecha = derecha, izquierda % derecha\n\n\n\nNúmero de línea\nizquierda\nderecha\n\n\n\n\n___\n___\n___\n\n\n___\n___\n___\n\n\n___\n___\n___\n\n\n___\n___\n___\n\n\n___\n___\n___\n\n\n___\n___\n___\n\n\n\n\nTambién puedes requerir que los/las estudiantes rastreen el código hacia atrás para averiguar cuál debe haber sido la entrada para que el código produzca un resultado determinado Armoni and Ginat (2008).\nEstos problemas de ejecución inversa requieren razonamientos de búsqueda y deducción, y cuando la salida es un mensaje de error, contribuyen a que los/las estudiantes desarrollen habilidades valiosas de depuración.\n\n13.2.3 Ejecución inversa\nRellena el número faltante en valores que causó que esta función se interrumpiera.\nvalores = [ [1.0, -0.5], [3.0, 1.5], [2.5, ___] ]\ncorridaTotal = 0.0\nfor (lectura, escalada) in valores:\n    corridaTotal += lectura / escalada\n\nLos ejercicios de ajuste mínimo también ayudan a desarrollar habilidades de depuración.\nDadas unas pocas líneas de código que contienen un error, el/la estudiante deben encontrarlo y hacer un pequeño cambio para arreglarlo.\nEl cambio puede hacerse usando programar y ejecutar, mientras que la identificación se puede hacer como una pregunta de opción múltiple.\n\n13.2.4 Ajuste mínimo\nEsta función se supone que prueba si un número se encuentra dentro de un rango. Realiza un pequeño cambio para que la función realmente lo haga.\ndef inside(punto, mas_bajo, mas_alto):\n    if (punto &lt;= mas_bajo):\n        return false\n    elif (punto &lt;= mas_alto):\n        return false\n    else:\n        return true\n\nLos ejercicios de tema y variación son similares, pero se le pide al estudiante que haga una pequeña alteración que cambie la salida de alguna manera específica en lugar de realizar un cambio para corregir un error. Los cambios permitidos pueden incluir cambiar el valor inicial de una variable, reemplazar una llamada a una función por otra, intercambiar bucles internos y externos, o cambiar el orden de las pruebas en un condicional complejo.\nDe nuevo, este tipo de ejercicio da a los/las estudiantes la oportunidad de practicar una habilidad útil para el mundo real: la forma más rápida de producir el código que necesitan es ajustando un código que ya hace algo parecido.\n\n13.2.5 Tema y variaciones\nCambia el bucle interno de la siguiente función para que llene el triángulo superior izquierdo de una imagen con un color especificado.\nfunction llenarTriangulo(imagen, color) is\n    for x := 1 to imagen.width do\n        for y := 1 to imagen.height do\n            imagen[x, y] = color\n        end\n    end\nend\n\nLos ejercicios de modificación son el complemento de los ejercicios temáticos y de variación: dado un fragmento de código que funciona, el/la estudiante tiene que modificarlo de alguna manera sin cambiar la salida.\nPor ejemplo, el/la estudiante puede reemplazar los bucles con expresiones vectorizadas o simplificar la condición en un bucle while.\nEsta es también una habilidad útil para la vida real, pero a menudo hay tantas formas de modificar el código que la calificación requiere inspección humana.\n\n13.2.6 Refactorizar\nEscribir una sola compresión de lista que tenga el mismo efecto que este bucle.\nresultado = []\nfor v in valores:\n    if len(v) &gt; rango:\n        resultado.append(v)"
  },
  {
    "objectID": "exercises.html#exercises-diagrams",
    "href": "exercises.html#exercises-diagrams",
    "title": "13  Tipos de ejercicios",
    "section": "13.3 Diagramas",
    "text": "13.3 Diagramas\nHacer que los estudiantes dibujen mapas conceptuales y otros diagramas brinda una idea de cómo están pensando (Section 4.1), pero los diagramas de forma libre requieren que una persona los evalúe (no pueden ser calificados automáticamente), por lo que consumen mucho tiempo.\nEtiquetar los diagramas, por otra parte, es casi tan potente pedagógicamente pero mucho más fácil de escalar. En lugar de hacer que tus estudiantes creen diagramas desde cero, puedes entregarles un diagrama y un conjunto de etiquetas y hacer que coloquen las etiquetas en los lugares correctos. El diagrama puede ser una estructura de datos (“después de ejecutar este código, ¿qué variables apuntan a qué partes de esta estructura?”), un gráfico (“une con flechas cada uno de estos fragmentos de código con la parte del gráfico generado”), o el propio código (“haz coincidir cada término con un ejemplo de ese mismo elemento en el programa”).\n\n13.3.1 Etiquetado de un diagrama\nLa ?fig-exercises-labeling muestra cómo un fragmento pequeño de HTML se representa en memoria. Coloca las etiquetas 1–9 sobre los elementos del árbol para mostrar el orden en el que se alcanzan en un recorrido en profundidad.\n\n{fig-exercises-labeling, fig-alt = “Inicia con una caja con una letra P mayúscula, salen cuatro flechas, dos hacia dos cajas diferentes con la misma etiqueta:”texto”, otra hacia una caja con la letra I mayúscula y la última hacia una caja con la letra B mayúscula. Desde la caja de la letra B salen dos flechas, una hacia una caja etiquetada como “texto” y otra hacia una caja con la letra U mayúscula. Desde las letras I e U también salen flechas hacia diferentes cajas etiquetadas como “texto”.}\nOtra forma de usar diagramas es dar a tus estudiantes las partes del diagrama y pedirles que las organicen correctamente.\nEste es un equivalente visual a un problema de Parsons, y para ayudar con el etiquetado puedes proporcionar más o menos del esqueleto, de acuerdo a la dificultad para la que crees que están preparados/as.\nTengo buenas memorias de tratar de colocar resistencias y capacitores en un diagrama de circuito con el fin de obtener el voltaje correcto en un punto determinado, y he visto docentes que les dan a sus estudiantes un conjunto definido de bloques de Scratch y les piden que creen un diseño particular usando solo esos bloques.\nLos problemas de correspondencia pueden pensarse como un caso especial de etiquetado en el que el “diagrama” es una columna de texto y las etiquetas se toman de la otra columna.\nEn la correspondencia uno-a-uno se le da a cada estudiante dos listas de igual longitud y se le pide que asocie los elementos correspondientes, p.ej. “asocia cada fragmento de código con la salida que produce”.\n\n13.3.2 Correspondencia\nAsocia cada operador de expresión regular en la ?fig-exercises-matching con lo que hace.\n\n {fig-exercises-matching fig-alt=“en el primer renglón llamado”Operador”, se presentan cajas con símbolos en el siguiente orden: signo de pregunta, asterisco, más, peso, potencia. En el segundo renglón llamado “Acción” hay cajas etiquetadas con el siguiente orden: inicio de línea, cero o uno, fin de línea, uno o más, cero o más.”}\nCon la correspondencia de muchos a muchos las listas no tienen la misma longitud, por lo que algunos elementos pueden asociarse con varios y otros pueden no ser emparejados en absoluto.\nLas correspondencias muchos-a-muchos son más difíciles porque los/las estudiantes no pueden hacer los apareamientos fáciles primero para reducir su espacio de búsqueda.\nLos problemas de correspondencia pueden ser implementados en exámenes autocorregibles haciendo que los/las estudiantes/as envíen listas de ítems apareados (como “A3, B1, C2”), pero eso es burdo y propenso a errores.\nHacer que reconozcan un conjunto de pares correctos en preguntas de opción múltiple es aún peor, ya que es muy fácil de malinterpretar, lamentablemente.\nDibujar o arrastrar funciona mucho mejor, pero requiere más trabajo para implementarlo.\nRanking es un caso especial de emparejamiento que es (ligeramente) más fácil de responder a través de listas, ya que nuestras mentes son bastante buenas en la detección de errores o anomalías en las secuencias. Los criterios de ranking determinan el nivel de razonamiento requerido.\nSi haces que tus estudiantes ordenen los algoritmos del más rápido al más lento, probablemente estés ejercitando la memoria (es decir, pidiéndoles que reconozcan los nombres de los algoritmos y que sepan sus propiedades), mientras que al pedirles que ordenen las soluciones de las más robustas a las más frágiles, ejercitas su razonamiento y juicio.\nResumir también requiere que los/las estudiantes utilicen un pensamiento de orden superior y les da la oportunidad de practicar una habilidad que es muy útil para informar sobre errores. Por ejemplo, les puedes preguntar a tus estudiantes: “¿Qué frase describe mejor cómo cambia la salida de f a medida que x varía de 0 a 10?” y luego darles varias opciones como una pregunta de opción múltiple.\nTambién puedes pedir respuestas muy cortas de formato libre a preguntas en dominios restringidos, como por ejemplo, “¿Cuál es la característica clave para que un algoritmo de ordenamiento sea estable?” No podemos automatizar completamente la comprobación de las respuestas sin generar un número frustrante de falsos positivos (aceptando respuestas incorrectas) y falsos negativos (rechazando las correctas), pero las preguntas de este tipo se prestan bien a la clasificación por pares (?sec-individual-peer)."
  },
  {
    "objectID": "exercises.html#exercises-grading",
    "href": "exercises.html#exercises-grading",
    "title": "13  Tipos de ejercicios",
    "section": "13.4 Calificación automática",
    "text": "13.4 Calificación automática\nLas herramientas automáticas de corrección de evaluaciones han existido desde antes que yo naciera: la primera mención publicada data de 1960 y las encuestas publicadas por Douce, Livingstone, and Orwell (2005),Ihantola et al. (2010) mencionan muchas herramientas específicas por su nombre.\nConstruir este tipo de herramientas es mucho más complejo de lo que podría parecer a primera vista.\n¿Cómo se representan las tareas?\n¿Cómo se realiza un seguimiento y se informan los envíos?\n¿Pueden los/las estudiantes trabajar cooperativamente?\n¿Cómo se pueden ejecutar los envíos de forma segura?\nEdwards, Shams, and Estep (2014) es un artículo dedicado por completo a un esquema adaptativo para detectar y gestionar bucles infinitos de los envíos de código, y este es solo uno de las muchos problemas que surgen.\nCuando se habla de autocalificadores, es importante diferenciar la satisfacción de los/las estudiantes de los resultados del aprendizaje. Por ejemplo, Maguire, Maguire, and Kelly (2018) sustituyó los laboratorios informales de programación para un curso de Ciencias de la Computación de segundo año por una prueba semanal evaluada utilizando un calificador automático. A los/las estudiantes no les gustó el sistema automatizado, pero la tasa general de fracasos del curso se redujo a la mitad y se triplicó el número de estudiantes que obtuvieron calificaciones con honores. Por el contrario, Rubio-Sánchez et al. (2014) también comenzó a utilizar un autocalificador diseñado para competencias, pero no vio una disminución significativa en las tasas de deserción de sus estudiantes; una vez más, los/las estudiantes hicieron comentarios negativos sobre la herramienta, que los/las autores atribuyen a la calidad de los mensajes de retroalimentación más que a una aversión a la autocalificación.\nSridhara et al. (2016) adoptaron un enfoque diferente. Utilizaron fuzz testing (casos de prueba generados aleatoriamente) para comprobar si el código del estudiante realiza lo mismo que una implementación de referencia proporcionada por el/la docente. En el primer proyecto de un curso introductorio de 1400 estudiantes, el fuzz testing identificó errores que no habían sido detectados en un conjunto de casos de prueba escritos a mano para más del 48% de los/las estudiantes.\nBasu et al. (2015) dio a sus estudiantes una serie de soluciones a casos de prueba, pero tenían que desbloquear cada caso respondiendo preguntas sobre su comportamiento esperado antes de que se les permitiera aplicarlo a la solución propuesta por ellos/as.\nPor ejemplo, supongamos que los/las estudiantes tenían que escribir una función para encontrar el mayor par de números adyacentes en una lista. Antes de que se les permitiera usar las pruebas de la pregunta, tenían que elegir la respuesta correcta a: “¿Qué produce parMasGrande(4, 3, -1, 5, 3, 3)?”. En un curso universitario de 1300 personas, la gran mayoría de los/las estudiantes optaron por validar su comprensión de los casos de prueba de esta manera antes de intentar resolver los problemas, y así hicieron menos preguntas y expresaron menos confusión acerca de las tareas.\n\n13.4.1 En contra de las herramientas “listas para usar” disponibles en el mercado\nEs tentador calificar el código de los/las estudiantes con herramientas de revisión de estilo disponibles y de acceso sencillo. Sin embargo, Nutbrown and Higgins (2016) inicialmente no encontraron correlación entre las calificaciones proporcionadas por personas y las violaciones a las reglas del corrector de estilo. A veces esto se debía a que los/las estudiantes violaban una regla muchas veces (perdiendo así más puntos de los que deberían haber perdido), pero otras veces se debía a que enviaban el código de inicio de tarea con pocas alteraciones y de esa manera obtenían más puntos de los que deberían haber obtenido.\nIncluso las herramientas construidas específicamente para enseñar pueden quedar por debajo de las necesidades de los/las docentes. Keuning, Jeuring, and Heeren (2016a),Keuning, Jeuring, and Heeren (2016b) observaron los mensajes producidos por 69 herramientas de calificación automática. Encontraron que estas herramientas a menudo no dan retroalimentación sobre cómo solucionar problemas y dar el siguiente paso. También encontraron que la mayoría de los/las docentes no pueden adaptar fácilmente la mayoría de las herramientas a sus necesidades: como muchas herramientas de flujo de trabajo, tienden a hacer cumplir los supuestos no reconocidos de sus creadores sobre cómo funcionan las instituciones. Tu esquema de clasificación es una buena lista de requisitos para chequear cuando se examinan herramientas de este tipo.\n\nBuffardi and Edwards (2015) presenta una reflexión bien documentada sobre la idea de proporcionar una retroalimentación automatizada. Su punto de partida es que, “Los sistemas de calificación automatizados ayudan a los/las estudiantes a identificar errores en su código, [pero] pueden inadvertidamente disuadir a los/las estudiantes de pensar críticamente y probar a fondo y, en cambio, fomentan dependencia con las pruebas del docente”. Una de las cuestiones clave que identificaron es que un/una estudiante puede probar a fondo su código, pero es posible que la característica aún no se implemente de acuerdo con las especificaciones del docente. En este caso, el “fallo” no es causado por la falta de pruebas sino por un malentendido de los requisitos, y es poco probable que más pruebas expongan el problema.\nSi el sistema de calificación automática no proporciona una retroalimentación que brinde una mejor comprensión y aplicación de los conocimientos, esta experiencia sólo frustrará al estudiante. Con el fin de proporcionar esa retroalimentación, el sistema de Buffardi and Edwards (2015) identifica qué métodos en el código del estudiante se ejecutan mediante pruebas fallidas para que el sistema pueda asociar pruebas fallidas con características particulares de lo que envió el/la estudiante. El sistema decide si se han “ganado” ayudas específicas viendo si el/la estudiante ha probado la característica asociada lo suficiente, para evitar que los/las estudiantes se apoyen en las ayudas en vez de realizar las pruebas. En Sridhara et al. (2016) se describen otros enfoques para compartir la retroalimentación con los/las estudiantes cuando se prueba automáticamente su código. Lo primero es proporcionar la salida esperada para las pruebas—pero luego los/las estudiantes generan la salida conocida incrustando el dato directamente en el código fuente del programa Esta práctica se conoce como hardcodear y dejandola fija para esas entradas (porque todo lo que pueda manipularse se hará).\nLo segundo es informar los resultados de la aprobación o rechazo del código de los/las estudiantes, pero suministrando las entradas y salidas reales de las pruebas solo después de la fecha de envío. Sin embargo, es frustante decirles a los/las estudiantes que se han equivocado pero no decirles por qué. Una tercera opción es utilizar una técnica llamada hashing para generar un valor que depende de la salida pero sin revelarla.\nSi el/la usuario/a produce exactamente el resultado correcto entonces su hash desbloqueará la solución, pero es imposible hacer el camino inverso a partir del hash para averiguar cuál se supone que es la salida.\nEl hashing requiere más trabajo y explicación para configurarlo, pero logra un buen balance entre revelar respuestas prematuramente y no revelarlas cuando podría ser de ayuda."
  },
  {
    "objectID": "exercises.html#exercises-higher",
    "href": "exercises.html#exercises-higher",
    "title": "13  Tipos de ejercicios",
    "section": "13.5 Razonamientos de alto nivel",
    "text": "13.5 Razonamientos de alto nivel\nMuchos tipos de ejercicios de programación son difíciles de evaluar por los/las docentes en una clase con más de un puñado de estudiantes y son igualmente difíciles de evaluar mediante plataformas automatizadas. Las clases van desarrollándose con vistas a proyectos de programación mayores (si todo va bien), pero la única manera de dar retroalimentación es caso por caso. La revisión de código también es, en general, difícil de calificar automáticamente, pero puede ser abordada si se proporciona a los/las estudiantes una lista de fallos a buscar y se les pide que comparen comentarios con líneas de código concretas.\nPor ejemplo, se le puede decir a un/a estudiante que hay dos errores de indentación y un nombre de variable incorrecto y se le puede pedir que los señale.\nSi son estudiantes/as más avanzados/as, se les podría dar media docena de tipos de comentarios que podrían hacerse sobre el código sin que se les diga cuántos de cada tipo deberían encontrar.\nStegeman, Barendsen, and Smetsers (2016) es un buen punto de partida para una rúbrica de estilo de código, mientras que Luxton-Reilly (2009) muestra la revisión por pares en las clases de programación de manera más general.\nSi se pide a los/las estudiantes que hagan revisiones, hay que usar la revisión por pares calibrada (?sec-individual-peer) para que tengan modelos de cómo debería ser una buena retroalimentación.\n\n13.5.1 Revisión de código\nMarca los problemas en cada línea de código usando la rúbrica proporcionada.\n01)  def addem(f):\n02)      x1 = open(f).readlines()\n03)      x2 = [x for x in x1 if x.strip()]\n04)      changes = 0\n05)      for v in x2:\n06)          print('total', total)\n07)          tot = tot + int(v)\n08)      print('total')\n\nnombre de la variable incorrecto\nuso de variable indefinida\nfalta el valor de salida\nvariable no usada"
  },
  {
    "objectID": "exercises.html#exercises-exercises",
    "href": "exercises.html#exercises-exercises",
    "title": "13  Tipos de ejercicios",
    "section": "13.6 Ejercicios",
    "text": "13.6 Ejercicios\n\n13.6.1 Programar y ejecutar (parejas/10’)\nCrea un ejercicio corto de programa y ejecuta, luego intercambia con tu pareja y analiza cuánto tiempo les toma a cada uno de ustedes entender y hacer el ejercicio del otro/a.\n¿Hubo alguna ambigüedad o malentendido en la descripción del ejercicio?\n\n\n13.6.2 Invertir el código y la ejecución (grupos pequeños/15’)\nForma grupos de 4 a 6 personas. Haz que cada integrante del grupo cree un ejercicio de programar y ejecutar invertido: el ejercicio debe requerir que las personas averigüen qué entrada produce una salida en particular. Elige dos ejercicios al azar y mira cuántas entradas diferentes que satisfagan los requisitos puede encontrar el grupo.\n\n\n13.6.3 Siguiendo valores (parejas/10’)\nEscribe un programa corto (10-15 líneas), intercambia con tu pareja y sigue cómo las variables del programa cambian de valor con el tiempo. ¿Qué diferencias hay en la forma en que tú y tu pareja escribieron sus seguimientos?\n\n\n13.6.4 Refactorizar (grupos pequeños/15’)\nLa clase trabaja en grupos de 3-4 personas.\nEn cada grupo, cada persona selecciona un fragmento corto de código (10–30 líneas de largo) que haya escrito y que no sea tan ordenado como podría ser. Luego, el/la docente elige un/a estudiante al azar por grupo: todas las personas de la clase ordenan su código independientemente.\n¿En qué se diferencian las versiones limpias? ¿Qué tan bien o que tan mal podrían acomodarse todas estas variaciones si se calificara automáticamente, o en una clase grande?\n\n\n13.6.5 Rotulando un diagrama (parejas/10’)\nDibuja un diagrama mostrando algo que se ha explicado recientemente: cómo los navegadores obtienen datos de los servidores, la relación entre los objetos y las clases, o cómo se indexan los dataframes en R.\nPon las etiquetas en el lateral y pídele a tu pareja que las asigne a cada elemento del diagrama.\n\n\n13.6.6 Acertijos de lápiz y papel (toda la clase/15’)\nButler, Bezakova, and Fluet (2017) describe un conjunto de rompecabezas de lápiz y papel que pueden convertirse en asignaciones de programación introductorias, señalando que estas tareas son disfrutadas por los/las estudiantes y que fomentan la metacognición. Piensa en un simple rompecabezas de lápiz y papel al que jugabas en tu niñez y describe cómo lo convertirías en un ejercicio de programación.\n\n\n13.6.7 Contando fallos (parejas/15’)\nCualquier estimación útil de cuánto tiempo se necesita para resolver un ejercicio debe considerar cuán frecuentes son los fallos y cuánto tiempo se pierde con ellos. Por ejemplo, editar archivos de texto parece una tarea sencilla, pero ¿qué pasa con la búsqueda de esos archivos? La mayoría de los editores que usan interfase gráfica guardan archivos en el escritorio o en el directorio personal del usuario/a; si los archivos utilizados en un curso se almacenan en otro lugar, una proporción importante de los/las estudiantes no podrá navegar al directorio correcto sin ayuda. (Si esto te parece un problema menor, por favor vuelve a visitar la discusión del punto ciego de las personas expertas en el Chapter 4.)\nTrabajando con tu pareja, haz una lista de las cosas “simples” que has notado que salen mal en los ejercicios que has usado o tomado.\n¿Con qué frecuencia aparecen?\n¿Cuánto tiempo tardan los estudiantes en arreglarse por su cuenta o con ayuda?\n¿Cuánto tiempo de clase asignas actualmente para lidiar con estos problemas?\n\n\n13.6.8 Hablando de tiempo (individual/10’)\n¿Qué tan precisas han sido las estimaciones de tiempo de los ejercicios de este libro hasta ahora?\n\n\n\n\nArmoni, Michal, and David Ginat. 2008. “Reversing: A Fundamental Idea in Computer Science.” Computer Science Education 18 (3): 213–30. https://doi.org/10.1080/08993400802332670.\n\n\nBasu, Soumya, Albert Wu, Brian Hou, and John DeNero. 2015. “Problems Before Solutions: Automated Problem Clarification at Scale.” In 2015 Conference on Learning @ Scale (L@S’15). Association for Computing Machinery (ACM). https://doi.org/10.1145/2724660.2724679.\n\n\nBuffardi, Kevin, and Stephen H. Edwards. 2015. “Reconsidering Automated Feedback: A Test-Driven Approach.” In 2015 Technical Symposium on Computer Science Education (SIGCSE’15). Association for Computing Machinery (ACM). https://doi.org/10.1145/2676723.2677313.\n\n\nButler, Zack, Ivona Bezakova, and Kimberly Fluet. 2017. “Pencil Puzzles for Introductory Computer Science.” In 2017 Technical Symposium on Computer Science Education (SIGCSE’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3017680.3017765.\n\n\nDouce, Christopher, David Livingstone, and James Orwell. 2005. “Automatic Test-Based Assessment of Programming.” Journal on Educational Resources in Computing 5 (3). https://doi.org/10.1145/1163405.1163409.\n\n\nEdwards, Stephen H., Zalia Shams, and Craig Estep. 2014. “Adaptively Identifying Non-Terminating Code When Testing Student Programs.” In 2014 Technical Symposium on Computer Science Education (SIGCSE’14). Association for Computing Machinery (ACM). https://doi.org/10.1145/2538862.2538926.\n\n\nEricson, Barbara J., Lauren E. Margulieux, and Jochen Rick. 2017. “Solving Parsons Problems Versus Fixing and Writing Code.” In 2017 Koli Calling Conference on Computing Education Research (Koli’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3141880.3141895.\n\n\nEricson, Barbara J., Steven Moore, Briana B. Morrison, and Mark Guzdial. 2015. “Usability and Usage of Interactive Features in an Online Ebook for CS Teachers.” In 2015 Workshop in Primary and Secondary Computing Education (WiPSCE’15), 111–20. Association for Computing Machinery (ACM). https://doi.org/10.1145/2818314.2818335.\n\n\nHarms, Kyle James, Jason Chen, and Caitlin L. Kelleher. 2016. “Distractors in Parsons Problems Decrease Learning Efficiency for Young Novice Programmers.” In 2016 International Computing Education Research Conference (ICER’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2960310.2960314.\n\n\nIhantola, Petri, Tuukka Ahoniemi, Ville Karavirta, and Otto Seppälä. 2010. “Review of Recent Systems for Automatic Assessment of Programming Assignments.” In 2010 Koli Calling Conference on Computing Education Research (Koli’10). Association for Computing Machinery (ACM). https://doi.org/10.1145/1930464.1930480.\n\n\nIhantola, Petri, and Ville Karavirta. 2011. “Two-Dimensional Parson’s Puzzles: The Concept, Tools, and First Observations.” Journal of Information Technology Education: Innovations in Practice 10: 119–32. https://doi.org/10.28945/1394.\n\n\nKeuning, Hieke, Johan Jeuring, and Bastiaan Heeren. 2016a. “Towards a Systematic Review of Automated Feedback Generation for Programming Exercises.” In 2016 Conference on Innovation and Technology in Computer Science Education (ITiCSE’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2899415.2899422.\n\n\n———. 2016b. “Towards a Systematic Review of Automated Feedback Generation for Programming Exercises - Extended Version.” Technical Report UU-CS-2016-001, Utrecht University.\n\n\nLuxton-Reilly, Andrew. 2009. “A Systematic Review of Tools That Support Peer Assessment.” Computer Science Education 19 (4): 209–32. https://doi.org/10.1080/08993400903384844.\n\n\nMaguire, Phil, Rebecca Maguire, and Robert Kelly. 2018. “Using Automatic Machine Assessment to Teach Computer Programming.” Computer Science Education, February, 1–18. https://doi.org/10.1080/08993408.2018.1435113.\n\n\nMorrison, Briana B., Lauren E. Margulieux, Barbara J. Ericson, and Mark Guzdial. 2016. “Subgoals Help Students Solve Parsons Problems.” In 2016 Technical Symposium on Computer Science Education (SIGCSE’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2839509.2844617.\n\n\nNutbrown, Stephen, and Colin Higgins. 2016. “Static Analysis of Programming Exercises: Fairness, Usefulness and a Method for Application.” Computer Science Education 26 (2-3): 104–28. https://doi.org/10.1080/08993408.2016.1179865.\n\n\nParsons, Dale, and Patricia Haden. 2006. “Parson’s Programming Puzzles: A Fun and Effective Learning Tool for First Programming Courses.” In 2006 Australasian Conference on Computing Education (ACE’06), 157–63. Australian Computer Society.\n\n\nRubio-Sánchez, Manuel, Päivi Kinnunen, Cristóbal Pareja-Flores, and J. Ángel Velázquez-Iturbide. 2014. “Student Perception and Usage of an Automated Programming Assessment Tool.” Computers in Human Behavior 31 (February): 453–60. https://doi.org/10.1016/j.chb.2013.04.001.\n\n\nSanders, Kate, Jaime Spacco, Marzieh Ahmadzadeh, Tony Clear, Stephen H. Edwards, Mikey Goldweber, Chris Johnson, Raymond Lister, Robert McCartney, and Elizabeth Patitsas. 2013. “The Canterbury QuestionBank: Building a Repository of Multiple-Choice CS1 and CS2 Questions.” In 2013 Conference on Innovation and Technology in Computer Science Education (ITiCSE’13). Association for Computing Machinery (ACM). https://doi.org/10.1145/2543882.2543885.\n\n\nSridhara, Sumukh, Brian Hou, Jeffrey Lu, and John DeNero. 2016. “Fuzz Testing Projects in Massive Courses.” In 2016 Conference on Learning @ Scale (L@S’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2876034.2876050.\n\n\nStegeman, Martijn, Erik Barendsen, and Sjaak Smetsers. 2016. “Rubric for Feedback on Code Quality in Programming Courses.” http://stgm.nl/quality."
  },
  {
    "objectID": "finale.html#sec-finale-Greg",
    "href": "finale.html#sec-finale-Greg",
    "title": "18  ¿Por qué enseñamos?",
    "section": "18.2 Greg",
    "text": "18.2 Greg\nCuando comencé a trabajar como voluntario en la Universidad de Toronto, mis estudiantes me preguntaron por qué enseñaba gratis. Esta fue mi respuesta:\n\nCuando tenía tu edad, pensaba que las universidades existían para enseñarle a la gente a aprender. Más tarde, en la escuela de posgrado, pensaba que las universidades se dedicaban a investigar y a crear nuevos conocimientos. Sin embargo, ahora que tengo cuarenta años pienso que lo que realmente te estamos enseñando es cómo hacerte cargo del mundo, porque vas a tener que hacerlo quieras o no.\nMis padres tienen setenta años. Ya no manejan el mundo; son las personas de mi edad quienes aprueban leyes y toman decisiones de vida o muerte en los hospitales. Y sin importar qué tan aterrador sea, nosotras/os somos las personas adultas.\nEn veinte años, nosotras/os estaremos camino a la jubilación y tú estarás a cargo. Esto puede parecer mucho tiempo cuando tienes diecinueve años, pero se pasa en un suspiro. Por eso te damos problemas cuyas respuestas no se pueden encontrar en las notas del año pasado. Por eso te ponemos en situaciones en las que tienes que decidir qué hacer ahora, qué se puede dejar para más tarde y qué puedes simplemente ignorar. Porque si no aprendes cómo hacer estas cosas ahora, no estarás lista/o para hacerlo cuando sea necesario.\n\nTodo esto era verdad, pero no es toda la historia. No quiero que la gente haga del mundo un lugar mejor para que yo me pueda retirar cómodamente. Quiero que lo hagan porque es la aventura más grande de nuestro tiempo. Hace ciento cincuenta años, la mayoría de las sociedades practicaban la esclavitud. Hace cien años, en Canadá, mi abuela [no era considerada una persona desde el punto de vista legal][famous-five]. El año en que nací, la mayoría de las personas del mundo sufrían bajo algún régimen totalitario y la justicia todavía dictaminaba terapia de electroshock para “curar” a las/los homosexuales. Todavía hay muchas cosas que están mal en el mundo, pero mira cuántas más opciones tenemos que nuestras/os abuelas/os. Mira cuántas cosas más podemos saber, ser y disfrutar porque finalmente nos estamos tomando en serio la Regla de Oro.\nHoy soy menos optimista que entonces. Cambio climático, extinción masiva, capitalismo de vigilancia, desigualdad a una escala que no habíamos visto desde hace un siglo, el resurgimiento del nacionalismo racista: mi generación vio cómo sucedió todo esto y se quedó de brazos cruzados. La factura de nuestra cobardía, letargo y avaricia no se pagará hasta que mi hija crezca, pero llegará, y para cuando lo haga, no habrá soluciones fáciles para estos problemas (y posiblemente no haya soluciones en absoluto).\nAsí que por eso enseño: estoy enojado. Estoy enojado porque tu género, el color de tu piel y la riqueza y conexiones de tu madre y de tu padre no deberían contar más que cuán inteligente, honesta/o o trabajadora/or seas. Estoy enojado porque convertimos a internet en una cloaca. Estoy enojado porque los nazis están en marcha una vez más y los multimillonarios juegan con cohetes espaciales mientras el planeta se derrite. Estoy enojado, entonces enseño, porque el mundo solo mejora cuando enseñamos a las personas cómo mejorarlo.\nEn su ensayo de 1947 [“¿Por qué escribo?”][por-que-escribo], George Orwell escribióEn el link encuentras el texto completo en castellano. El fragmento que sigue es una traducción propia del original en inglés.:\n\nEn una época pacífica, podría haber escrito libros superficiales, decorativos o simplemente descriptivos, y podría haber permanecido casi inconsciente de mis lealtades políticas. Pero tal como están las cosas, me he visto obligado a convertirme en una especie de panfletista… Cada línea de trabajo serio que he escrito desde 1936 ha sido escrita, directa o indirectamente, en contra del totalitarismo… Me parece una tontería, en un período como el nuestro, pensar que uno puede evitar escribir sobre tales temas. Todas las personas escriben al respecto de una manera u otra. La cuestión es simplemente elegir de qué lado lo hacemos.\n\nReemplaza “escribir” por “enseñar” y sabrás porqué hago lo que hago.\nGracias por leer—espero que podamos enseñar juntos algún día. Hasta entonces:\n\nComienza donde estás. Usa lo que tienes. Ayuda a quien puedas."
  },
  {
    "objectID": "finale.html#sec-finale-Yani",
    "href": "finale.html#sec-finale-Yani",
    "title": "18  ¿Por qué enseñamos?",
    "section": "18.3 Yani",
    "text": "18.3 Yani\nCrecí en un pequeño pueblo de la Argentina rural y tuve la suerte de tener acceso a una computadora en mi escuela primaria.\nDesde el momento en que la vi, a los seis años, supe que era algo especial, y despertó en mí un amor por la informática y y la programación que me han acompañado toda la vida.\nA pesar de enfrentarme a muchos retos en el camino, gracias al apoyo de mi familia, nunca dejé de perseguir mi pasión por enseñar y compartir mis conocimientos de informática y programación con las demás personas.\nPara mí, enseñar es una forma de empoderar personas, una forma de ayudarles a aprender, crecer y alcanzar todo su potencial. Se trata de ayudar a la gente a descubrir la alegría de aprender, la emoción de resolver un problema y la satisfacción de dominar una nueva habilidad.\nA lo largo de los años, he enseñado a infantes, adolescentes y personas adultas de diversos orígenes en entornos formales e informales.\nA lo largo de mi trayectoria docente, he tenido la suerte de conectar con personas de ideas afines y de cofundar y ayudar a desarrollar comunidades que fomentan el intercambio de conocimientos y la colaboración, en las que las personas pueden ayudarse mutuamente a mejorar.\nAdemás, he trabajado con universidades y organizaciones de todo el mundo para crear recursos abiertos, gratuitos y accesibles que pueden influir positivamente en la vida de los demás.\nEnseño porque la educación puede transformar vidas… sin duda transformó la mía. Se trata de ayudar a adquirir el poder de cambiar nuestras vidas y las de quienes nos rodean. Se trata de ayudar a adquirir un poder que nadie puede arrebatarte una vez que lo tienes. Un poder que se multiplica cuanto más lo usas, cuanto más lo compartes.\nPor eso enseño: para compartir mi poder con las demás personas. Para devolver un poco de todo lo que yo recibí, para que otras personas tengan la oportunidad de elegir.\nTe invito a hacer lo mismo.\nYa seas docente con experiencia, un/a estudiante o una persona entusiasta, tus conocimientos son valiosos.\nPodemos marcar una diferencia en el mundo."
  },
  {
    "objectID": "finale.html#sec-finale-instead",
    "href": "finale.html#sec-finale-instead",
    "title": "18  ¿Por qué enseñamos?",
    "section": "18.4 Qué otras cosas leer",
    "text": "18.4 Qué otras cosas leer\nSi tienes prisa o quieres tener una idea de lo que cubrirá este libro, N. C. C. Brown and Wilson (2018) presenta diez sugerencias basadas en evidencias para enseñar computaciónEn inglés. También puedes disfrutarTodos en inglés:\n\n[El entrenamiento para instructoras/es de The Carpentries (Las/los carpinteras/os)][carpentries-instructor], en el cual está basado este libro.\nLang (2016) y Huston (2012), que son textos cortos y accesibles, que conectan las cosas que puedes aplicar inmediatamente con la investigación que hay detrás de ellas y las fundamenta.\nBergin et al. (2012),Lemov (2014),Major, Harris, and Zakrajsek (2015),Brookfield and Preskill (2016),Rice (2018),Weinstein, Sumeracki, and Caviglioli (2018) están repletos de sugerencias prácticas sobre cosas que puedes hacer en tu clase, pero pueden cobrar más sentido una vez que tengas un marco conceptual para entender por qué sus ideas funcionan.\nBruyckere, Kirschner, and Hulshof (2015), quien plantea qué cosas son ciertas sobre la educación al explicar qué cosas no lo son y Didau and Rose (2016), que fundamenta la teoría del aprendizaje en psicología cognitiva.\nPapert (1993), que continúa siendo una visión inspiradora sobre cómo las computadoras pueden cambiar la educación. [La excelente descripción de Amy Ko][ko-mindstorms] es una síntesis de las ideas de Papert, mejor que la que podría hacer yo, y Crawford (2010) es una compañía provocadora y estimulante a ambos textos.\nGreen (2014),McMillan Cottom (2017),Watters (2014) explican por qué tantos intentos de reformas educativas han fallado a lo largo de los últimos cuarenta años, cómo colegas que trabajan solo por dinero han explotado y exacerbado la desigualdad en nuestra sociedad, y cómo la tecnología repetidamente ha fracasado en revolucionar la educación.\nM. J. Brown (2007) y Manns and Rising (2015), porque no puedes enseñar bien sin cambiar el sistema en el que enseñamos y no puedes lograr este cambio trabajando de forma solitaria.\n\nQuienes deseen material más académico pueden encontrar gratificante leer a Guzdial (2015),Hazzan, Lapidot, and Ragonis (2014),Sentance, Barendsen, and Schulte (2018),Fincher and Robins (2019),National Academies of Sciences, Engineering, and Medicine (2018), mientras que [el blog de Mark Guzdial][guzdial-blog] ha sido consistentemente informativo, sugerente y motivador.\n\n\n\n\nBergin, Joseph, Jane Chandler, Jutta Eckstein, Helen Sharp, Mary Lynn Manns, Klaus Marquardt, Marianna Sipos, Markus Völter, and Eugene Wallingford. 2012. Pedagogical Patterns: Advice for Educators. CreateSpace.\n\n\nBrookfield, Stephen D., and Stephen Preskill. 2016. The Discussion Book: 50 Great Ways to Get People Talking. Jossey-Bass.\n\n\nBrown, Michael Jacoby. 2007. Building Powerful Community Organizations: A Personal Guide to Creating Groups That Can Solve Problems and Change the World. Long Haul Press.\n\n\nBrown, Neil C. C., and Greg Wilson. 2018. “Ten Quick Tips for Teaching Programming.” PLoS Computational Biology 14 (4). https://doi.org/10.1371/journal.pcbi.1006023.\n\n\nBruyckere, Pedro De, Paul A. Kirschner, and Casper D. Hulshof. 2015. Urban Myths about Learning and Education. Academic Press.\n\n\nCrawford, Matthew B. 2010. Shop Class as Soulcraft: An Inquiry into the Value of Work. Penguin.\n\n\nDidau, David, and Nick Rose. 2016. What Every Teacher Needs to Know about Psychology. John Catt Educational.\n\n\nFincher, Sally, and Anthony Robins, eds. 2019. The Cambridge Handbook of Computing Education Research. Cambridge University Press.\n\n\nGreen, Elizabeth. 2014. Building a Better Teacher: How Teaching Works (and How to Teach It to Everyone). W. W. Norton & Company.\n\n\nGuzdial, Mark. 2015. Learner-Centered Design of Computing Education: Research on Computing for Everyone. Morgan & Claypool Publishers.\n\n\nHazzan, Orit, Tami Lapidot, and Noa Ragonis. 2014. Guide to Teaching Computer Science: An Activity-Based Approach. Second. Springer.\n\n\nHuston, Therese. 2012. Teaching What You Don’t Know. Harvard University Press.\n\n\nLang, James M. 2016. Small Teaching: Everyday Lessons from the Science of Learning. Jossey-Bass.\n\n\nLemov, Doug. 2014. Teach Like a Champion 2.0: 62 Techniques That Put Students on the Path to College. Jossey-Bass.\n\n\nMajor, Claire Howell, Michael S. Harris, and Tod Zakrajsek. 2015. Teaching for Learning: 101 Intentionally Designed Educational Activities to Put Students on the Path to Success. Routledge.\n\n\nManns, Mary Lynn, and Linda Rising. 2015. Fearless Change: Patterns for Introducing New Ideas. Addison-Wesley.\n\n\nMcMillan Cottom, Tressie. 2017. Lower Ed: The Troubling Rise of for-Profit Colleges in the New Economy. The New Press.\n\n\nNational Academies of Sciences, Engineering, and Medicine. 2018. How People Learn II: Learners, Contexts, and Cultures. National Academies Press.\n\n\nPapert, Seymour A. 1993. Mindstorms: Children, Computers, and Powerful Ideas. Second. Basic Books.\n\n\nRice, Gail Taylor. 2018. Hitting Pause: 65 Lecture Breaks to Refresh and Reinforce Learning. Stylus Publishing.\n\n\nSentance, Sue, Erik Barendsen, and Carsten Schulte, eds. 2018. Computer Science Education: Perspectives on Teaching and Learning in School. Bloomsbury Press.\n\n\nWatters, Audrey. 2014. The Monsters of Education Technology. CreateSpace.\n\n\nWeinstein, Yana, Megan Sumeracki, and Oliver Caviglioli. 2018. Understanding How We Learn: A Visual Guide. Routledge."
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "19  Licencia",
    "section": "",
    "text": "Este es un resumen de lectura sencilla para personas (y no un sustituto) de la licencia. Por favor revisa https://creativecommons.org/licenses/by-nc/4.0/legalcode.es para el texto legal completo.\nEste trabajo se licencia bajo [Creative Commons Atribución – No Comercial 4.0][cc-by-nc-es] (CC-BY-NC-4.0).\nEres libre de:\n\nCompartir—copiar y redistribuir el material en cualquier medio o formato\nAdaptar—reacomodar, transformar y construir sobre el material.\n\nEl/la licenciante no puede revocar estas libertades mientras sigas los términos de la licencia.\nBajo los siguientes términos:\n\nAtribución—Debes dar el crédito apropiado, proporcionar un enlace a la licencia e indicar si se hicieron cambios. Puedes hacerlo de cualquier manera razonable, pero siempre que no sugiera que el/la licenciante te respalda a ti o al uso que le das al material.\nNo Comercial—No puedes utilizar el material con fines comerciales.\n\nSin restricciones adicionales—No puedes aplicar términos legales o medidas tecnológicas que restrinjan legalmente a otras personas de hacer cualquier cosa que la licencia permita.\nAvisos:\n\nNo tienes que cumplir con la licencia para aquellos elementos del material que son de dominio público o cuando su uso esté permitido por una excepción o limitación aplicable.\nNo se otorgan garantías. Es posible que la licencia no otorgue todos los permisos necesarios para el uso que se pretende dar al material. Por ejemplo, derechos relacionados a la publicidad, privacidad o derechos morales pueden limitar la forma en la que puedes usar el material."
  },
  {
    "objectID": "conduct.html#nuestros-estándares",
    "href": "conduct.html#nuestros-estándares",
    "title": "20  Código de conducta",
    "section": "20.1 Nuestros estándares",
    "text": "20.1 Nuestros estándares\nEjemplos de comportamientos que contribuyen a crear un ambiente positivo para nuestra comunidad:\n\nutilizar un lenguaje amigable e inclusivo,\nrespetar diferentes puntos de vista y experiencias,\naceptar adecuadamente la crítica constructiva,\nenfocarse en lo que es mejor para la comunidad y\nmostrar empatía hacia otras/os participantes de la comunidad.\n\nEjemplos de comportamiento inaceptable:\n\nel uso de lenguaje o imágenes sexualizadas así como dar atención o generar avances sexuales no deseados,\nofender o provocar de modo malintencionado (trolling), comentarios despectivos, insultantes y ataques personales o políticos,\nacoso público o privado,\npublicar información privada de otras personas, tales como direcciones físicas o de correo electrónico, sin su permiso explícito, y\notras conductas que puedan ser razonablemente consideradas como inapropiadas en un entorno profesional."
  },
  {
    "objectID": "conduct.html#nuestras-responsabilidades",
    "href": "conduct.html#nuestras-responsabilidades",
    "title": "20  Código de conducta",
    "section": "20.2 Nuestras responsabilidades",
    "text": "20.2 Nuestras responsabilidades\nLas personas encargadas del proyecto somos responsables de aclarar los estándares de comportamiento aceptable y se espera que tomemos medidas de acción correctivas apropiadas y justas en respuesta a cualquier caso de comportamiento inaceptable.\nLas personas encargadas del proyecto tenemos el derecho y la responsabilidad de eliminar, editar o rechazar comentarios, commits, código, ediciones en la wiki, issues y otras contribuciones que no estén alineadas con este Código de Conducta. También pueden prohibir la participación temporal o permanente de cualquier persona por comportamientos que sean considerados inapropiados, amenazantes, ofensivos o dañinos."
  },
  {
    "objectID": "conduct.html#alcance",
    "href": "conduct.html#alcance",
    "title": "20  Código de conducta",
    "section": "20.3 Alcance",
    "text": "20.3 Alcance\nEste Código de Conducta aplica tanto a espacios dentro del proyecto como en espacios públicos, mientras una persona represente al proyecto o a la comunidad. Ejemplos de representación del proyecto o la comunidad incluyen el uso de una dirección de correo electrónico oficial del proyecto, realizar publicaciones a través de una cuenta oficial en redes sociales o actuar como representante designada/o en cualquier evento presencial o en línea. La representación del proyecto puede ser aclarada y definida con más detalle por las personas encargadas."
  },
  {
    "objectID": "conduct.html#aplicación",
    "href": "conduct.html#aplicación",
    "title": "20  Código de conducta",
    "section": "20.4 Aplicación",
    "text": "20.4 Aplicación\nLos casos de comportamiento abusivo, acosador o inaceptable pueden ser denunciados enviando un correo electrónico a las personas encargadas del proyecto a la dirección gvwilson@third-bit.com (en inglés) y yabellini@gmail.com (en español). Todas las quejas serán revisadas e investigadas y darán como resultado una respuesta que se considere necesaria y apropiada a las circunstancias. El equipo encargado del proyecto está obligado a mantener la confidencialidad de quien reporte un incidente. Se pueden publicar por separado más detalles de políticas de aplicación específicas.\nAquellas personas encargadas del proyecto que no cumplan o apliquen este código de conducta de buena fe pueden enfrentar repercusiones temporales o permanentes determinadas por el resto del equipo a cargo del proyecto."
  },
  {
    "objectID": "conduct.html#atribución",
    "href": "conduct.html#atribución",
    "title": "20  Código de conducta",
    "section": "20.5 Atribución",
    "text": "20.5 Atribución\nEste código de conducta es una adaptación del [Contributor Covenant][contributor-covenant] version 1.4."
  },
  {
    "objectID": "checklists.html#sec-checklists-teacheval",
    "href": "checklists.html#sec-checklists-teacheval",
    "title": "24  Listas de verificación y plantillas",
    "section": "24.1 Enseñando a evaluar",
    "text": "24.1 Enseñando a evaluar\nEsta rúbrica fue diseñada para evaluar lo que se enseñó durante 5 a 10 minutos con diapositivas, programación en vivo o una combinación de ambas estrategias. Valora cada ítem como “Sí,” “Más o menos,” “No,” o “No corresponde (NC).”\n\n\n\n\n\n\n\nInicio\nPresente (usa NC para otras las respuestas si no hay un inicio)\n\n\n\nAdecuada duración (10 a 30 segundos)\n\n\n\nSe presenta\n\n\n\nPresenta el tema que se trabajará\n\n\n\nDescribe los requisitos\n\n\nContenido\nObjetivos claros/narrativa fluida\n\n\n\nLenguaje inclusivo\n\n\n\nEjemplos y tareas reales\n\n\n\nEnseña buenas prácticas/utiliza código idiomático\n\n\n\nSeñala un camino intermedio entre la Escila de la jerga y la Caribdis de la sobresimplificación\n\n\nDando la lección\nVoz clara y entendible (usa “Más o menos” o “No” para acentos muy marcados)\n\n\n\nRitmo: ni muy rápido ni muy lento, no realiza pausas largas o se interrumpe, no aparenta estar leyendo sus notas\n\n\n\nSeguridad: no se pierde en el pozo de alquitrán de la incertidumbre ni tampoco en las colinas de estiércol de la condescendencia\n\n\nDiapositivas\nUsa diapositivas (completa con NC el resto de las respuestas si no usa diapositivas)\n\n\n\nDiapositivas y discurso se complementan uno al otro (programación dual)\n\n\n\nFuentes y colores legibles; sin bloques de texto abrumadores por su tamaño\n\n\n\nPantalla: cambia frecuentemente (algo cambia cada 30 segundos)\n\n\n\nAdecuado uso de figuras\n\n\nProgramación en vivo\nUsa programación en vivo (completa con NC el resto de las respuestas si no usa programación en vivo)\n\n\n\nCódigo y discurso se complementan uno al otro\n\n\n\nFuentes y colores legibles; adecuada cantidad de código en pantalla\n\n\n\nUso de herramientas de forma adecuada\n\n\n\nResalta elementos clave del código\n\n\n\nAnaliza los errores\n\n\nCierre\nPresente (valora NC para otras respuestas si el cierre no está presente)\n\n\n\nAdecuada duración (10 a 30 segundos)\n\n\n\nResume puntos clave\n\n\n\nPresenta un esquema general de los próximos pasos\n\n\nEn general\nPuntos claramente conectados y flujo lógico\n\n\n\nHace que el tema sea interesante (es decir, no aburrido)\n\n\n\nComprende el tema"
  },
  {
    "objectID": "checklists.html#sec-checklists-teameval",
    "href": "checklists.html#sec-checklists-teameval",
    "title": "24  Listas de verificación y plantillas",
    "section": "24.2 Evaluación del grupo docente",
    "text": "24.2 Evaluación del grupo docente\nEsta rúbrica fue diseñada para evaluar el desempeño de individuos dentro de un grupo. Los ejemplos a continuación pueden servirte como material inicial a partir del cual desarrollar tus propias rúbricas. Valora cada ítem como “Sí,” “Más o menos,” “No,” o “No corresponde (NC).”\n\n\n\n\n\n\n\nComunicación\nEscucha atentamente y sin interrumpir\n\n\n\nAclara lo que se ha dicho para garantizar la comprensión\n\n\n\nArticula ideas en forma clara y concisa\n\n\n\nArgumenta adecuadamente sus ideas\n\n\n\nObtiene el apoyo de otras/os integrantes del equipo\n\n\nToma de decisiones\nAnaliza los problemas desde diferentes puntos de vista\n\n\n\nAplica lógica para resolver problemas\n\n\n\nPropone soluciones basadas en hechos y no en “corazonadas” o intuición\n\n\n\nInvita al resto del equipo a proponer nuevas ideas\n\n\n\nGenera nuevas ideas\n\n\n\nAcepta cambios\n\n\nColaboración\nReconoce los problemas que el equipo necesita enfrentar y resolver\n\n\n\nTrabaja para hallar soluciones que sean aceptables para todas las partes involucradas\n\n\n\nComparte el crédito del éxito con otras/os integrantes del equipo\n\n\n\nPromueve la participación entre todos las/los integrantes del equipo\n\n\n\nAcepta la crítica abiertamente y sin “ponerse a la defensiva”\n\n\n\nCoopera con el equipo\n\n\nAutogestión\nMonitorea sus avances para garantizar que se alcancen los objetivos\n\n\n\nLe da máxima prioridad a obtener resultados\n\n\n\nDefine tareas prioritarias para los encuentros de trabajo\n\n\n\nPromueve que otras/os integrantes del equipo manifiesten sus opiniones, incluso si no coinciden con las propias\n\n\n\nMantiene la atención durante la reunión\n\n\n\nUsa eficientemente el tiempo de reunión\n\n\n\nSugiere formas de trabajar en las reuniones"
  },
  {
    "objectID": "checklists.html#sec-checklists-events",
    "href": "checklists.html#sec-checklists-events",
    "title": "24  Listas de verificación y plantillas",
    "section": "24.4 Organización de eventos",
    "text": "24.4 Organización de eventos\nLas listas de verificación que se presentan a continuación pueden usarse antes, durante y después de un evento.\n\n24.4.1 Programar el evento\n\nDecidir si será presencial, virtual para un lugar, o virtual para más de un lugar.\nConversar con la/el disertante sobre sus expectativas y asegurarse de que están de acuerdo en cuanto a quién cubrirá los costos de traslado.\nDefinir quiénes podrán participar: ¿será el evento abierto a todas las personas? ¿restringido a integrantes de una organización? ¿una situación intermedia?\nOrganizar quiénes serán docentes.\nOrganizar el espacio, incluyendo salas para grupos pequeños si fuera necesario.\nDefinir la fecha. Si fuera presencial, reservar lo relativo al viaje.\nConseguir nombres y direcciones de e-mail de participantes a través de la disertante.\nAsegurarse de que la totalidad de las/los participantes esté registrada.\n\n\n\n24.4.2 Construir el evento\n\nCrea una página web con los detalles del taller, que incluya fecha, lugar, y lo que las/los participantes deben traer consigo.\nConfirma las necesidades especiales de las/los participantes.\nSi el evento es virtual prueba el modo de videoconferencia, dos veces.\nAsegúrate que las/los participantes tengan acceso a internet.\nCrea un espacio para compartir apuntes y soluciones a los ejercicios (p.ej. un documento Google Doc (Section 10.7)).\nEstablece contacto con las/los asistentes por correo electrónico con un mensaje de bienvenida que contenga el link a la página del taller, lecturas sobre la temática, la descripción de la configuración que deban hacer en su computadora, una lista de los elementos requeridos para el taller, y un mecanismo para establecer contacto con la/el disertante o docente durante el día.\n\n\n\n24.4.3 Al comienzo del evento\n\nRecuerda a las/los asistentes el código de conducta.\nToma lista y crea una lista de nombres para pegar en el documento compartido para tomar notas.\nReparte pequeñas notas adhesivas.\nAsegúrate de que tengan acceso a internet.\nAsegúrate de que pueden acceder al documento compartido.\nRegistra información relevante sobre la identificación de las/los asistentes en sus perfiles online.\n\n\n\n24.4.4 Al finalizar el evento\n\nActualiza la lista de participantes.\nLleva un registro de la retroalimentación brindada por las/los participantes.\nHaz una copia del documento compartido.\n\n\n\n24.4.5 Equipo de viaje\nAquí algunas cosas que las/los docentes llevan consigo a los talleres:\n\n\n\n\n\n\n\nnotas adhesivas\ncaramelos para suavizar la garganta\n\n\nzapatos cómodos\nuna pequeña libreta de notas\n\n\nadaptador de corriente eléctrica de repuesto\ncamisa de repuesto\n\n\ndesodorante\nadaptadores para video\n\n\npegatinas (stickers) para computadoras\ntus notas (impresas o en una tableta)\n\n\nbarrita de cereal o similar\nantiácido (problema de comer al paso)\n\n\ntarjeta de presentación\nanteojos o lentes de contacto de repuesto\n\n\nlibreta y bolígrafo\npuntero láser\n\n\nvaso térmico para té o café (o equipo de mate o tereré)\nmarcadores de pizarra adicionales\n\n\ncepillo de dientes o enjuague bucal\ntoallitas húmedas descartables (puede volcarse algo encima de tu ropa)\n\n\n\nAl viajar muchas/os docentes llevan además zapatos deportivos, traje de baño, mat de yoga o el material que necesiten para hacer actividad física. También una conexión WiFi portátil por si la de la habitación no funciona, y alguna memoria USB con los instaladores del software que las/los estudiantes necesitarán para el curso."
  },
  {
    "objectID": "checklists.html#sec-checklists-design",
    "href": "checklists.html#sec-checklists-design",
    "title": "24  Listas de verificación y plantillas",
    "section": "24.5 Diseño de lecciones",
    "text": "24.5 Diseño de lecciones\nEsta sección resume el diseño de lecciones por el método de reingeniería, que fue desarrollado independientemente por Wiggins and McTighe (2005), Biggs and Tang (2011), Fink (2013). Propone una progresión paso a paso para ayudarte a pensar qué hacer en cada uno de los pasos y en el orden adecuado. También proporciona ejercicios breves espaciados para que puedas reorientar o redirigir tu esfuerzo sin demasiadas sorpresas desagradables.\nTodo lo que hagas del paso 2 en adelante será parte de tu lección final por lo que no estarás perdiendo en tiempo: como se describió en el Chapter 7, construir ejercicios de práctica desde el comienzo te ayuda a asegurarte de que todo lo que preguntes a las/los estudiantes contribuirá a los objetivos de la lección y que todo lo que necesitan saber está cubierto.\nLos pasos se describen en orden creciente de detalle pero el proceso en sí es siempre iterativo. Con frecuencia y a medida que resuelvas preguntas más avanzadas, volverás a revisar tus respuestas en trabajos anteriores, y te darás cuenta que tu plan inicial no iba a funcionar como pensaste originalmente.\n\n24.5.1 ¿Para quién es esta lección?\nCrea algunas personas tipo (Section 7.1) o (mejor aún) elige entre los que tú y tus colegas han creado para uso general. Cada estudiante tipo debe tener:\n\nun contexto general,\nlo que ya sabe,\nlo que cree que quiere saber y\nqué necesidades especiales tiene.\n\nEjercicio breve: resumen breve de a quién estás intentando ayudar.\n\n\n24.5.2 ¿Cuál es la idea principal?\nResponde tres o cuatro de las siguientes preguntas sólo enumerando elementos para ayudarte a descifrar el enfoque de la lección. No necesitas responder todas las preguntas, y puedes plantear y responder otras preguntas si crees que ayudarán, pero debes incluir sí o sí un par de respuestas a la primera pregunta. Además, en esta etapa puedes crear un mapa conceptual (Section 4.1).\n\n¿Qué problemas aprenderán a resolver?\n¿Cuáles conceptos y técnicas aprenderán?\n¿Cuáles herramientas tecnológicas, paquetes y funciones usarán?\n¿Qué términos de jerga definirás?\n¿Qué analogías usarás para explicar conceptos?\n¿Qué errores o conceptos erróneos esperas encontrar?\n¿Qué conjuntos de datos utilizarás?\n\nEjercicio breve enfoque general y sin detalles de la lección. Compártelo con una/un colega — una breve devolución en esta instancia puede ahorrar horas de esfuerzo más tarde.\n\n\n24.5.3 ¿Qué harán tus estudiantes durante la lección?\nEstablece los objetivos del paso 2 escribiendo descripciones detalladas de algunos ejercicios que tus estudiantes serán capaces de resolver al final de la lección. Hacer esto es análogo al [desarrollo impulsado por pruebas][test-driven-development-es]: en vez de trabajar en función de un conjunto de objetivos de aprendizaje (probablemente ambiguos), hazlo “hacia atrás”: elabora ejemplos concretos que quieres que puedan resolver tus estudiantes. Esto además permite dejar en evidencia requisitos técnicos necesarios que de otro modo podrían no descubrirse hasta que fuera demasiado tarde.\nPara complementar la descripción detallada de los ejercicios, escribe la descripción de uno o dos ejercicios para cada hora de lección como una lista de conceptos breve. De este modo, puedes visualizar qué tan rápido esperas que tus estudiantes avancen. De nuevo, esto permitirá tener una visión realista sobre lo que asumiste de tus estudiantes y ayudará a hacer evidentes los requisitos técnicos necesarios para resolver el ejercicio. Una manera de elaborar estos ejercicios adicionales es hacer una lista con las habilidades que necesitan para resolver los ejercicios principales y crear un ejercicio que aborde cada una.\nEjercicio breve: 1 a 2 ejercicios explicados de principio a fin que usen las habilidades que tus estudiantes van a aprender, y una media docena de ejercicios con su solución esquematizada. Incluye soluciones completas para que puedas asegurarte de que el programa que usen funciona.\n\n\n24.5.4 ¿Cómo están conectados los conceptos\nColoca los ejercicios que creaste en un orden lógico y a partir de ellos deriva el esquema general de una lección. El esquema debe tener entre 3 a 4 ítems por hora de clase con una evaluación formativa para cada uno. En esta etapa es común que modifiques las evaluaciones de forma que puedan basarse sobre las anteriores.\nEjercicio breve: el esquema de una lección. Es muy probable que te encuentres con que te habías olvidado de algunos elementos y que no están incluidos en tu trabajo hasta aquí, así que no te sorprendas si debes ir y venir varias veces.\n\n\n24.5.5 Descripción general de la lección\nAhora puedes escribir la descripción general de la lección que incluya:\n\nun párrafo de descripción (es decir, un discurso de venta para tus estudiantes),\nmedia docena de objetivos de aprendizaje y\nun resumen de los requisitos.\n\nHacer esto antes suele ser un esfuerzo inútil ya que el material que compone la lección aumenta, se recorta o cambia de lugar en las etapas anteriores.\nEjercicio breve: descripción del curso, objetivos de aprendizaje y requisitos."
  },
  {
    "objectID": "checklists.html#sec-checklists-preassess",
    "href": "checklists.html#sec-checklists-preassess",
    "title": "24  Listas de verificación y plantillas",
    "section": "24.6 Cuestionario de pre-evaluación",
    "text": "24.6 Cuestionario de pre-evaluación\nEste cuestionario ayuda a las/los docentes a estimar el conocimiento previo sobre programación de las/los participantes en un taller introductorio a JavaScript. Las preguntas y respuestas son concretas y el cuestionario es corto, para que no resulte intimidante.\n\n¿Cuál de estas opciones describe mejor tu experiencia con la programación en general?\n\nNo tengo ninguna experiencia.\nHe escrito unas pocas líneas de código alguna vez.\nHe escrito programas para uso personal de un par de páginas de extensión.\nHe escrito y mantenido porciones grandes de programas.\n\n¿Cuál de estas opciones describe mejor tu experiencia con la programación en JavaScript?\n\nNo tengo ninguna experiencia.\nHe escrito unas pocas líneas de código alguna vez.\nHe escrito programas para uso personal de un par de páginas de extensión.\nHe escrito y mantenido porciones grandes de programas.\n\n¿Cuál de estas opciones describe mejor cuán fácil te resultaría escribir un programa en el lenguaje de programación que prefieras para hallar el número más alto en una lista?\n\nNo sabría por dónde comenzar.\nPodría resolverlo con prueba y error y realizando bastantes búsquedas en internet.\nLo resolvería rápido con poco o nada de ayuda externa.\n\n¿Cuál de estas opciones describe mejor cuán fácil te resultaría escribir un programa en JavaScript para hallar y cambiar a mayúscula todos los títulos de una página web?\n\nNo sabría por dónde comenzar.\nPodría resolverlo con prueba y error y realizando bastantes búsquedas en internet.\nLo resolvería rápido con poco o nada de ayuda externa.\n\n¿Qué te gustaría saber o poder hacer al finalizar esta clase que no sabes o puedes hacer ahora?"
  },
  {
    "objectID": "chunking.html",
    "href": "chunking.html",
    "title": "26  “Solución del ejercicio de particionar”",
    "section": "",
    "text": "Segunda edición\n\n\n\nEstás leyendo la segunda edición en progreso y en castellano de Enseñar Tecnología en Comunidad (Teaching Tech Together). Este capítulo está prácticamente terminado y sólo necesita una última revisión.\n\n\nMira el último ejercicio en el Chapter 4 para la representación completa de estos símbolos.\n{fig-alt = “El diagrama presenta una cuadrícula de tres por tres sin las líneas externas. En el primer renglón tiene los números uno a tres, en el segundo cuatro a seis y en el tercero siete a nueve. De esta manera el número uno está rodeado por una línea vertical a su derecha y una línea horizontal debajo. El número dos está rodeado por dos líneas verticales (a su derecha y a su izquierda) y una línea horizontal en su parte inferior. El número tres está rodeado por una línea vertical a su izquierda y una línea horizontal en su parte inferior. Al número cuatro lo rodean dos líneas horizontales (arriba y abajo) y una línea vertical a su derecha. El número cinco está dentro de un cuadrado con todas las líneas marcadas. El número seis tiene las dos líneas horizontales (arriba y abajo) y una línea vertical a su izquierda. El número siete tiene una línea horizontal arriba y otra linea vertical a la derecha. El número ocho está rodeado por dos líneas verticales (una a cada lado) y una línea horizontal en la parte superior. Finalmente, el número nueve tiene una línea vertical a la izquierda y una línea horizontal arriba.”}"
  },
  {
    "objectID": "process.html#sec-process-personas",
    "href": "process.html#sec-process-personas",
    "title": "7  Un proceso para diseñar lecciones",
    "section": "7.1 Personas tipo",
    "text": "7.1 Personas tipo\nEl primer paso en el proceso de diseño inverso es averiguar quién es tu público. Una manera para hacer esto es escribir dos o tres personas tipo como los de la Section 2.1. Esta técnica es tomada de diseñadores/as de experiencia de usuario/a, quienes crean perfiles breves de usuarios/as típicos/as para ayudarse a pensar en su público. Una persona tipo consiste en:\n\nantecedentes generales de la persona;\nlo que ya sabe;\nlo que quiere hacer; y\ncualquier necesidad especial que tenga.\n\nLas personas en la Section 2.1 tienen los cuatro puntos listados anteriormente, junto con un breve resumen de cómo este libro las ayudará. Una persona tipo para un grupo de voluntarios/as que realiza talleres de Python los fines de semana sería:\n\nJorge se acaba de mudar de Costa Rica a Canadá para estudiar ingeniería agrícola. Se ha unido al equipo de fútbol de la universidad y espera aprender a jugar hockey sobre hielo.\nAparte de usar Excel, Word e internet, la experiencia previa más significativa de Jorge con computadoras es ayudar a su hermana a construir un sitio en WordPress para su negocio familiar.\nJorge quiere medir las propiedades del suelo en granjas cercanas usando un dispositivo de mano que envía datos a su computadora. Por el momento, Jorge tiene que abrir cada archivo de datos en Excel, eliminar la primera y la última columna y calcular algunas estadísticas de los datos restantes. Recopilará al menos 600 mediciones en los próximos meses y realmente no quiere tener que hacer estos pasos a mano mes a mes.\nJorge puede leer en inglés, pero a veces le cuesta sostener una conversación hablada que involucre mucha jerga.\n\nEn lugar de escribir nuevas personas tipo para cada lección o curso, los/las docentes usualmente crean y comparten una media docena de personas tipo, que cubren a todas las personas a las que probablemente enseñan. Luego, eligen a algunas de esas personas tipo para describir al público de un material en particular. Las personas tipo utilizadas de esta manera se convierten en un atajo conveniente para los problemas de diseño: al hablar entre docentes, se pueden pensar en términos del estilo “¿Jorge entendería por qué estamos haciendo esto?” o “¿Qué problemas de instalación enfrentaría Jorge?”\n\n7.1.1 Sus metas, no las tuyas\nLas personas tipo deberían siempre describir lo que cada estudiante quiere hacer en lugar de lo que tú crees que necesitan. Pregúntate lo que tus estudiantes están buscando en línea; probablemente no incluirá jerga que no conocen aún, así que parte de lo que tienes que hacer al diseñar lecciones es descubrir cómo hacer que tu curso sea visible y pueda ser encontrado por tu público."
  },
  {
    "objectID": "process.html#sec-process-objectives",
    "href": "process.html#sec-process-objectives",
    "title": "7  Un proceso para diseñar lecciones",
    "section": "7.2 Objetivos de aprendizaje",
    "text": "7.2 Objetivos de aprendizaje\nLas evaluaciones formativas y sumativas ayudan a los/las docentes a descubrir qué van a enseñar, pero comunicarle eso a sus estudiantes y a otro conjunto de docentes implica tener también una descripción del curso. Los objetivos de aprendizaje ayudan a asegurar que todos/as tus estudiantes tengan el mismo entendimiento de lo que se supone que una lección debe lograr. Por ejemplo, el enunciado “Entender Git” podría significar cualquiera de los siguientes ítems:\n\nLos/las estudiantes pueden describir tres cuestiones en las cuales los sistemas de versión de control como Git son mejores que herramientas para compartir archivos como Dropbox y dos cuestiones en que son peores.\nLos/las estudiantes pueden hacer commit a un archivo modificado en un repositorio de Git usando un software con interfaz gráfica instalado en su computadora.\nLos/las estudiantes pueden explicar qué es un HEAD por separado y recuperarlo usando operaciones de línea de comandos.\n\n\n7.2.1 Objetivos versus resultados\nUn objetivo de aprendizaje es lo que una lección se esmera por lograr. Un resultado de aprendizaje es lo que realmente se logra, es decir, lo que tus estudiantes realmente se llevan. El rol de la evaluación sumativa es, por lo tanto, comparar resultados de aprendizajes con objetivos de aprendizajes.\n\nUn objetivo de aprendizaje describe cómo tu estudiante demostrará lo que ha aprendido una vez que ha completado exitosamente una lección. Más específicamente, un objetivo tiene un verbo medible o verificable que establece lo que cada estudiante hará y especifica los criterios aceptables de rendimiento. Escribir estos objetivos puede inicialmente parecer restrictivo, pero a largo plazo te hará más feliz a ti, a tus colegas docentes y a tus estudiantes: terminarás con guías claras tanto para la enseñanza como para la evaluación, y tus estudiantes apreciarán tener expectativas claras.\nUna forma de comprender lo que constituye un buen objetivo de aprendizaje es ver cómo se puede mejorar uno pobre:\n\nEl/la estudiante tendrá oportunidad para aprender buenas prácticas de programación. Este enunciado describe el contenido de la lección, no los atributos de éxito de tus estudiantes.\nEl/la estudiante tendrá una mejor apreciación de las buenas prácticas de programación. Este enunciado no empieza con un verbo activo ni define el nivel de aprendizaje. El tema de aprendizaje no tiene contexto y no es específico.\nEl/la estudiante comprenderá cómo programar en R. Si bien aquí se comienza con un verbo activo, no se define el nivel de aprendizaje, y el tema de aprendizaje es todavía demasiado vago para una evaluación.\nEl/la estudiante escribirá scripts de análisis de datos para leer, filtrar y resumir datos tabulares usando R. Este objetivo comienza con un verbo activo, define el nivel de aprendizaje y provee contexto para asegurar que los resultados puedan evaluarse.\n\nCuando se trata de elegir verbos, la mayoría de los/las docentes usan la taxonomía de Bloom. Publicada por primera vez en 1956 y actualizada a principios de siglo Anderson and Krathwohl (2001), es un marco ampliamente usado para discutir los niveles de comprensión. Su forma más reciente tiene seis categorías; la lista a continuación da algunos de los verbos típicamente usados en los objetivos de aprendizaje escritos para cada uno:\n\nRecordar:\n\nExhibir memoria del material previamente aprendido recordando hechos, términos, conceptos básicos y respuestas. (reconocer, listar, describir, nombrar, encontrar.)\n\nComprender:\n\nDemostrar comprensión de los hechos e ideas organizando, comparando, traduciendo, interpretando, dando descripciones y estableciendo ideas principales. (interpretar, resumir, parafrasear, clasificar, explicar)\n\nAplicar:\n\nResolver problemas nuevos aplicando de forma diferente los conocimientos, hechos, técnicas y reglas adquiridos. (construir, identificar, usar, planificar, seleccionar)\n\nAnalizar:\n\nExaminar y dividir la información en partes identificando motivos o causas, hacer inferencias y encontrar evidencia para apoyar generalizaciones. (comparar, contrastar, simplificar)\n\nEvaluar:\n\nPresentar y defender opiniones emitiendo juicios sobre información, validez de las ideas o calidad del trabajo, en base a un conjunto de criterios. (comprobar, elegir, criticar, probar, calificar)\n\nCrear:\n\nRecopilar información de forma diferente combinando elementos en un nuevo patrón o proponiendo soluciones alternativas. (diseñar, construir, mejorar, adaptar, maximizar, resolver)\n\n\nLa taxonomía de Bloom aparece en casi todos los libros de texto sobre educación, pero Masapanta-Carrión and Velázquez-Iturbide (2018) encontró que incluso los/las educadores/as con mucha experiencia tienen problemas para ponerse de acuerdo en cómo clasificar cuestiones específicas. Sin embargo, los verbos siguen siendo útiles, al igual que la noción de desarrollar la comprensión por pasos: como ha dicho Daniel Willingham, la gente no puede pensar si no tiene algo en qué pensar Willingham (2010), y esta taxonomía puede ayudar a los/las docentes a asegurarse que sus estudiantes tienen esas cosas en qué pensar cuando las necesiten.\nOtra manera de conceptualizar los objetivos de aprendizaje proviene de Fink (2013), el cual define aprendizaje en términos del cambio que se supone que debe producirse en el/la estudiante. La taxonomía de Fink también tiene seis categorías, pero a diferencia de las de Bloom ellas son complementarias y no jerárquicas:\n\nConocimiento fundamental:\n\ncomprender y recordar información e ideas. (recordar, comprender, identificar)\n\nAplicación:\n\nhabilidades, pensamiento crítico, gestión de proyectos. (usar, resolver, calcular, crear)\n\nIntegración:\n\nconectar ideas, experiencias de aprendizaje y vida real. (conectar, relatar, comparar)\n\nDimensión humana:\n\naprender sobre sí mismo/a y sobre otras personas. (llegar a verse a sí mismo/a, entender a las demás personas en términos de, decidir transformarse en)\n\nCuidado:\n\ndesarrollar nuevos sentimientos, intereses y valores. (emocionarse, estar preparado/a para, valorar)\n\nAprendiendo a aprender:\n\nconvertirse en mejor estudiante. (identificar la fuente de información para, enmarcar preguntas útiles sobre)\n\n\nUn conjunto de objetivos de aprendizaje basados en la taxonomía de Fink para un curso introductorio sobre HTML y CSS sería:\n\nExplicar qué son las propiedades de CSS y cómo funcionan los selectores de CSS.\nDiseñar una página web usando etiquetas comunes y propiedades de CSS.\nComparar y contrastar escribir en HTML y CSS con escribir con herramientas de escritorio de edición y publicación.\nIdentificar y corregir problemas en páginas web de muestra que dificultarían la interacción de las personas con discapacidad visual.\nDescribir las características de los sitios web favoritos cuyo diseño te atraiga de forma particular y explicar el por qué.\nDescribir tus dos fuentes de información en línea favoritas sobre CSS y explicar qué te gusta de ellas."
  },
  {
    "objectID": "process.html#sec-process-maintainability",
    "href": "process.html#sec-process-maintainability",
    "title": "7  Un proceso para diseñar lecciones",
    "section": "7.3 Mantenimiento",
    "text": "7.3 Mantenimiento\nUna vez que una lección ha sido creada alguien debe mantenerla y hacerlo es mucho más fácil si se ha construido de manera que se pueda mantener. Pero, ¿qué significa exactamente “mantenible”? La respuesta corta es que una lección es mantenible si es más barato actualizarla que reemplazarla. Esta ecuación depende de cuatro factores:\n\nQué tan bien documentado está el diseño del curso\n\nSi la persona que realiza el mantenimiento no conoce (o no recuerda) lo que se supone que la lección debe lograr o por qué los temas son presentados en un orden en particular, le llevará más tiempo actualizarla. Una razón para usar el diseño inverso es captar decisiones sobre por qué cada curso es como es.\n\nQué tan fácil es para los/las colaboradores ayudar\n\nLos/las docentes suelen compartir material enviándose por correo archivos de PowerPoint o dejándolos en una unidad compartida. Herramientas de escritura colaborativa como [Google Docs][google-docs] y wikis son una gran mejora, ya que permiten que muchas personas actualicen el mismo documento y comenten las actualizaciones de otras personas. Los sistemas de control de versiones usados por programadores/as, tales como [GitHub][github], son otro enfoque. Permiten que cualquier número de personas trabaje de forma independiente, para luego unir sus cambios en forma controlada y revisable. Desafortunadamente, los sistemas de control de versión tienen una curva de aprendizaje pronunciada, el progreso es lento y se tarda tiempo en alcanzar un nivel en el que podamos utilizarlos cómodamente. Además no manejan formatos de documentos de oficina comunes.\n\nQué tan dispuestas están las personas a colaborar.\n\nLas herramientas necesarias para construir una Wikipedia para lecciones existen hacen veinte años, pero la mayoría de los/las docentes no escriben ni comparten sus lecciones de la misma manera en que escriben y comparten las entradas de enciclopedias.\n\nQué tan útil es compartir en realidad.\n\nLa paradoja de la reusabilidad establece que cuanto más reutilizable es un objeto de aprendizaje, menos efectivo pedagógicamente es Wiley (2002). La razón es que una buena lección se parece más a una novela que a un programa: sus partes están estrechamente acopladas en lugar de ser cajas negras independientes. Por lo tanto, la reutilización directa de las lecciones puede ser un objetivo equivocado; podríamos llegar más lejos tratando de hacerlas más fáciles de combinar.\n\n\nSi la paradoja de la reusabilidad es cierta, la colaboración será más probable si las cosas en las que se colabora son pequeñas. Esto se ajusta a la teoría de Mike Caulfield de las [explicaciones corales][choral-explanations], que sostiene que sitios como [Stack Overflow][stack-overflow] tienen éxito porque proporcionan un coro de respuestas para cada pregunta, cada una de las cuales es más adecuada para una persona que pregunta y que es ligeramente diferente a las demás personas que preguntan. Si esto es correcto, las lecciones del futuro pueden ser visitas guiadas de repositorios de preguntas y respuestas seleccionados por la comunidad, diseñados para estudiantes en niveles muy diferentes."
  },
  {
    "objectID": "process.html#sec-process-exercises",
    "href": "process.html#sec-process-exercises",
    "title": "7  Un proceso para diseñar lecciones",
    "section": "7.4 Ejercicios",
    "text": "7.4 Ejercicios\n\n7.4.1 Crear personas tipo (grupos pequeños/30’)\nTrabajando en grupos pequeños, crea una persona tipo descripta con cuatro puntos que reseñe a un/a de tus estudiantes típicos.\n\n\n7.4.2 Clasificar objetivos de aprendizaje (parejas/10’)\nMira el ejemplo de los objetivos de aprendizaje para un curso introductorio sobre HTML y CSS en la Section 7.2 y clasifica cada uno de acuerdo a la taxonomía de Bloom. Compara tus respuestas con las de tu pareja. ¿En qué estuvieron de acuerdo y en qué en desacuerdo?\n\n\n7.4.3 Escribir objetivos de aprendizaje (parejas/20’)\nEscribe uno o más objetivos de aprendizaje para un tema que actualmente enseñes o planees enseñar utilizando la taxonomía de Bloom. Con tu pareja, critica y mejora los objetivos. ¿Cada objetivo tiene un verbo verificable y establece claramente los criterios para evaluar el desempeño aceptable?\n\n\n7.4.4 Escribir más objetivos de aprendizaje (parejas/20’)\nEscribe uno o más objetivos de aprendizaje para algo que actualmente enseñes o planees enseñar utilizando la taxonomía de Fink. Con tu pareja, critica y mejora los objetivos.\n\n\n7.4.5 Ayúdame a hacerlo por mi cuenta (grupos pequeños/15’)\nEl teórico de la educación Lev Vygotsky introdujo la noción de una zona de desarrollo próximo, la cual incluye los problemas que las personas no pueden resolver aún por sí mismas pero que son capaces de resolver con la ayuda de un mentor/a. Se trata de problemas que resulta fructífero abordar a corto plazo, ya que aún están fuera del alcance de tu estudiante pero son alcanzables.\nTrabajando en grupos pequeños, escoge una persona tipo que hayas desarrollado y describe dos o tres problemas que se encuentran en su zona de desarrollo próximo.\n\n\n7.4.6 Restar complejidad al construir lecciones (individual/20’)\nUna forma para construir una lección de programación es escribir el programa que deseas que tus estudiantes terminen, luego eliminar la parte más compleja que deseas que escriban y convertirla en el último ejercicio. A continuación puedes eliminar la siguiente parte más compleja que deseas que escriban y convertirla en el penúltimo ejercicio, etcétera. Todo lo que quede después de haber retirado los ejercicios, como cargar librerias o leer datos, se convierte en el código que les das al inicio. Elige un programa o página web que desees que tus estudiantes puedan crear y trabaja hacia atrás para dividirlo en fragmentos que se asimilen. ¿Cuántos fragmentos hay? ¿Qué idea clave introduce cada uno?\n\n\n7.4.7 Rareza no esencial (individual/15’)\nBetsy Leondar-Wright acuñó la frase “[rareza no esencial][inessential-weirdness]” para describir cosas que hacen los grupos que no son realmente necesarias y que alienan a personas que aún no son integrantes de ese grupo. Sumana Harihareswara luego usó esta noción como base para una charla sobre [rarezas no esenciales en el software de código abierto][inessential-weirdness-open-source], lo que incluye, por ejemplo, el uso de herramientas de línea de comandos con nombres crípticos. Toma unos minutos para leer estos artículos, luego haz una lista de las rarezas no esenciales que crees que tus estudiantes podrían encontrar cuando les enseñes por primera vez ¿Cuántas de estas rarezas no esenciales puedes evitar?\n\n\n7.4.8 Un patrón: problema, ejemplo, teoría y elaboración (individual/15’)\nUn patrón que trabaja bien para lecciones de programación es: presentar un problema, trabajar a través de un ejemplo, explicar la teoría, y luego elaborar un segundo ejemplo para que los/las estudiantes puedan ver qué es específico en cada caso y qué se aplica a todos los casos. (En inglés se lo conoce por su sigla PETE: Problem, Example, Theory, Elaborate.) Elige algo que ya hayas enseñado o les hayan enseñado y delinea una pequeña lección que siga estos cuatro pasos.\n\n\n7.4.9 Otro patrón: predecir, ejecutar, investigar, modificar y crear (individual/15’)\nOtro patrón de lección es Sentance, Waite, and Kallia (2019): predecir el comportamiento o salida de un programa, ejecutar el programa para ver lo que realmente hace, investigar por qué lo hace, pasando a través del mismo en un depurador o dibujando el flujo de control, modificar el programa (o sus entradas), y luego crear algo similar desde cero. (En inglés se lo conoce por su sigla PRIMM: Predict, Run, Investigate, Modify, Make.) Elige algo que hayas enseñado o te hayan enseñado recientemente y bosqueja una breve lección que siga estos cinco pasos.\n\n\n7.4.10 Concreto-representativo-abstracto (parejas/15’)\n[Concreto-representativo-abstracto][c-r-a] (abreviado CRA) es un enfoque para introducir nuevas ideas usado principalmente con estudiantes más jóvenes: manipular físicamente un objeto concreto, representar el objeto con una imagen, luego realizar las mismas operaciones usando números, símbolos o algo abstracto.\n\nEscribe cada uno de los números 2, 7, 5, 10, 6 en una nota adhesiva diferente.\nSimula un bucle que encuentre el valor más grande buscando cada uno por turno (concreto).\nDibuja un diagrama del proceso que usaste etiquetando cada paso (representativo).\nEscribe instrucciones que alguien más podría seguir por medio de los pasos (abstracto).\n\nCompara tus materiales representativos y abstractos con los de tu colega.\n\n\n7.4.11 Evaluación de un repositorio de lecciones (grupos pequeños/10’)\nLeake and Lewis (2017) explora por qué los/las docentes de ciencias de la computación no utilizan sitios para compartir lecciones y recomienda formas para hacerlas más atractivas:\n\nLa página de destino debe permitir a quienes visitan el sitio identificar sus antecedentes y sus intereses. Los sitios deben hacer dos preguntas: “¿Cuál es tu rol actual?” y “¿En qué curso y nivel tienes interés?”\nLos sitios deben mostrar los recursos de aprendizaje en el marco de un curso completo para que los/las usuarios/as potenciales puedan comprender el contexto en que se prevé usar el material.\nA muchos/as docentes les preocupa que sus pares juzguen su (falta de) conocimiento si publican en foros de discusión en línea. Por tanto, estos foros deberían permitir publicaciones anónimas.\n\nEn grupos pequeños, discute si estas tres características serían suficientes para convencerte de usar un sitio para compartir lecciones. Si no fueran suficientes, ¿qué te convencería?"
  },
  {
    "objectID": "process.html#revisión",
    "href": "process.html#revisión",
    "title": "7  Un proceso para diseñar lecciones",
    "section": "7.5 Revisión",
    "text": "7.5 Revisión\n{fig-alt = ““}\n\n\n\n\nAnderson, Lorin W., and David R. Krathwohl, eds. 2001. A Taxonomy for Learning, Teaching, and Assessing: A Revision of Bloom’s Taxonomy of Educational Objectives. Longman.\n\n\nBiggs, John, and Catherine Tang. 2011. Teaching for Quality Learning at University. Open University Press.\n\n\nFink, L. Dee. 2013. Creating Significant Learning Experiences: An Integrated Approach to Designing College Courses. Jossey-Bass.\n\n\nGreen, Elizabeth. 2014. Building a Better Teacher: How Teaching Works (and How to Teach It to Everyone). W. W. Norton & Company.\n\n\nLeake, Mackenzie, and Colleen M. Lewis. 2017. “Recommendations for Designing CS Resource Sharing Sites for All Teachers.” In 2017 Technical Symposium on Computer Science Education (SIGCSE’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3017680.3017780.\n\n\nMasapanta-Carrión, Susana, and J. Ángel Velázquez-Iturbide. 2018. “A Systematic Review of the Use of Bloom’s Taxonomy in Computer Science Education.” In 2018 Technical Symposium on Computer Science Education (SIGCSE’18). Association for Computing Machinery (ACM). https://doi.org/10.1145/3159450.3159491.\n\n\nMcTighe, Jay, and Grant Wiggins. 2013. “Understanding by Design Framework.” http://www.ascd.org/ASCD/pdf/siteASCD/publications/UbD_WhitePaper0312.pdf; Association for Supervision & Curriculum Development (ASCD).\n\n\nParnas, David Lorge, and Paul C. Clements. 1986. “A Rational Design Process: How and Why to Fake It.” IEEE Transactions on Software Engineering SE-12 (2): 251–57. https://doi.org/10.1109/tse.1986.6312940.\n\n\nScott, James C. 1998. Seeing Like a State: How Certain Schemes to Improve the Human Condition Have Failed. Yale University Press.\n\n\nSentance, Sue, Jane Waite, and Maria Kallia. 2019. “Teachers’ Experiences of Using PRIMM to Teach Programming in School.” In 2019 Technical Symposium on Computer Science Education (SIGCSE’19). ACM Press. https://doi.org/10.1145/3287324.3287477.\n\n\nWiggins, Grant, and Jay McTighe. 2005. Understanding by Design. Association for Supervision & Curriculum Development (ASCD).\n\n\nWiley, David. 2002. “The Reusability Paradox.” http://opencontent.org/docs/paradox.html.\n\n\nWillingham, Daniel T. 2010. Why Don’t Students Like School?: A Cognitive Scientist Answers Questions about How the Mind Works and What It Means for the Classroom. Jossey-Bass."
  },
  {
    "objectID": "pck.html#sec-pck-now",
    "href": "pck.html#sec-pck-now",
    "title": "8  Conocimiento de la pedagogía del contenido",
    "section": "8.1 ¿Qué les estamos enseñando ahora?",
    "text": "8.1 ¿Qué les estamos enseñando ahora?\nSe sabe muy poco sobre qué se enseña en entrenamientos de programación intensivo e iniciativas free-range, en parte porque muchas personas son reticentes a compartir los programas. Sabemos más sobre lo que se enseña en instituciones Luxton-Reilly et al. (2017):\n\n\n\n\n\n\n\n\n\nTemas\n%\nTemas\n%\n\n\n\n\nProceso de programación\n87%\nTipos de datos\n23%\n\n\nPensamiento abstracto para programación\n63%\nEntrada/Salida\n17%\n\n\nEstructuras de datos\n40%\nLibrerías\n15%\n\n\nConceptos orientados a objetos\n36%\nVariables y asignación\n14%\n\n\nEstructuras de control\n33%\nRecursión\n10%\n\n\nOperaciones y funciones\n26%\nPunteros y administración de memoria\n5%\n\n\n\nTítulos de temas de alto nivel como estos pueden esconder una gran cantidad de fallas. Un resultado más tangible surge de Rich et al. (2017), quienes revisaron cien artículos y encontraron trayectorias de aprendizaje para clases de computación en escuelas primarias y secundarias. Sus resultados para la secuenciación, la repetición y los condicionales son esencialmente mapas conceptuales colectivos que combinan y racionalizan el pensamiento implícito y explícito de gran cantidad de docentes (?fig-pck-trajectory).\n{#fig-pck-trajectory fig-alt = ““}"
  },
  {
    "objectID": "pck.html#sec-pck-learning",
    "href": "pck.html#sec-pck-learning",
    "title": "8  Conocimiento de la pedagogía del contenido",
    "section": "8.2 ¿Cuánto están aprendiendo?",
    "text": "8.2 ¿Cuánto están aprendiendo?\nPuede haber un mundo de distancia entre lo que enseñan las/los docentes y cuánto aprenden sus estudiantes. Para explorar cuánto se aprende, debemos usar otras medidas o hacer estudios directos. Tomando el enfoque tradicional, aproximadamente dos tercios de las/los estudiantes de nivel superior aprueban su primer curso de informática, con algunas variaciones dependiendo del tamaño de la clase, pero sin diferencias significativas a lo largo del tiempo o basadas en el lenguaje Bennedsen and Caspersen (2007),Watson and Li (2014).\n¿Cómo afecta la experiencia previa a estos resultados? Para responder esto, Wilcox and Lionelle (2018) compararon el desempeño y la confianza de personas novatas con y sin experiencia previa en programación en CS1 y CS2 (ver más abajo). Encontraron que personas novatas con experiencia previa superaron a personas sin experiencia en un 10% en CS1, pero esas diferencias desaparecieron hacia el final de CS2. También encontraron que las mujeres con experiencia previa superaron a sus pares masculinos en todas las áreas, pero siempre tenían menos confianza en sus habilidades (Section 11.4).\nEn cuanto a estudios sobre cuánto aprenden las personas novatas, McCracken et al. (2001) presentaron un estudio internacional en múltiples espacios que luego fue replicado por Utting et al. (2013). De acuerdo al primer estudio, “…los decepcionantes resultados sugieren que muchas/os estudiantes no saben cómo programar al final de los cursos introductorios.” Más específicamente, “Para una muestra combinada de 216 estudiantes de cuatro universidades, la puntuación media fue de 22,89 sobre 110 puntos en los criterios generales de evaluación desarrollados para este estudio.” Este resultado puede hablar tanto de las expectativas de docentes como de la habilidad de las/los estudiantes, pero de cualquier manera, nuestra primera recomendación es mide y haz un seguimiento de los resultados de tal manera que se puedan comparar a través del tiempo para que puedas saber si tus lecciones se están volviendo más o menos efectivas."
  },
  {
    "objectID": "pck.html#sec-pck-misunderstand",
    "href": "pck.html#sec-pck-misunderstand",
    "title": "8  Conocimiento de la pedagogía del contenido",
    "section": "8.3 ¿Qué conceptos erróneos tienen las personas novatas?",
    "text": "8.3 ¿Qué conceptos erróneos tienen las personas novatas?\nEl Chapter 3 explicó por qué aclarar los conceptos erróneos a las personas novatas es tan importante como enseñarles estrategias para resolver problemas. La mayor confusión de las personas novatas—a veces llamada el “superbug” o “supererror” en programación—es la creencia de que las computadoras entienden lo que las personas quieren decir de la misma manera que cualquier ser humano lo haría Pea (1986). Nuestra segunda recomendación es entonces enseña a las personas novatas que las computadoras no entienden los programas, es decir, que llamar a una variable “precio” no garantiza que su valor sea realmente un precio.\nSorva (2018) muestra más de cuarenta conceptos erróneos que las/los docentes también pueden intentar aclarar, muchos de los cuales también se discuten en el estudio de Qian and Lehman (2017). Uno es la creencia de que las variables en los programas funcionan de la misma manera que en planillas de cálculo, es decir, que luego de ejecutar:\nnota = 65\ntotal = nota + 10\nnota = 80\nprint(total)\nel valor de total será 90 en vez de 75 Kohn (2017). Este es un ejemplo de la forma en que las personas novatas construyen un modelo mental plausible pero erróneo haciendo analogías. Otras confusiones incluyen:\n\nUna variable guarda la historia de los valores que le fueron asignados, es decir, recuerda cuál solía ser su valor.\nEstá garantizado que dos objetos con el mismo valor para sus atributos nombre o identificación id son el mismo objeto.\nLas funciones son ejecutadas cuando se las define, o son ejecutadas en el orden en que son definidas.\nLa condición de un bucle while se evalúa constantemente, y el bucle se detiene tan pronto como se vuelve falso. Por el contrario, la condición de las sentencias if es constantemente evaluada, y sus declaraciones son ejecutadas tan pronto como la condición se vuelve verdadera, independientemente de dónde se encuentre el flujo de control en ese momento.\nLas asignaciones modifican valores, es decir, después de a = b, la variable b queda vacía."
  },
  {
    "objectID": "pck.html#sec-pck-mistakes",
    "href": "pck.html#sec-pck-mistakes",
    "title": "8  Conocimiento de la pedagogía del contenido",
    "section": "8.4 ¿Qué errores cometen las personas novatas?",
    "text": "8.4 ¿Qué errores cometen las personas novatas?\nLos errores que cometen las personas novatas nos indican qué priorizar cuando enseñamos, pero resulta que la mayoría de las personas que enseñan no saben cuán comunes son los diferentes tipos de errores. El estudio más importante es el de Brown and Altadmri (2017), que encontró que la falta de paréntesis y comillas son el tipo de error más común en programas Java escritos por personas novatas, además de tratarse el error más sencillo de resolver. Por otro lado, algunos errores (como poner la condición de un if en {} en vez de ()) se cometen solo una vez. No extraña que los errores que producen problemas de compilación son resueltos mucho más rápido que aquellos que no lo hacen. Algunos errores, en cambio, se repiten muchas veces, como llamar métodos con los argumentos incorrectos (p. ej. pasar una cadena de caracteres en vez de un número entero).\n\n8.4.1 No es correcto versus No está resuelto\nUna dificultad en una investigación como esta es distinguir los errores del trabajo en proceso. Por ejemplo, una estructura if vacía o un método que se define pero aún no se ha usado puede ser señal de que el código está incompleto más que señal de un error.\n\nBrown and Altadmri (2017) también comparó los errores que las personas novatas realmente cometen con los que sus docentes pensaron que cometieron. Descubrieron que, “…las/los docentes llegaron a un escaso consenso sobre cuáles son los errores más frecuentes. Sus calificaciones tenían solo una correspondencia moderada con la de las/los estudiantes en los…datos y la experiencia de las/los docentes no tuvo ningún efecto en este nivel de acuerdo.” Por ejemplo, confundir = (asignación) con == (igualdad) no eran tan común como la mayoría de las/los docentes creían.\n\n8.4.2 No solo por el código\nPark, Dorn, and Forte (2015) recopiló datos de un editor HTML en línea durante un curso introductorio de desarrollo web y encontró que la mayoría de las/los estudiantes cometieron errores de sintaxis que permanecieron sin ser resueltos por semanas durante el curso. El 20% de esos errores estaban relacionados con reglas relativamente complejas que indican cuándo es válido que los elementos HTML estén anidados entre sí, pero el 35% estaba relacionado a sintaxis de etiquetas más simples que determinan cómo los elementos HTML están anidados. La tendencia de muchas/os docentes a decir “Pero las reglas son simples,” es un buen ejemplo del punto ciego de las personas expertas que se analiza en el Chapter 4…"
  },
  {
    "objectID": "pck.html#sec-pck-programming",
    "href": "pck.html#sec-pck-programming",
    "title": "8  Conocimiento de la pedagogía del contenido",
    "section": "8.5 ¿Cómo programan las personas novatas?",
    "text": "8.5 ¿Cómo programan las personas novatas?\nSoloway and Ehrlich (1984),Soloway (1986) son trabajos pioneros en la exploración de las estrategias de programación de personas novatas y expertas. El hallazgo clave es que las personas expertas saben al mismo tiempo el “qué” y el “cómo,” es decir, entienden qué poner en los programas y tienen un conjunto de patrones o plan para guiar su construcción. Las personas principiantes no tienen ninguna de las dos cosas, pero la mayoría de las/los docentes se enfocan únicamente en lo primero, a pesar de que los errores son usualmente causados por no tener una estrategia para resolver el problema, en lugar de falta de conocimiento sobre el lenguaje. Un trabajo reciente mostró la efectividad de enseñar cuatro habilidades distintas en un orden específico Xie et al. (2019):\n\n\n\n\n\n\n\n\n\nsemántica del código\nplantillas asociadas a objetivos\n\n\nleyendo\n1. leer el código y predecir su comportamiento\n3. reconocer plantillas y sus usos\n\n\nescribiendo\n2. escribir la sintaxis correcta\n4. usar las plantillas para alcanzar objetivos\n\n\n\nPor lo tanto, nuestras siguientes recomendaciones son: haz que tus estudiantes lean código, luego lo modifiquen, luego lo escriban y además preséntales explícitamente patrones comunes y haz que practiquen usándolos. Muller, Ginat, and Haberman (2007) es uno de los tantos estudios que muestran los beneficios de enseñar patrones comunes de manera explícita. Descomponer los problemas en patrones comunes crea oportunidades naturales para crear y etiquetar sub-objetivos Margulieux, Guzdial, and Catrambone (2012),Margulieux, Catrambone, and Guzdial (2016)."
  },
  {
    "objectID": "pck.html#sec-pck-debug",
    "href": "pck.html#sec-pck-debug",
    "title": "8  Conocimiento de la pedagogía del contenido",
    "section": "8.6 ¿Cómo identifican y resuelven errores las personas novatas?",
    "text": "8.6 ¿Cómo identifican y resuelven errores las personas novatas?\nUna década atrás, McCauley et al. (2008) escribieron: “Es sorprendente el poco espacio que se dedica a los errores y cómo resolverlos en la mayoría de los libros introductorios de programación.” Poco ha cambiado desde entonces: hay cientos de libros sobre compiladores y sistemas operativos, pero solo unos pocos sobre depuración de errores y nunca he visto un curso de pregrado dedicado a este tema.\nLister et al. (2004),Lister, Fidge, and Teague (2009) encontraron que a muchas personas novatas les cuesta predecir el resultado de pocas líneas de código y seleccionar la salida correcta del código a partir de un conjunto de posibilidades cuando les decían lo que se suponía que el código debía hacer. Más recientemente, Harrington and Cheng (2018) encontraron que la brecha entre poder entender el código y poder escribirlo se ha cerrado en gran medida gracias a CS2, pero que las personas novatas que aún tienen esa brecha es probable que les vaya mal.\nNuestra quinta recomendación es entonces enséñales explícitamente a las personas principiantes cómo depurar errores. Fitzgerald et al. (2008),Murphy et al. (2008) encontraron que las personas que pueden resolver errores son buenas programando, pero no todas las personas que son buenas programando son buenas resolviendo errores. Aquellas personas que eran buenas programando usaron un depurador de errores simbólico para recorrer sus programas, rastrearon su ejecución manualmente, escribieron pruebas y releyeron las especificaciones frecuentemente; todos hábitos que se pueden enseñar. Sin embargo, rastrear la ejecución paso a paso a veces se usa de manera ineficaz: por ejemplo, una persona novata podría poner la misma declaración print en ambas partes de una estructura if-else. Las personas novatas también comentarían líneas de código que en realidad eran correctas al tratar de aislar un problema. Las/los docentes pueden cometer estos dos errores deliberadamente, señalarlos y corregirlos para ayudar a las personas novatas a aprender cómo resolverlos.\nEnseñar a principiantes cómo depurar errores también puede ayudar a que las clases sean más simples de manejar. Alqadi and Maletic (2017) encontró que estudiantes con mayor experiencia resolvieron problemas de depuración de errores significativamente más rápido, pero que los tiempos variaron ampliamente: entre 4 a 10 minutos fue el rango típico para ejercicios individuales, lo cual significa que algunas/os estudiantes necesitan entre 2 y 3 veces más tiempo que otras/os para resolver el mismo ejercicio. Para ayudar a que el progreso de todo el grupo sea más uniforme, es conveniente enseñarles a quienes resuelven los ejercicios más lentamente qué están haciendo las personas más rápidas.\nLa depuración de errores depende de ser capaz de leer el código, algo que múltiples estudios han demostrado que es la forma más efectiva de encontrar errores Basili and Selby (1987),Kemerer and Paulk (2009),Bacchelli and Bird (2013). La rúbrica de calidad de código desarrollada por Stegeman, Barendsen, and Smetsers (2014),Stegeman, Barendsen, and Smetsers (2016) es una buena lista de verificación de elementos a revisar, aunque se presenta mejor de a partes en lugar de toda junta.\nHacer que las/los estudiantes lean código y resuman su comportamiento es un buen ejercicio (Section 6.1), pero frecuentemente lleva mucho tiempo practicarlo en clase. Hacer que las/los estudiantes predigan la salida de un programa justo antes de que sea ejecutado, por otro lado, ayuda a reforzar el aprendizaje (Section 10.11) y además les da la oportunidad ideal para hacer el tipo de preguntas “qué pasaría si”. Las/los docentes o estudiantes pueden además rastrear los cambios en las variables a medida que avanzan, algo que Cunningham et al. (2017) encontró efectivo (?sec-exercises-tracing)."
  },
  {
    "objectID": "pck.html#sec-pck-testing",
    "href": "pck.html#sec-pck-testing",
    "title": "8  Conocimiento de la pedagogía del contenido",
    "section": "8.7 ¿Qué pasa con las pruebas (tests)?",
    "text": "8.7 ¿Qué pasa con las pruebas (tests)?\nLas personas novatas en programación parecen tan reacias a testear software como aquellas personas profesionales. No hay duda de que hacerlo es valioso—Carter and Hundhausen (2017) encontró que las personas novatas con un alto rendimiento dedican mucho tiempo a testear el código, mientras que las personas novatas con un bajo rendimiento dedican mucho más tiempo a trabajar en el código con errores—y muchas/os docentes requieren que las/los estudiantes escriban tests en las actividades. ¿Pero qué tan bien lo hacen? Una posible respuesta proviene de Brian et al. (2015), quienes calificaron el código de las/los estudiantes según la cantidad de situaciones, definidas por la/el docente, que pasaban correctamente las pruebas de los programas. A la inversa, estos autores también calificaron los casos de prueba escritos por las/los estudiantes de acuerdo a cuántos errores (deliberadamente introducidos en el código) podían detectar.\nLos autores encontraron que los tests de las personas novatas usualmente tienen un bajo alcance (es decir, no testean gran parte del código) y que usualmente testean muchas cosas al mismo tiempo, lo que dificulta determinar las causas de los errores.\nOtra posible respuesta a la pregunta “¿Qué tan bien testean código las personas novatas?” proviene de Edwards and Shams (2014), quienes examinaron todos los errores en el código programado por personas novatas y a su vez identificaron aquellos errores detectados por el conjunto de pruebas (test) de personas novatas. En este trabajo se encontró que las pruebas de personas novatas solo detectaban un promedio de 13,6% de los errores presentes en la totalidad de los programas. Además, el 90% de las pruebas de las personas novatas fueron muy parecidas, lo que indica que las personas novatas escriben pruebas principalmente para confirmar que el código está haciendo lo que se supone que debe hacer en lugar de encontrar situaciones en las que el código no hace lo que se supone que debe hacer.\nUn enfoque para enseñar mejores prácticas para generar pruebas es definir un problema de programación proporcionando un conjunto de pruebas que deben ser pasadas en lugar de una descripción (?sec-exercises-classics). Sin embargo, antes de hacerlo tómate un momento para ver cuántas pruebas has escrito en tu propio código recientemente y luego decide si estás enseñando lo que crees que las personas deberían hacer, o lo que ellos (y tú) realmente hacen."
  },
  {
    "objectID": "pck.html#sec-pck-language",
    "href": "pck.html#sec-pck-language",
    "title": "8  Conocimiento de la pedagogía del contenido",
    "section": "8.8 ¿Importa el lenguaje?",
    "text": "8.8 ¿Importa el lenguaje?\nLa respuesta corta es “sí”: las personas novatas aprenden a programar más rápido y aprenden más usando herramientas basadas en bloques como Scratch (&lt;a figure=“f:pck-scratch) Weintrop and Wilensky (2017). Una razón es que esos sistemas basados en bloques reducen la carga cognitiva al eliminar la posibilidad de cometer errores de sintaxis. Otra razón es que esas interfaces de bloques promueven la exploración de una manera que el texto no hace: como todas las buenas herramientas, Scratch se puede aprender accidentalmente Maloney et al. (2010).\nPero, ¿qué sucede luego de los bloques? Chen et al. (2018) encontró que las personas cuyo primer lenguaje de programación fue gráfico, tenían calificaciones más altas en cursos introductorios de programación en comparación con las personas cuyo primer lenguaje era textual cuando los lenguajes se aprendieron durante o antes de los primeros años de adolescencia. Nuestra sexta recomendación es preséntales interfaces basadas en bloques a niñas/os y adolescentes antes de avanzar a sistemas basados en texto. La calificación de edad corresponde a que Scratch deliberadamente parece destinado a usuarias/os jóvenes, y puede ser difícil convencer a personas adultas de que lo tomen en serio.\n\n&lt;img src=“scratch-program.png” alt=“Scratch\n\nScratch\n\n\nScratch probablemente ha sido estudiado más que cualquier otra herramienta de programación. Un ejemplo es Aivaloglou and Hermans (2016), quienes analizaron más de 250.000 proyectos de Scratch y encontraron (entre otras cosas) que alrededor del 28% de esos proyectos tenían algunos bloques que nunca eran usados o activados. Como en la sección anterior sobre los programas en Java incompletos versus incorrectos, las autoras plantean la hipótesis de que las/los usuarias/os pueden estar utilizando estos bloques como borrador para hacer un seguimiento de las partes del código que no quieren eliminar (todavía). Otros ejemplos son Grover and Basu (2017),Mladenović, Boljat, and Žanko (2017), que estudiaron a personas novatas aprendiendo sobre bucles en Scratch, Logo y Python. Encontraron que los conceptos erróneos sobre bucles se minimizan cuando se usa un lenguaje basado en bloques en lugar de un lenguaje basado en texto. Además, a medida que las tareas se vuelven más complejas (como el uso de bucles anidados) las diferencias son mayores.\n\n8.8.1 Más difícil de lo necesario\nLas personas que crean lenguajes de programación hacen que esos lenguajes sean más difíciles de aprender al no realizar pruebas básicas de usabilidad. Por ejemplo, Stefik and Siebert (2013) encontraron que, “…las tres palabras más comunes para generar bucles en ciencias de la computación, for, while y foreach, fueron calificadas como las tres opciones más anti-intuitivas por personas que no programan.” Su trabajo muestra que sintaxis al estilo de C (como se usa en Java y Perl) son tanto más difíciles de aprender para personas novatas como una sintaxis diseñada de manera aleatoria, pero que la sintaxis de lenguajes como Python y Ruby es significativamente más fácil de aprender, y la sintaxis de un lenguaje cuyas características son probadas antes de incorporarse es aún más fácil. Stefik et al. (2017) es un útil y breve resumen de lo que realmente sabemos sobre el diseño de lenguajes de programación y por qué creemos que es cierto, mientras que Guzdial (2016) expone cinco principios que los lenguajes de programación para estudiantes deberían seguir.\n\n\n8.8.2 Programación orientada a objetos\nLos objetos y clases son herramientas poderosas para personas con experiencia en programación, y muchas/os docentes promueven un enfoque de primero objetos para enseñar a programar (aunque a veces no concuerdan exactamente con lo que eso significa Bennedsen and Schulte (2007)). Sorva and Seppälä (2014) describen y motivan este enfoque, y Kölling (2015) describe tres generaciones de herramientas designadas para apoyar a personas novatas para que programen en ambientes orientados a objetos.\nIntroducir objetos temprano tiene algunos desafíos. Miller and Settle (2016) encontró que la mayoría de las personas novatas que usan Python tenían problemas para entender self (que refiere al objeto actual): las personas lo omitieron en las definiciones de métodos, no lo usaron cuando hacían referencia a los atributos del objeto, o tuvieron ambas dificultades. Ragonis and Shmallo (2017) encontró algo similar en estudiantes de nivel secundario, y además encontró que docentes de secundaria usualmente tampoco tenían claro el concepto. En resumen, recomendamos que, como docente, comiences con funciones en vez de objetos, es decir, que no les enseñes a tus estudiantes cómo definir clases hasta que comprendan las estructuras básicas de control y los tipos de datos.\n\n\n8.8.3 Declaración de tipos\nLas personas que programan han discutido durante décadas acerca de si los tipos de datos de variables deberían ser declarados o no, usualmente basándose en su experiencia personal como profesionales en lugar de tener en cuenta el tipo de datos. Endrikat et al. (2014),Fischer and Hanenberg (2015) encontraron que pedir a personas novatas que declaren los tipos de variables suma cierta complejidad a los programas, pero se compensa rápidamente al actuar como documentación del uso de los métodos —en particular, evita preguntas sobre qué métodos están disponibles y cómo usarlos.\n\n\n8.8.4 Nombrando variables\nKernighan and Pike (1999) escribieron: “A menudo se alienta a quienes programan a usar nombres de variables largos independientemente del contexto. Esto es un error: la claridad a menudo se logra siendo breves.” Muchas/os programadoras/es creen esto, pero Hofmeister, Siegmund, and Holt (2017) encontraron que usar palabras completas en nombres de variables condujo, en promedio, a una comprensión un 19% más rápida en comparación con letras y abreviaturas. En contraste, Beniamini et al. (2017) encontraron que el uso de nombres de variables de una sola letra no afectaba la capacidad de las personas principiantes de modificar el código. Esto puede deberse a que sus programas son más cortos que los de profesionales o porque algunos nombres de variables de una sola letra tienen tipos y significados implícitos. Por ejemplo, la mayoría de las personas que programan asumen que i, j y n son enteros y que s es una cadena de caracteres, mientras que x, y y z son números de punto flotante o enteros más o menos equivalentemente.\n¿Qué tan importante es esto? Binkley et al. (2012) reportaron que leer y comprender el código es fundamentalmente distinto de leer prosa: “…la estructura más formal y la sintaxis del código fuente permite a quienes programan asimilar y comprender partes del código rápidamente independientemente del estilo. En particular…las guías y los planes de programación juegan un papel importante en la comprensión.” También encontró que a las/los desarrolladoras/es con experiencia no les afecta el estilo del identificador, entonces nuestra recomendación es utilizar un estilo coherente en todos los ejemplos. Dado que la mayoría de los lenguajes tienen guías de estilo (por ejemplo, [PEP 8][pep-8] para Python) y herramientas para verificar que el código siga esas pautas, nuestra recomendación completa es utiliza herramientas para garantizar que todos los ejemplos de código se adhieran a un estilo consistente."
  },
  {
    "objectID": "pck.html#sec-pck-error",
    "href": "pck.html#sec-pck-error",
    "title": "8  Conocimiento de la pedagogía del contenido",
    "section": "8.9 ¿Ayudan mejores mensajes de error?",
    "text": "8.9 ¿Ayudan mejores mensajes de error?\nLos mensajes de error incomprensibles son una fuente importante de frustración para las personas novatas (y también para personas experimentadas). Por lo tanto, en varias investigaciones se exploró si mejores mensajes de error ayudan a evitar esta frustración. Por ejemplo, Becker et al. (2016) reescribieron algunos de los mensajes del compilador de Java para que en lugar de:\nC:\\stj\\Hola.java:2: error: cannot find symbol\n        public static void main(string[ ] args)\n^\n1 error\nProcess terminated ... there were problems.\nlas personas vean:\nLooks like a problem on line number 2.\nIf \"string\" refers to a datatype, capitalize the 's'!\nEfectivamente, las personas novatas que recibieron estos mensajes repitieron menos los errores y cometieron menos errores en general.\nBarik et al. (2017) fueron más allá y usaron seguimiento ocular para mostrar que a pesar de las quejas de las personas que escriben los compiladores, las personas realmente leen los mensajes de error—de hecho, pasan del 13 al 25% de su tiempo haciendo eso. Sin embargo, leer mensajes de error resulta ser tan difícil como leer el código fuente, y la dificultad en leer los mensajes de error predice fuertemente el desempeño de la tarea. Por lo tanto, al enseñar muéstrales a tus estudiantes cómo leer e interpretar mensajes de error. Marceau, Fisler, and Krishnamurthi (2011) tiene una rúbrica con respuestas a los mensajes de error que puede ser útil para calificar ese tipo de ejercicios.\n\n8.9.1 ¿Ayuda la visualización?\nVisualizar la ejecución de un programa es una idea siempre popular, y herramientas como el tutor de Python en línea Guo (2013) y [Loupe][loupe] (que muestra cómo funciona un bucle de eventos de JavaScript) son útiles para enseñar. Sin embargo, las personas aprenden más al construir visualizaciones que al ver visualizaciones construidas por otras personas Stasko et al. (1998),Cetin and Andrews-Larson (2016), entonces, ¿las visualizaciones realmente ayudan al aprendizaje?\nPara responder esto, Cunningham et al. (2017) replicaron un estudio previo sobre los tipos de esquemas que realizan las/los estudiantes cuando rastrean la ejecución del código. Encontraron que no hacer esquemas se correlaciona con un menor éxito, mientras que el seguimiento de los cambios de valor de una variable escribiendo los nuevos valores cerca de su nombre a medida que cambian fue la estrategia más efectiva.\nUn posible elemento de confusión que revisaron es el tiempo: dado que quienes hacen esquemas llevan significativamente más tiempo resolver los problemas, ¿lo hacen mejor solo porque piensan por más tiempo? La respuesta es no: no encontraron correlación entre el tiempo que se tomaron y el puntaje alcanzado. Nuestra recomendación es, por lo tanto, enseña a rastrear los valores que toman las variables al depurar errores.\n\n8.9.2 Diagramas de flujo\nUn hallazgo que a menudo se pasa por alto sobre la visualización es que las personas entienden mejor los diagramas de flujo que el pseudocódigo si ambos están igualmente bien estructurados Scanlan (1989). Los estudios previos que señalaban que el pseudocódigo superaba a los diagramas de flujo, usaron pseudocódigo estructurado pero diagramas de flujo desordenados: cuando se niveló el campo de juego, se observó que a las personas novatas les fue mejor con la representación gráfica."
  },
  {
    "objectID": "pck.html#sec-pck-help",
    "href": "pck.html#sec-pck-help",
    "title": "8  Conocimiento de la pedagogía del contenido",
    "section": "8.10 ¿Qué más podemos hacer para ayudar?",
    "text": "8.10 ¿Qué más podemos hacer para ayudar?\nVihavainen, Airaksinen, and Watson (2014) examinó la mejora promedio en las tasas de aprobación de varios tipos de intervenciones en clases de programación. Señalan que hay muchas razones para tomar sus conclusiones con cautela: las prácticas de enseñanza previas al cambio rara vez se establecen claramente, la calidad del cambio no es juzgada, y solo el 8.3% de los estudios reportaron resultados negativos. Entonces, o hay un sesgo al reportar resultados, o la forma en la que enseñamos en este momento es la peor posible y cualquier cosa sería una mejora. Como muchos otros estudios discutidos en este capítulo, en este trabajo sólo estaban observando clases universitarias, por lo que sus hallazgos pueden no ser generalizables a otros grupos.\nCon esas advertencias en mente, los autores encontraron diez cosas que las/dos docentes puede hacer para mejorar los resultados (&lt;a figure=“f:pck-interventions):\n\nColaboración:\n\nActividades que fomenten la colaboración entre las/los estudiantes, ya sea en aulas o en laboratorios.\n\nCambio del contenido:\n\nSe modificaron o actualizaron partes del material.\n\nContextualización:\n\nEl contenido y las actividades del curso se alinearon con un contexto específico, como juegos o medios.\n\nCS0:\n\nCreación de un curso preliminar a tomar antes del curso introductorio de programación; podría organizarse solo para algunas personas (por ejemplo, si están en riesgo de abandonar).\n\nTemática de juego:\n\nSe introdujo una componente de juego en el curso.\n\nEsquema de calificación:\n\nUn cambio en el sistema de calificación, como, por ejemplo, aumentar la importancia de las actividades de programación y reducir la del examen.\n\nTrabajo en equipos:\n\nActividades con un mayor compromiso de trabajo en grupo, como el aprendizaje en equipo y cooperativo.\n\nRecursos multimedia:\n\nActividades que usen explícitamente el uso de recursos multimedia (Chapter 11).\n\nApoyo de colegas:\n\nEl apoyo de pares en forma de parejas, grupos, mentoras/es contratadas/os o tutorías.\n\nOtro apoyo:\n\nUn término general para todas las actividades de apoyo, por ejemplo, mayor cantidad de horas docentes, canales de ayuda adicionales, etc.\n\n\n\n&lt;img src=“interventions-scaled.png” alt=“Efectividad de las intervenciones\n\nEfectividad de las intervenciones\n\n\nEsta lista destaca la importancia del aprendizaje cooperativo. Beck and Chizhik (2013) analizaron este tipo de aprendizaje específicamente durante tres años académicos en cursos a cargo dos docentes diferentes y encontraron beneficios significativos en general y para muchos subgrupos. Las personas que cooperaron obtuvieron calificaciones más altas y dejaron menos preguntas en blanco en el examen final, lo que indica una mayor autoeficacia y disposición para depurar cosas.\n\n8.10.1 Computación sin código\nEscribir código no es la única forma de enseñar a las personas a programar: hacer que las personas novatas trabajen en ejercicios de creatividad computacional mejora sus calificaciones en varios niveles Shell et al. (2017). Un ejercicio típico es describir un objeto cotidiano (como un clip o un cepillo de dientes) en términos de sus entradas, salidas y funciones. Este tipo de enseñanza a veces es llamada ciencias de la computación desenchufada; La página web [CS Unplugged][cs-unplugged-es] tiene lecciones y ejercicios para este tipo de enseñanza."
  },
  {
    "objectID": "pck.html#sec-pck-final",
    "href": "pck.html#sec-pck-final",
    "title": "8  Conocimiento de la pedagogía del contenido",
    "section": "8.11 ¿Qué sigue?",
    "text": "8.11 ¿Qué sigue?\nPara aquellas personas que quieran profundizar, Fincher and Robins (2019) es un completo resumen de investigación sobre educación en informática y Ihantola et al. (2016) resume los métodos que estos estudios usan más frecuentemente. Espero que algún día tengamos catálogos como Ojose (2015) y más materiales para capacitar docentes como Hazzan, Lapidot, and Ragonis (2014),Guzdial (2015),Sentance, Barendsen, and Schulte (2018) para ayudarnos a enseñar mejor.\nLa mayor parte de la investigación mencionada en este capítulo fue financiada con fondos públicos pero tenemos que pagar para leerla: rompí la ley aproximadamente 250 veces para descargar trabajos científicos de páginas web como [Sci-Hub][sci-hub] mientras escribía este libro. Espero que llegue el día en que nadie tenga que acceder al conocimiento científico de esta manera; si investigas, por favor ayuda a que ese día se acerque publicando tu trabajo en lugares de acceso abierto."
  },
  {
    "objectID": "pck.html#sec-pck-exercises",
    "href": "pck.html#sec-pck-exercises",
    "title": "8  Conocimiento de la pedagogía del contenido",
    "section": "8.12 Ejercicios",
    "text": "8.12 Ejercicios\n\n8.12.1 Conceptos erróneos de tus estudiantes (grupos pequeños/15’)\nTrabajando en grupos pequeños, vuelvan a leer la Section 8.3 y escriban una lista de conceptos erróneos que piensan que pueden tener sus estudiantes. ¿Qué tan específicos son? ¿Cómo verificarían que tan precisa es su lista?\n\n\n8.12.2 Revisando errores comunes (individual/20’)\nEstos errores comunes corresponden a una lista más larga en Sirkiä and Sorva (2012):\n\nAsignación invertida:\n\nLa/el estudiante asigna el valor del lado izquierdo de la variable al lado derecho de la variable en vez de hacerlo al revés.\n\nRama equivocada:\n\nLa/el estudiante piensa que el código del cuerpo de un if corre, aun si la condición es falsa.\n\nEjecutar una función en vez de definirla:\n\nLas/los estudiantes creen que una función se ejecuta a medida que es definida.\n\n\nEscribe un ejercicio para chequear que tus estudiantes no están cometiendo cada uno de estos errores.\n\n\n8.12.3 Código desarmado (parejas/15’)\nCheng and Harrington (2017) describen ejercicios en los que las/los estudiantes reconstruyen el código que ha sido desarmado al eliminar comentarios, borrar o reemplazar líneas de código, al mover líneas, etc. El rendimiento en estos ejercicios se correlaciona fuertemente con el rendimiento en las evaluaciones en las que las personas deben escribir código, pero estas preguntas requieren menos trabajo para evaluar. Toma la solución de un ejercicio de programación que hayas creado en el pasado y desármalo de dos maneras distintas. Intercambia el ejercicio con tu pareja. Analicen cuánto tiempo les lleva responder correctamente los problemas elaborados por la otra persona.\n\n\n8.12.4 El problema de la lluvia (parejas/10’)\nSoloway (1986) presentó el problema de la lluvia, que se ha usado en muchos estudios posteriores sobre programación Fisler (2014),Simon (2013),Seppälä et al. (2015). Escribe un programa que repetidamente lea números enteros positivos hasta que llega a 99999. Después de llegar a 99999, el programa imprime el promedio de esos números leídos.\n\nResuelve el problema de la lluvia en el lenguaje de programación que prefieras.\nCompara tu solución con la de tu pareja. ¿Qué hace tu programa que no hace el de tu colega y viceversa?\n\n\n\n8.12.5 Roles de variables (parejas/15’)\nKuittinen and Sajaniemi (2004),Byckling, Gerdt, and Sajaniemi (2005),Sajaniemi et al. (2006) presentaron un conjunto de patrones de una sola variable que encuentro muy útil en la enseñanza de personas novatas:\n\nValor fijo:\n\nUn elemento que no toma un nuevo valor después de ser inicializado.\n\nPaso a paso:\n\nUn elemento que pasa por una sucesión sistemática y predecible de valores.\n\nCaminante:\n\nUn elemento que atraviesa una estructura de datos.\n\nElemento más reciente:\n\nUn elemento que guarda el último valor encontrado al pasar por una sucesión de valores.\n\nElemento más buscado:\n\nUn elemento que guarda el mejor o el valor más apropiado encontrado hasta el momento.\n\nRecolector:\n\nUn elemento que acumula el efecto de valores individuales.\n\nSeguidor:\n\nUn elemento que siempre obtiene su nuevo valor a partir del valor anterior de algún otro elemento.\n\nMarca unidireccional:\n\nUn elemento de datos de dos valores que no puede obtener su valor inicial una vez que su valor se ha cambiado.\n\nTemporal:\n\nUn elemento que contiene un valor solamente por poco tiempo.\n\nOrganizador:\n\nUna estructura de datos que guarda elementos que pueden ser reordenados.\n\nContenedor:\n\nUna estructura de datos que guarda elementos que pueden ser eliminados.\n\n\nElige un programa de 5 a 15 líneas y clasifica sus variables usando estas categorías. Compara tus clasificaciones con tu pareja. En los casos en los que no estuvieron de acuerdo, ¿entendieron el punto de vista de la otra persona?\n\n\n8.12.6 ¿Qué estás enseñando? (individual/10’)\nCompara los temas que enseñas con la lista desarrollada en Luxton-Reilly et al. (2017) (Section 8.1). ¿Qué temas tratas? ¿Qué temas no incluyes? ¿Qué temas adicionales incluyes pero no están en la lista?\n\n\n8.12.7 Actividades beneficiosas (individual/10’)\nMira la lista de intervenciones desarrolladas por Vihavainen, Airaksinen, and Watson (2014) (Section 8.10). ¿Cuáles de estas cosas ya haces en tus clases? ¿Cuáles podrías agregar fácilmente? ¿Cuáles son irrelevantes?\n\n\n8.12.8 Conceptos erróneos y desafíos (grupos pequeños/15’)\nEl sitio [Desarrollo Profesional para la Enseñanza de Principios de CS][pd4cs] incluye [una lista detallada de conceptos erróneos de estudiantes y ejercicios][pd4cs-misconceptions]. Trabajando en grupos pequeños, elige una sección (por ejemplo, estructura de datos o funciones) y revisa la lista. ¿Cuáles de estos conceptos erróneos recuerdas haber tenido cuando eras estudiante? ¿Cuáles tienes todavía? ¿Cuáles has visto en tus estudiantes?\n\n\n8.12.9 ¿Qué es lo que más te importa? (toda la clase/15’)\nDenny et al. (2019) les pidieron a varias personas que propongan y califiquen preguntas de investigación sobre educación en informática. Encontraron que no había superposición entre las preguntas que más les importaban a las/los investigadoras/es y las que les interesaban a quienes no investigaban. Las preguntas favoritas de las/los investigadoras/es fueron:\n\n¿Qué conceptos fundamentales de programación son los más desafiantes para las/los estudiantes?\n¿Qué estrategias de enseñanza son más efectivas cuando se trata de una amplia gama de experiencias previas en clases introductorias de programación?\n¿Qué afecta la capacidad de las/los estudiantes para generalizar a partir de ejemplos de programación simples?\n¿Qué prácticas de enseñanza son más efectivas para enseñar computación a niñas/os?\n¿Qué tipo de problemas de una clase de computación resultan más interesantes para las personas?\n¿Cuáles son las formas más efectivas de enseñar programación a varios grupos?\n¿Cuáles son las formas más efectivas de escalar la educación informática para llegar a la población general de estudiantes?\n\nMientras que las preguntas más importantes para las personas que no investigan fueron:\n\n¿Cómo y cuándo es mejor dar retroalimentación a las/los estudiantes sobre su código para mejorar el aprendizaje?\n¿Qué tipo de ejercicios de programación son más efectivos al enseñar a estudiantes de Ciencias de la Computación?\n¿Cuáles son los méritos relativos del aprendizaje basado en proyectos, las clases y el aprendizaje activo, para estudiantes de computación?\n¿Cuál es la forma más efectiva de hacer comentarios a las/los estudiantes en las clases de programación?\nAl dividir los problemas en tareas más pequeñas mientras programan, ¿qué les resulta más difícil de aprender a las personas?\n¿Cuáles son los conceptos clave que las/los estudiantes deben entender en las clases introductorias de computación?\n¿Cuáles son las formas más efectivas de desarrollar competencia en estudiantes de disciplinas no informáticas?\n¿Cuál es el mejor orden para enseñar conceptos y habilidades básicas en informática?\n\nHaz que cada persona de la clase, de forma independiente, le otorgue un punto a las ocho preguntas que más les interese, de cualquiera de las dos listas. Luego, calcula el puntaje promedio para cada pregunta. ¿Cuáles son las preguntas más populares en tu clase? ¿En qué grupo están las preguntas más populares?\n\n\n\n\nAivaloglou, Efthimia, and Felienne Hermans. 2016. “How Kids Code and How We Know.” In 2016 International Computing Education Research Conference (ICER’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2960310.2960325.\n\n\nAlqadi, Basma S., and Jonathan I. Maletic. 2017. “An Empirical Study of Debugging Patterns Among Novice Programmers.” In 2017 Technical Symposium on Computer Science Education (SIGCSE’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3017680.3017761.\n\n\nBacchelli, Alberto, and Christian Bird. 2013. “Expectations, Outcomes, and Challenges of Modern Code Review.” In 2013 International Conference on Software Engineering (ICSE’13).\n\n\nBarik, Titus, Justin Smith, Kevin Lubick, Elisabeth Holmes, Jing Feng, Emerson Murphy-Hill, and Chris Parnin. 2017. “Do Developers Read Compiler Error Messages?” In 2017 International Conference on Software Engineering (ICSE’17). Institute of Electrical; Electronics Engineers (IEEE). https://doi.org/10.1109/icse.2017.59.\n\n\nBasili, Victor R., and Richard W. Selby. 1987. “Comparing the Effectiveness of Software Testing Strategies.” IEEE Transactions on Software Engineering SE-13 (12): 1278–96. https://doi.org/10.1109/tse.1987.232881.\n\n\nBeck, Leland, and Alexander Chizhik. 2013. “Cooperative Learning Instructional Methods for CS1: Design, Implementation, and Evaluation.” ACM Transactions on Computing Education 13 (3): 10:1–21. https://doi.org/10.1145/2492686.\n\n\nBecker, Brett A., Graham Glanville, Ricardo Iwashima, Claire McDonnell, Kyle Goslin, and Catherine Mooney. 2016. “Effective Compiler Error Message Enhancement for Novice Programming Students.” Computer Science Education 26 (2-3): 148–75. https://doi.org/10.1080/08993408.2016.1225464.\n\n\nBeniamini, Gal, Sarah Gingichashvili, Alon Klein Orbach, and Dror G. Feitelson. 2017. “Meaningful Identifier Names: The Case of Single-Letter Variables.” In 2017 International Conference on Program Comprehension (ICPC’17). Institute of Electrical; Electronics Engineers (IEEE). https://doi.org/10.1109/icpc.2017.18.\n\n\nBennedsen, Jens, and Michael E. Caspersen. 2007. “Failure Rates in Introductory Programming.” ACM SIGCSE Bulletin 39 (2): 32. https://doi.org/10.1145/1272848.1272879.\n\n\nBennedsen, Jens, and Carsten Schulte. 2007. “What Does ‘Objects-First’ Mean?: An International Study of Teachers’ Perceptions of Objects-First.” In 2007 Koli Calling Conference on Computing Education Research (Koli’07), 21–29.\n\n\nBinkley, Dave, Marcia Davis, Dawn Lawrie, Jonathan I. Maletic, Christopher Morrell, and Bonita Sharif. 2012. “The Impact of Identifier Style on Effort and Comprehension.” Empirical Software Engineering 18 (2): 219–76. https://doi.org/10.1007/s10664-012-9201-4.\n\n\nBrian, Samuel A., Richard N. Thomas, James M. Hogan, and Colin Fidge. 2015. “Planting Bugs: A System for Testing Students’ Unit Tests.” In 2015 Conference on Innovation and Technology in Computer Science Education (ITiCSE’15). Association for Computing Machinery (ACM). https://doi.org/10.1145/2729094.2742631.\n\n\nBrown, Neil C. C., and Amjad Altadmri. 2017. “Novice Java Programming Mistakes.” ACM Transactions on Computing Education 17 (2). https://doi.org/10.1145/2994154.\n\n\nByckling, Pauli, Petri Gerdt, and Jorma Sajaniemi. 2005. “Roles of Variables in Object-Oriented Programming.” In 2005 Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA’05). Association for Computing Machinery (ACM). https://doi.org/10.1145/1094855.1094972.\n\n\nCarter, Adam Scott, and Christopher David Hundhausen. 2017. “Using Programming Process Data to Detect Differences in Students’ Patterns of Programming.” In 2017 Technical Symposium on Computer Science Education (SIGCSE’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3017680.3017785.\n\n\nCetin, Ibrahim, and Christine Andrews-Larson. 2016. “Learning Sorting Algorithms Through Visualization Construction.” Computer Science Education 26 (1): 27–43. https://doi.org/10.1080/08993408.2016.1160664.\n\n\nChen, Chen, Paulina Haduong, Karen Brennan, Gerhard Sonnert, and Philip Sadler. 2018. “The Effects of First Programming Language on College Students’ Computing Attitude and Achievement: A Comparison of Graphical and Textual Languages.” Computer Science Education 29 (1): 23–48. https://doi.org/10.1080/08993408.2018.1547564.\n\n\nCheng, Nick, and Brian Harrington. 2017. “The Code Mangler: Evaluating Coding Ability Without Writing Any Code.” In 2017 Technical Symposium on Computer Science Education (SIGCSE’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3017680.3017704.\n\n\nCunningham, Kathryn, Sarah Blanchard, Barbara J. Ericson, and Mark Guzdial. 2017. “Using Tracing and Sketching to Solve Programming Problems.” In 2017 Conference on International Computing Education Research (ICER’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3105726.3106190.\n\n\nDenny, Paul, Brett A. Becker, Michelle Craig, Greg Wilson, and Piotr Banaszkiewicz. 2019. “Research This! Questions That Computing Educators Most Want Computing Education Researchers to Answer.” In 2019 Conference on International Computing Education Research (ICER’19). Association for Computing Machinery (ACM).\n\n\nEdwards, Stephen H., and Zalia Shams. 2014. “Do Student Programmers All Tend to Write the Same Software Tests?” In 2014 Conference on Innovation and Technology in Computer Science Education (ITiCSE’14). Association for Computing Machinery (ACM). https://doi.org/10.1145/2591708.2591757.\n\n\nEndrikat, Stefan, Stefan Hanenberg, Romain Robbes, and Andreas Stefik. 2014. “How Do API Documentation and Static Typing Affect API Usability?” In 2014 International Conference on Software Engineering (ICSE’14). ACM Press. https://doi.org/10.1145/2568225.2568299.\n\n\nFincher, Sally, and Anthony Robins, eds. 2019. The Cambridge Handbook of Computing Education Research. Cambridge University Press.\n\n\nFischer, Lars, and Stefan Hanenberg. 2015. “An Empirical Investigation of the Effects of Type Systems and Code Completion on API Usability Using TypeScript and JavaScript in MS Visual Studio.” In 11th Symposium on Dynamic Languages (DLS’15). ACM Press. https://doi.org/10.1145/2816707.2816720.\n\n\nFisler, Kathi. 2014. “The Recurring Rainfall Problem.” In 2014 International Computing Education Research Conference (ICER’14). Association for Computing Machinery (ACM). https://doi.org/10.1145/2632320.2632346.\n\n\nFitzgerald, Sue, Gary Lewandowski, Renée McCauley, Laurie Murphy, Beth Simon, Lynda Thomas, and Carol Zander. 2008. “Debugging: Finding, Fixing and Flailing, a Multi-Institutional Study of Novice Debuggers.” Computer Science Education 18 (2): 93–116. https://doi.org/10.1080/08993400802114508.\n\n\nGrover, Shuchi, and Satabdi Basu. 2017. “Measuring Student Learning in Introductory Block-Based Programming.” In 2017 Technical Symposium on Computer Science Education (SIGCSE’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3017680.3017723.\n\n\nGuo, Philip J. 2013. “Online Python Tutor.” In 2013 Technical Symposium on Computer Science Education (SIGCSE’13). Association for Computing Machinery (ACM). https://doi.org/10.1145/2445196.2445368.\n\n\nGuzdial, Mark. 2015. Learner-Centered Design of Computing Education: Research on Computing for Everyone. Morgan & Claypool Publishers.\n\n\n———. 2016. “Five Principles for Programming Languages for Learners.” https://cacm.acm.org/blogs/blog-cacm/203554-five-principles-for-programming-languages-for-learners/fulltext.\n\n\nHarrington, Brian, and Nick Cheng. 2018. “Tracing Vs. Writing Code: Beyond the Learning Hierarchy.” In 2018 Technical Symposium on Computer Science Education (SIGCSE’18). Association for Computing Machinery (ACM). https://doi.org/10.1145/3159450.3159530.\n\n\nHazzan, Orit, Tami Lapidot, and Noa Ragonis. 2014. Guide to Teaching Computer Science: An Activity-Based Approach. Second. Springer.\n\n\nHenrich, Joseph, Steven J. Heine, and Ara Norenzayan. 2010. “The Weirdest People in the World?” Behavioral and Brain Sciences 33 (2-3): 61–83. https://doi.org/10.1017/s0140525x0999152x.\n\n\nHofmeister, Johannes, Janet Siegmund, and Daniel V. Holt. 2017. “Shorter Identifier Names Take Longer to Comprehend.” In 2017 Conference on Software Analysis, Evolution and Reengineering (SANER’17). Institute of Electrical; Electronics Engineers (IEEE). https://doi.org/10.1109/saner.2017.7884623.\n\n\nIhantola, Petri, Kelly Rivers, Miguel Ángel Rubio, Judy Sheard, Bronius Skupas, Jaime Spacco, Claudia Szabo, et al. 2016. “Educational Data Mining and Learning Analytics in Programming: Literature Review and Case Studies.” In 2016 Conference on Innovation and Technology in Computer Science Education (ITiCSE’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2858796.2858798.\n\n\nKemerer, Chris F., and Mark C. Paulk. 2009. “The Impact of Design and Code Reviews on Software Quality: An Empirical Study Based on PSP Data.” IEEE Transactions on Software Engineering 35 (4): 534–50. https://doi.org/10.1109/tse.2009.27.\n\n\nKernighan, Brian W., and Rob Pike. 1999. The Practice of Programming. Addison-Wesley.\n\n\nKoehler, Matthew J., Punya Mishra, and William Cain. 2013. “What Is Technological Pedagogical Content Knowledge (TPACK)?” Journal of Education 193 (3): 13–19. https://doi.org/10.1177/002205741319300303.\n\n\nKohn, Tobias. 2017. “Variable Evaluation: An Exploration of Novice Programmers’ Understanding and Common Misconceptions.” In 2017 Technical Symposium on Computer Science Education (SIGCSE’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3017680.3017724.\n\n\nKölling, Michael. 2015. “Lessons from the Design of Three Educational Programming Environments.” International Journal of People-Oriented Programming 4 (1): 5–32. https://doi.org/10.4018/ijpop.2015010102.\n\n\nKuittinen, Marja, and Jorma Sajaniemi. 2004. “Teaching Roles of Variables in Elementary Programming Courses.” ACM SIGCSE Bulletin 36 (3): 57. https://doi.org/10.1145/1026487.1008014.\n\n\nLister, Raymond, Colin Fidge, and Donna Teague. 2009. “Further Evidence of a Relationship Between Explaining, Tracing and Writing Skills in Introductory Programming.” ACM SIGCSE Bulletin 41 (3): 161. https://doi.org/10.1145/1595496.1562930.\n\n\nLister, Raymond, Otto Seppälä, Beth Simon, Lynda Thomas, Elizabeth S. Adams, Sue Fitzgerald, William Fone, et al. 2004. “A Multi-National Study of Reading and Tracing Skills in Novice Programmers.” In 2004 Conference on Innovation and Technology in Computer Science Education (ITiCSE’04). Association for Computing Machinery (ACM). https://doi.org/10.1145/1044550.1041673.\n\n\nLuxton-Reilly, Andrew, Jacqueline Whalley, Brett A. Becker, Yingjun Cao, Roger McDermott, Claudio Mirolo, Andreas Mühling, Andrew Petersen, Kate Sanders, and Simon. 2017. “Developing Assessments to Determine Mastery of Programming Fundamentals.” In 2017 Conference on Innovation and Technology in Computer Science Education (ITiCSE’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3174781.3174784.\n\n\nMaloney, John, Mitchel Resnick, Natalie Rusk, Brian Silverman, and Evelyn Eastmond. 2010. “The Scratch Programming Language and Environment.” ACM Transactions on Computing Education 10 (4): 1–15. https://doi.org/10.1145/1868358.1868363.\n\n\nMarceau, Guillaume, Kathi Fisler, and Shriram Krishnamurthi. 2011. “Measuring the Effectiveness of Error Messages Designed for Novice Programmers.” In 2011 Technical Symposium on Computer Science Education (SIGCSE’11). Association for Computing Machinery (ACM). https://doi.org/10.1145/1953163.1953308.\n\n\nMargulieux, Lauren E., Richard Catrambone, and Mark Guzdial. 2016. “Employing Subgoals in Computer Programming Education.” Computer Science Education 26 (1): 44–67. https://doi.org/10.1080/08993408.2016.1144429.\n\n\nMargulieux, Lauren E., Mark Guzdial, and Richard Catrambone. 2012. “Subgoal-Labeled Instructional Material Improves Performance and Transfer in Learning to Develop Mobile Applications.” In 2012 International Computing Education Research Conference (ICER’12), 71–78. ACM Press. https://doi.org/10.1145/2361276.2361291.\n\n\nMayer, Richard E. 2004. “Teaching of Subject Matter.” Annual Review of Psychology 55 (1): 715–44. https://doi.org/10.1146/annurev.psych.55.082602.133124.\n\n\nMcCauley, Renée, Sue Fitzgerald, Gary Lewandowski, Laurie Murphy, Beth Simon, Lynda Thomas, and Carol Zander. 2008. “Debugging: A Review of the Literature from an Educational Perspective.” Computer Science Education 18 (2): 67–92. https://doi.org/10.1080/08993400802114581.\n\n\nMcCracken, Michael, Tadeusz Wilusz, Vicki Almstrum, Danny Diaz, Mark Guzdial, Dianne Hagan, Yifat Ben-David Kolikant, Cary Laxer, Lynda Thomas, and Ian Utting. 2001. “A Multi-National, Multi-Institutional Study of Assessment of Programming Skills of First-Year CS Students.” In 2001 Conference on Innovation and Technology in Computer Science Education (ITiCSE’01). Association for Computing Machinery (ACM). https://doi.org/10.1145/572133.572137.\n\n\nMiller, Craig S., and Amber Settle. 2016. “Some Trouble with Transparency: An Analysis of Student Errors with Object-Oriented Python.” In 2016 International Computing Education Research Conference (ICER’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2960310.2960327.\n\n\nMladenović, Monika, Ivica Boljat, and Žana Žanko. 2017. “Comparing Loops Misconceptions in Block-Based and Text-Based Programming Languages at the K-12 Level.” Education and Information Technologies, November. https://doi.org/10.1007/s10639-017-9673-3.\n\n\nMuller, Orna, David Ginat, and Bruria Haberman. 2007. “Pattern-Oriented Instruction and Its Influence on Problem Decomposition and Solution Construction.” In 2007 Technical Symposium on Computer Science Education (SIGCSE’07). Association for Computing Machinery (ACM). https://doi.org/10.1145/1268784.1268830.\n\n\nMurphy, Laurie, Gary Lewandowski, Renée McCauley, Beth Simon, Lynda Thomas, and Carol Zander. 2008. “Debugging: The Good, the Bad, and the Quirky - a Qualitative Analysis of Novices’ Strategies.” ACM SIGCSE Bulletin 40 (1): 163. https://doi.org/10.1145/1352322.1352191.\n\n\nOjose, Bobby. 2015. Common Misconceptions in Mathematics: Strategies to Correct Them. UPA.\n\n\nPark, Thomas H., Brian Dorn, and Andrea Forte. 2015. “An Analysis of HTML and CSS Syntax Errors in a Web Development Course.” ACM Transactions on Computing Education 15 (1): 1–21. https://doi.org/10.1145/2700514.\n\n\nPea, Roy D. 1986. “Language-Independent Conceptual ‘Bugs’ in Novice Programming.” Journal of Educational Computing Research 2 (1): 25–36. https://doi.org/10.2190/689t-1r2a-x4w4-29j2.\n\n\nQian, Yizhou, and James Lehman. 2017. “Students’ Misconceptions and Other Difficulties in Introductory Programming.” ACM Transactions on Computing Education 18 (1): 1–24. https://doi.org/10.1145/3077618.\n\n\nRagonis, Noa, and Ronit Shmallo. 2017. “On the (Mis)understanding of the This Reference.” In 2017 Technical Symposium on Computer Science Education (SIGCSE’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3017680.3017715.\n\n\nRich, Kathryn M., Carla Strickland, T. Andrew Binkowski, Cheryl Moran, and Diana Franklin. 2017. “K-8 Learning Trajectories Derived from Research Literature.” In 2017 International Computing Education Research Conference (ICER’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3105726.3106166.\n\n\nSajaniemi, Jorma, Mordechai Ben-Ari, Pauli Byckling, Petri Gerdt, and Yevgeniya Kulikova. 2006. “Roles of Variables in Three Programming Paradigms.” Computer Science Education 16 (4): 261–79. https://doi.org/10.1080/08993400600874584.\n\n\nScanlan, David A. 1989. “Structured Flowcharts Outperform Pseudocode: An Experimental Comparison.” IEEE Software 6 (5): 28–36. https://doi.org/10.1109/52.35587.\n\n\nSentance, Sue, Erik Barendsen, and Carsten Schulte, eds. 2018. Computer Science Education: Perspectives on Teaching and Learning in School. Bloomsbury Press.\n\n\nSeppälä, Otto, Petri Ihantola, Essi Isohanni, Juha Sorva, and Arto Vihavainen. 2015. “Do We Know How Difficult the Rainfall Problem Is?” In 2015 Koli Calling Conference on Computing Education Research (Koli’15). ACM Press. https://doi.org/10.1145/2828959.2828963.\n\n\nShell, Duane F., Leen-Kiat Soh, Abraham E. Flanigan, Markeya S. Peteranetz, and Elizabeth Ingraham. 2017. “Improving Students’ Learning and Achievement in CS Classrooms Through Computational Creativity Exercises That Integrate Computational and Creative Thinking.” In 2017 Technical Symposium on Computer Science Education (SIGCSE’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3017680.3017718.\n\n\nSimon. 2013. “Soloway’s Rainfall Problem Has Become Harder.” In 2013 Conference on Learning and Teaching in Computing and Engineering. Institute of Electrical; Electronics Engineers (IEEE). https://doi.org/10.1109/latice.2013.44.\n\n\nSirkiä, Teemu, and Juha Sorva. 2012. “Exploring Programming Misconceptions: An Analysis of Student Mistakes in Visual Program Simulation Exercises.” In 2012 Koli Calling Conference on Computing Education Research (Koli’12). Association for Computing Machinery (ACM). https://doi.org/10.1145/2401796.2401799.\n\n\nSoloway, Elliot. 1986. “Learning to Program = Learning to Construct Mechanisms and Explanations.” Communications of the ACM 29 (9): 850–58. https://doi.org/10.1145/6592.6594.\n\n\nSoloway, Elliot, and Kate Ehrlich. 1984. “Empirical Studies of Programming Knowledge.” IEEE Transactions on Software Engineering SE-10 (5): 595–609. https://doi.org/10.1109/tse.1984.5010283.\n\n\nSorva, Juha. 2018. “Misconceptions and the Beginner Programmer.” In Computer Science Education: Perspectives on Teaching and Learning in School, edited by Sue Sentance, Erik Barendsen, and Carsten Schulte. Bloomsbury Press.\n\n\nSorva, Juha, and Otto Seppälä. 2014. “Research-Based Design of the First Weeks of CS1.” In 2014 Koli Calling Conference on Computing Education Research (Koli’14). Association for Computing Machinery (ACM). https://doi.org/10.1145/2674683.2674690.\n\n\nStasko, John, John Domingue, Mark H. Brown, and Blaine A. Price, eds. 1998. Software Visualization: Programming as a Multimedia Experience. MIT Press.\n\n\nStefik, Andreas, Patrick Daleiden, Diana Franklin, Stefan Hanenberg, Antti-Juhani Kaijanaho, Walter Tichy, and Brett A. Becker. 2017. “Programming Languages and Learning.” https://quorumlanguage.com/evidence.html.\n\n\nStefik, Andreas, and Susanna Siebert. 2013. “An Empirical Investigation into Programming Language Syntax.” ACM Transactions on Computing Education 13 (4): 1–40. https://doi.org/10.1145/2534973.\n\n\nStegeman, Martijn, Erik Barendsen, and Sjaak Smetsers. 2014. “Towards an Empirically Validated Model for Assessment of Code Quality.” In 2014 Koli Calling Conference on Computing Education Research (Koli’14). Association for Computing Machinery (ACM). https://doi.org/10.1145/2674683.2674702.\n\n\n———. 2016. “Designing a Rubric for Feedback on Code Quality in Programming Courses.” In 2016 Koli Calling Conference on Computing Education Research (Koli’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2999541.2999555.\n\n\nUtting, Ian, Juha Sorva, Tadeusz Wilusz, Allison Elliott Tew, Michael McCracken, Lynda Thomas, Dennis Bouvier, et al. 2013. “A Fresh Look at Novice Programmers’ Performance and Their Teachers’ Expectations.” In 2013 Conference on Innovation and Technology in Computer Science Education (ITiCSE’13). ACM Press. https://doi.org/10.1145/2543882.2543884.\n\n\nVihavainen, Arto, Jonne Airaksinen, and Christopher Watson. 2014. “A Systematic Review of Approaches for Teaching Introductory Programming and Their Influence on Success.” In 2014 International Computing Education Research Conference (ICER’14). Association for Computing Machinery (ACM). https://doi.org/10.1145/2632320.2632349.\n\n\nWatson, Christopher, and Frederick W. B. Li. 2014. “Failure Rates in Introductory Programming Revisited.” In 2014 Conference on Innovation and Technology in Computer Science Education (ITiCSE’14). Association for Computing Machinery (ACM). https://doi.org/10.1145/2591708.2591749.\n\n\nWeintrop, David, and Uri Wilensky. 2017. “Comparing Block-Based and Text-Based Programming in High School Computer Science Classrooms.” ACM Transactions on Computing Education 18 (1): 1–25. https://doi.org/10.1145/3089799.\n\n\nWilcox, Chris, and Albert Lionelle. 2018. “Quantifying the Benefits of Prior Programming Experience in an Introductory Computer Science Course.” In 2018 Technical Symposium on Computer Science Education (SIGCSE’18). Association for Computing Machinery (ACM). https://doi.org/10.1145/3159450.3159480.\n\n\nXie, Benjamin, Dastyni Loksa, Greg L. Nelson, Matthew J. Davidson, Dongsheng Dong, Harrison Kwik, Alex Hui Tan, Leanne Hwa, Min Li, and Amy J. Ko. 2019. “A Theory of Instruction for Introductory Programming Skills.” Computer Science Education 29 (2-3): 205–53. https://doi.org/10.1080/08993408.2019.1565235."
  },
  {
    "objectID": "performance.html#sec-performance-live",
    "href": "performance.html#sec-performance-live",
    "title": "9  Enseñar como un arte performativo",
    "section": "9.1 Programacion participativa en vivo",
    "text": "9.1 Programacion participativa en vivo\n\nLa enseñanza es teatro, no cine. — Neal Davis\n\nEsta es una estrategia eficaz para enseñar a programar (Rubin (2013),Haaranen (2017),Raj et al. (2018)), ya que:\n\nPermite que les estudiantes vean el proceso de pensamiento de quien enseña y sus técnicas de resolución de problemas en tiempo real mientras programan, facilitando la transferencia de conocimiento: las personas aprenden más de lo que enseñamos conscientemente al observar cómo hacemos las cosas.\nPosibilita una enseñanza activa al permitir a los y las docentes seguir los intereses, las preguntas y los comentarios de sus estudiantes.Una presentación de diapositivas es como una vía de ferrocarril: podrá ser un viaje suave, pero tienes que decidir hacia dónde vas con anticipación. Programar en vivo es como manejar un vehículo todo terreno: podrá ser más accidentado, pero es mucho más fácil cambiar de dirección e ir hacia donde la gente quiere.\nPosibilita un aprendizaje activo al involucrar a tus estudiantes, lo que les ayuda a convertirse en practicantes activos en lugar de observadores pasivos del proceso de programación. Sus preguntas pueden responderse inmediatamente y los conceptos erróneos pueden corregirse programandolos. Los ejercicios permiten practicar en el momento el uso del material incluyendo diferentes alternativas.\nDisminuye la velocidad de la persona que está enseñando: si tiene que escribir el programa a medida que avanza su velocidad es mucho menor a la que tendría usando diapositivas o un codigo pre-armado. Esto dismunuye la carga cognitiva de la memoria a corto plazo y le da mas tiempo a tus estudiantes para poder realizar las actividades y realizar preguntas antes de pasar al siguiente concepto.\nPermite enseña cómo diagnosticar y corregir errores. Resolver errores es una tarea crucial de la programacion. La programacion en vivo nos permite cometer errores cuando programos (ya sean deliverados o no) permitiendonos explicar como es el proceso de resolucion. Ademas, les muestra a tus estudiantes que los errores son parte del proceso y que incluso quien ensena los puede cometer, dandoles lugar para que cometan errores y nos puedan hablar sobre ello.\nDemuestra el orden en que se deben escribir los programas. Cuando Ihantola and Karavirta (2011) observaron cómo las personas resuelven problemas de Parson, encontraron que quienes tienen experiencia programando usualmente ubican la identificación del método al principio, luego agregan la mayor parte del control de flujo (es decir, bucles y condiciones), y solo después de eso, agregan detalles como la inicialización de variables y el manejo de casos especiales. Este método “fuera de orden” es ajeno para las personas novatas, que leen y escriben código en el orden en que se presenta en la página; ver el código les ayuda a descomponer los problemas en sub-metas que pueden abordar una a la vez. La programación en vivo además les da a quienes están enseñando la chance de enfatizar la importancia de los pequeños pasos con comentarios frecuentes (Blikstein et al. (2014)) y la importancia de definir un plan en vez de hacer cambios más o menos aleatorios y esperar que eso mejore las cosas (Spohrer, Soloway, and Pope (1985)).\n\nComo toda tecnica de ensenanza, hablar mientras se escribe código en frente de un público requiere práctica. La mayoría de las personas indican que el nivel de dificultad rápidamente se vuelve igual que hablar con una presentación de diapositivas. Las secciones que siguen ofrecen consejos sobre cómo mejorar la manera de ensenar con programacion participativa en vivo.\n\n9.1.1 Que te vean y te escuchen\nA medida que tus estudiantes van codificando, deben ver y oír lo que estás haciendo con claridad.\n\n9.1.1.1 En persona\nSi eres físicamente capaz de pararte durante un par de horas, debes hacerlo mientras enseñas. Esto te permitira que te muevas, por ejemplo para acércate a la pantalla para señalar algo, dibuja algo en la pizarra, o simplemente aléjate de la computadora por un momento y háblale directamente a tu público. Hacer esto aleja la atención de tus estudiantes de sus pantallas y les proporciona un momento natural para hacer preguntas. Cuando te sientas, es más probable que mires tu pantalla en vez de mirar a tu público y puedes quedar fuera de la vista de tus estudiantes en las últimas filas del aula.\nEstá bien mirar la pantalla donde estás proyectando ocasionalmente cuando estás mostrando una sección de código o dibujando un esquema: no mirar a la sala llena de personas que te están mirando puede ayudarte a reducir tu nivel de ansiedad y darte un momento para pensar qué decir a continuación. Sin embargo, no deberías hacerlo por más de unos segundos.\nEs conveniente tener una mesa elevada, un escritorio de pie, o un atril para tu computadora portátil para que tengas una posicion mas comoda al escribir.\nSi vas a enseñar por más de un par de horas, vale la pena usar un micrófono incluso si la habitación es pequeña, ademas de ayudarte a cuidar tu vos puede marcar una gran diferencia para las personas que tienen discapacidad auditiva.\n\n\n9.1.1.2 En linea\nEn un entorno en línea, esto puede requerir más recursos en términos de tecnología e infraestructura, como una conexión estable a Internet, una pantalla panorámica o una segunda pantalla para ti y tus estudiantes.\n\n9.1.1.2.1 Antes de empezar la programacion en vivo\nExplica a tus estudiantes cómo acomodar su pantalla. En caso de que sólo tengan una demuéstrales cómo pueden dividir la pantalla en dos vertical u horizontalmente. Si tienen dos pantallas, muestra cómo dividir las ventanas, una con las pantallas del docente y la otra con su entorno de programación. Puedes tener algunas imágenes o vídeos para mostrar cómo conseguirlo.\nSi estás enseñando cursos largos (más de tres clases), podes hacer una demostración la primera clase y después hacerlo de vez en cuando como recordatorio. También podes compartir estos videos o imágenes asi tus estudiantes pueden chequear como ordenar sus pantallas.\n\n\n9.1.1.2.2 Durante la programacion en vivo\n\ncomparte tu pantalla y pregunta antes de empezar a programar si tus estudiantes ven tu pantalla correctamente y si el tamaño de la fuente es adecuado. Cambialo si te lo solicitan.\nAgranda tu puntero del mouse y considera usar un puntero resaltado ( algo como esto).\nUsa un software que muestre en pantalla las teclas que presionas, como Screenkey. Si te olvidas de decir un atajo de teclado en voz alta, el programa lo mostrará en la pantalla para tus estudiantes.\nEl fondo blanco es mejor para las clases sincrónicas. El tema nocturno es mejor para los vídeos grabados porque hay estudiantes que los ven de noche y utilizan dispositivos pequeños.\nSi puedes, comparte tu código no solo por medio de tu pantalla mientras lo escribes. Existen soluciones para transmitir en directo tu progrmacion en vivo a paginas web estaticas donde tus estudiantes pueden acceder a tu codigo.\n\n\n\n\n\n\n\nDespués de la programacion participatoria en vivo\n\n\n\nDebemos considerar la posibilidad de que algunos estudiantes se hayan quedado atrás, no puedan resolver un ejercicio o lo hagan de forma poco eficiente.\nPor eso es importante compartir el código generado en vivo después de la clase. Puedes copiarlo y pegarlo en el chat de la plataforma, copiarlo y pegarlo en los apuntes compartidos o subirlo a la página web del curso o al campus virtual. También puedes compartir una carpeta en un servicio de almacenamiento en la nube.\nDisponer del código final ayudará a tus estudiantes a validar su código y a ponerse al día si no pueden copiar o escribir alguna parte del mismo.\n\n\n\n\n\n\n9.1.2 Ve despacio y no enseñes sola/o.\nCuando se realiza codificación participativa en vivo, es necesario enseñar y programar a un ritmo que permita a tus estudiantes seguir el proceso sin quedarse atrás.\nEmpieza con un script o notebook en blanco para asegurarte de que les explicas todo lo que necesitan para que el código funcione. Explica el objetivo del código que vas a desarrollar y escríbelo en la notebook o como comentario en el script. Nos ayuda a centrarnos en lo que queremos y en el razonamiento que hay detrás de codificar para ese objetivo. No copies y pegues código: hacer eso prácticamente garantiza que irás mucho más rápido que tus estudiantes.\nNarra lo que escribes, las combinaciones de teclas y atajos de teclado, especialmente cuando tengas que utilizar signos de puntuación complicados (“corchetes”, “paréntesis”, etc.). Cuando una IDE autocompleta cosas, es útil señalarlo las primeras veces (y decir cómo se usa o activa esa característica) ya que puede ser la primera vez que algunos estudiantes lo vean.\nNo utilices muchos atajos de teclado, sobre todo al principio. Si utilizas un atajo de teclado, dilo en voz alta la primera vez que lo hagas. Explica una alternativa al atajo (por ejemplo, el uso de menús). Puedes recordar a tus estudiantes qué atajos utilizas de vez en cuando (en caso de que no utilices un programa que muestre las teclas que pulsaste en pantalla).\nExplica cada paso que has dado. Di en voz alta lo que estás haciendo mientras lo haces para cada comando o cada palabra de código que escribes y cada elemento de menú o botón que pulsas. A continuación, señala el comando y su resultado en la pantalla y repítelo para que tus estudiantes puedan comprobar lo que han hecho.\nSi la salida de código hace que lo que acabas de escribir desaparezca de la vista, vuelve arriba para que tus estudiantes puedan verlo de nuevo. Si eso no es posible, ejecuta el mismo comando una segunda vez o copia y pega el último comando o comandos en las notas compartidas del taller (o en el chat si estas en linea).\nMenciona el número de línea del código al que te refieres.\n\n9.1.2.1 En linea\nLos consejos anteriores son validos para clases en persona y en linea. Hay algunas consideraciones extra para los entornos en línea:\n\nes esencial que tus estudiantes puedan cambiar de ventana (la demostración del docente y su propia codificación) o de pantalla si tienen más de una.\nTu ayudante o co-docente debe prestar atención al chat, ayudando a localizar y resolver los problemas de tus estudiantes, copiando enlaces o trozos de código si es necesario, y avisándote cuando haya que aclarar, volver a explicar o mostrar algo una vez más.\nSi estás enseñando sin ayuda, informa a tus estudiantes cuándo estarás prestando atención al chat para ayudarles. Deja claro cómo pueden participar y hacer preguntas (utilizando el chat, utilizando una expresión no verbal, notas compartidas, activando su microfono, etc.) y cómo responderás tú.\nUtiliza el chat o el documento de las notas compartidas para copiar y pegar el código o los errores de tus estudiantes. Ten cuidado con los sistemas de chat traicioneros que pueden cambiar el formato de tu código.\n\n\n\n\n9.1.3 Duplica el entorno de tus estudiantes.\nSi tus estudiantes tienen que trabajar en un entorno distinto al tuyo, tienen que hacer un esfuerzo mental que no contribuye al aprendizaje. La ciencia del aprendizaje llama a esto “carga cognitiva externa”. Intenta crear un entorno lo más parecido posible al que tienen tus estudiantes. Si son principiantes, es muy probable que tengan la configuración por defecto de la IDE o software que vayas a utilizar.\nUna solución basada en la nube es la mejor alternativa para asegurarte de que tú y tus estudiantes tienen la misma configuración. Algunas de estas herramientas te permiten incluir todo el software, paquetes y datos que necesitas evitando problemas de instalación y la consiguiente frustración. Dentro de los problemas que tienen esta soluciones está el costo y el ancho de banda necesario para usarlas durante las clases.\nAlgunos/as docentes crean un usuario distinto con configuración básica en sus computadoras o una cuenta específica para enseñar si están usando algún servicio online como Scratch o GitHub. Hacer esto también puede ayudar a evitar que los paquetes que instalaste ayer para trabajar rompan la lección que se supone que enseñes hoy.\n\n\n9.1.4 Usa tu(s) pantalla(s) sabiamente.\n\n\n9.1.5 En persona\nPor lo general, necesitarás agrandar el tamaño de la letra considerablemente para que las personas en el fondo de la sala puedan leer. Esto significa que podrás colocar muchas menos cosas en la pantalla de las que estás acostumbrado/a.\nPara organizarte, maximiza la ventana que estás usando para enseñar y luego pregúntale a todos si pueden leer lo que está en la pantalla o no. Usa una fuente de color negro sobre un fondo ligeramente coloreado en vez de una fuente de color claro sobre un fondo oscuro—el tono claro deslumbrará menos que el blanco puro.\nPresta atención a la iluminación de la sala: no debe estar completamente a oscuras y no debe haber luces directamente o por encima de la pantalla de protección. Dedica algunos minutos para que tus estudiantes puedan reacomodar sus mesas para ver con claridad.\nCuando la parte inferior de la proyección de la pantalla está a la misma altura que las cabezas de tus estudiantes, las personas en el fondo no podrán ver lo que ocurre en esa sección de la pantalla. Puedes elevar la parte inferior de la ventana para compensar esto, pero eso generará que tengas aún menos espacio para escribir.\nSi puedes acceder a un segundo proyector y pantalla, úsalos: el espacio adicional te permitirá mostrar el código de un lado y su resultado o comportamiento del otro lado. Si la segunda pantalla requiere su propia computadora, pídele a un docente auxiliar que la controle en lugar de ir y venir entre los dos teclados.\nFinalmente, si estás enseñando algo como la terminal de Unix en una consola, es importante decirle a las personas cuándo estás usando un editor de texto en la consola y cuándo regresas a la consola propiamente dicha. La mayoría de las personas novatas no han visto nunca a una ventana asumir múltiples personalidades de esta manera y pueden confundirse rápidamente cuando estás interactuando en la terminal, cuando estás escribiendo en un editor de texto, y cuando estás trabajando de manera interactiva con Python u otro lenguaje. Puedes evitar este problema usando ventanas separadas para el editor de texto; si haces esto, siempre avisa a tus estudiantes al cambiar de una ventana a la otra.\n\n\n\n\n\n\nLas herramientas de accesibilidad ayudan a todas las personas\n\n\n\nLas herramientas como [Mouseposé][mousepose] (para Mac) y [PointerFocus][pointerfocus] (para Windows) resaltan la posición del cursor del mouse en la pantalla, y las herramientas de grabación de pantalla como [Camtasia][camtasia] y aplicaciones independientes como [KeyCastr][keycastr] muestran teclas invisibles como Tab y Control-J a medida que las usas. Esto puede ser un poco molesto al comienzo, pero ayuda a tus estudiantes a descubrir lo que estás haciendo.\n\n\n\n\n9.1.6 Dos dispositivos\nAlgunas personas usan dos dispositivos cuando enseñan: una computadora portátil conectada al proyector que sus estudiantes ven y una tableta para que puedan ver sus propias notas y las notas que los/las estudiantes están tomando (Section 10.7). Esto es más confiable que pasar de un escritorio virtual al otro, aunque imprimir la lección sigue siendo la tecnología de respaldo más confiable.\n\n9.1.6.1 On line\nYa hemos mencionado que necesitas mostrar a tus estudiantes cómo acomodar su pantalla para verte mejor. Al utilizar programacion en vivo, también debes acomodar tu(s) pantalla(s) para enseñar.\nLa mejor solución es utilizar dos dispositivos o pantallas al enseñar: una para compartir con tus estudiantes y otra para ver sus notas y vídeos, las notas de la lección y la ventana de chat.\nSi no tienes dos pantallas, comparte con tus estudiantes sólo las ventanas o paneles que quieras que vean. Puedes tener las notas de la lección impresas en papel o en una ventana no compartida.\nAmplía el panel de la pantalla que necesitas mostrar. Por ejemplo, si necesitas mostrar el código amplía las ventanas de script. Si necesitas mostrar un resultado, amplía el panel de la consola, o de gráficos, etc.\nUna de las ventajas de la enseñanza en línea es que cuando la gente se encuentra con problemas, puede compartir la pantalla y resolver el problema trabajando en conjunto. Si tu estudiante se siente cómodo/a, permitirle compartir su pantalla para resolver problemas con toda la clase; esta es una excelente experiencia de aprendizaje. También pueden compartir su pantalla para demostrar algo que han hecho.\n\n\n\n9.1.7 Evita las distracciones.\nDesactiva las notificaciones en los dispositivos que estés utilizando y en tu teléfono. Ver las notificaciones parpadear en la pantalla te distrae a ti y a tus estudiantes. Abre sólo el software, las aplicaciones y las páginas web que vayas a utilizar durante la clase. Cierra cualquier otra aplicación, incluidos el correo electrónico y las redes sociales. Ten en cuenta qué imagen de escritorio y salvapantallas utilizas porque acabarás compartiéndolos con la clase y en el vídeo si grabas la lección. De nuevo, tener una cuenta especifica para ensenar puede ayudarte a cumplir este punto de forma mas sencilla.\nEs importante que tu ayudante o co-docente trabaje para resolver las dudas y problemas que puedan tener tus estudiantes durante la clase, de modo que las interrupciones sean ordenadas y sirvan a la lección en lugar de cortar su fluidez. Acuérdate también de dar instrucciones sobre cómo participar, cómo hacer preguntas y qué herramientas utilizar antes de empezar la demostración en vivo (ver consejo número 1).\nPor último, pide a tus estudiantes que reduzcan el número de distracciones en sus dispositivos, como notificaciones, correos electrónicos y otras pestañas del navegador que puedan tener abiertas mientras tiene lugar la clase. No puedes controlar lo que hacen, pero hacer una petición amistosa puede ayudarles a cerrar estos distractores.\n\n\n9.1.8 Sigue el material de la lección.\n\n9.1.8.1 En persona\nNo te alejes de la lección que planificaste o pediste prestada la primera vez que la enseñes. Puede ser tentador desviarse del material porque te gustaría mostrar un lindo truco o demostrar otra manera de hacer algo, pero existe la posibilidad de que te encuentres con algo inesperado que te lleve más tiempo del que tienes.\nSin embargo, una vez que el material te resulte más familiar, puedes y debes comenzar a improvisar en base a los antecedentes de tus estudiantes, sus preguntas durante la clase, y lo que personalmente te parezca más interesante. Esto es como tocar una nueva canción: sigues la partitura las primeras veces, pero después de que te sientes cómodo/a con los cambios de melodía y acordes, puedes comenzar a ponerle tu propio sello.\nCuando quieras usar algo nuevo, revísalo de antemano usando la misma computadora que usarás cuando des la clase: instalar cientos de megabytes de programas a través del WiFi de la escuela secundaria en frente de jóvenes de 16 años aburridos/as no es algo por lo que alguna vez quieras pasar.\n\n\n\n\n\n\nEnseñanza directa\n\n\n\nLa enseñanza directa es un método de enseñanza centrado en el diseño meticuloso del plan de estudio dictado usando un guíon predefinido. Es más como un actor recitando líneas que como el enfoque de improvisación que recomendamos. Stockard et al. (2018) encontró que la enseñanza directa tiene un efecto estadísticamente significativo positivo a pesar de que a veces pueda ser muy repetitivo. Yo prefiero improvisar porque la enseñanza directa requiere más preparación inicial que lo que la mayoría de los grupos de estudiantes free-range pueden permitirse.\n\n\n\n\n9.1.8.2 Online\nEs importante que te ajustes bastante al plan de la lección y que practiques la técnica de codificación en vivo, sobre todo si es la primera vez que impartes la lección. Añade notas a tus impresiones del material de la clase, o tenlas fácilmente disponibles en la segunda pantalla o dispositivo (tableta o portátil), si utilizas uno.\nUna vez que el material te sea familiar, puedes y debes empezar a improvisar basándote en los antecedentes de tus estudiantes, sus preguntas en clase y lo que te parezca más interesante.\nSi surge una pregunta o un “¿qué pasaría si…?”, pero no quieres interrumpir el flujo de la lección, o sabes que te llevará más tiempo del que tienes, o necesitas algo de tiempo para ordenarte, pide a tus estudiantes que las agreguen en un documento compartido en línea o pide a tu co-docente o ayudante que las registre. Luego, puedes pensar en ellas mientras tus estudiantes hacen los ejercicios y responderlas después que terminen, o a la clase siguiente.\n\n\n\n9.1.9 Convierte a tus estudiantes en co-docentes\n\n9.1.9.1 Online\nDurante la codificación participativa en vivo, las/os estudiantes programan activamente junto con el docente. Esto puede ser un reto en la enseñanza en línea y más aún con principiantes.\nUna herramienta valiosa para disminuir esta dificultad es utilizar las salas de reuniones que ofrecen Zoom o Meet (incluso en su versión gratuita). La enseñanza entre pares es la práctica docente escalable más eficaz que conocemos. Podemos utilizarla para reforzar la lección que dimos usando programación en vivo.\nLas salas de reuniones de Zoom hacen que esto sea relativamente fácil de ejecutar en línea: se tarda entre 15 y 30 segundos en meter a todo el grupo en las salas. En una clase de cuarenta personas, uno o dos tendrán dificultades al principio, pero ayuda a mantener a tus estudiantes motivados y atentos.\nYo utilizo esta dinámica con los principiantes cuando hago live coding:\nHago entre 10 y 20 minutos de live coding. Los envío a la salas en grupos de 3 o 4 estudiantes (los grupos más grandes crean subgrupos, o bien alguien no participa) para resolver un ejercicio. El ejercicio es el mismo o muy similar al que intentamos hacer durante mi programación en vivo. Antes de ir a la sala, doy las instrucciones: cuánto tiempo tienen para resolver el ejercicio (entre 10 y 20 minutos), como se den organizar: un estudiante comparte una pantalla, y programan juntos para resolverlo. Tomo el tiempo (ahora la herramienta de videoconferencia lo hace por mí), y cuando se acaba el tiempo, vuelven a la sala común, y hablamos de cómo ha ido, qué problemas y preguntas tienen. Repasamos estos detalles. Es un buen momento para dejarles compartir la pantalla para ver sus problemas o soluciones, sobre todo si han resuelto el ejercicio de forma diferente. Esta estrategia les permite reforzar el aprendizaje porque programan durante mi live coding y luego una vez más en grupo.\nPuedes utilizar diferentes tipos de ejercicios para el trabajo en grupos, como rellenar los espacios en blanco, problemas de Parson y tutoriales interactivos que ofrezcan diferentes tipos de andamiaje.\n\n\n\n9.1.10 Obten información en tiempo real y proporciona ayuda inmediata.\n\n9.1.10.1 En persona\n\n\n\n9.1.11 Pregunta por predicciones\nUna manera de mantener la motivación de tus estudiantes mientras estás programando en vivo es pedirles que hagan predicciones sobre qué hará el código que ven en la pantalla. Luego, puedes escribir las primeras sugerencias que hagan, hacer que toda la clase vote sobre cuál piensan que es la opción más probable, y finalmente ejecutar el código. Esta es una forma simple de instrucción por pares, que discutiremos en la Section 10.2. Además de mantener su atención en la actividad, les permite practicar cómo razonar sobre el comportamiento del código.\n\n9.1.11.1 Online\nAl programar en vivo en línea puede resultar difícil saber si tus estudiantes están siguiendo el proceso o si están teniendo dificultades para programar que aún no se hemos solucionado.\nUna forma de comprobarlo es ofrecer a tus estudiantes una manera diferente de indicarnos su estado. Cuando enseñamos en persona, utilizamos notas adhesivas de colores. Algunas opciones para enseñar en línea son:\nEl feedback no verbal en plataformas de videoconferencia aparece como la primera opción para sustituir a las notas adhesivas de colores. Si utilizamos Zoom, se puede pedir a una persona que marque con una marca verde si ha terminado o con una marca roja en caso de que esté atascada. Al igual que con las notas adhesivas, estas marcas no se quitan solas, por lo que es necesario pedir a la persona que las quite si ya ha resuelto el problema o que pase a otro ejercicio.\nCrea una tabla en el documento colaborativo (utilizando HackMD o google docs) con los nombres de todos los participantes. Pídeles que pongan un check verde o una cruz roja para comprobar si van por buen camino. Puedes comprobar si alguien no ha rellenado algo.\nEn zoom, las otras reacciones con emojis son útiles para un estado general rápido porque también nos muestran el número de cada emoji en la lista de participantes. Pero estos emojis se limpian al cabo de un rato, por lo que puedes perderte alguna información. Con el mismo propósito, también podemos pedirles que escriban en el chat cuando terminen una tarea. Aunque puede ser mucha información junta en grupos de más de 20 personas y complicado determinar quién no contestó.\nSe pueden utilizar otras herramientas, como encuestas o un canal paralelo de Slack, pero agregar más herramientas a la clase sincrónica, sobre todo si es una herramienta nueva, es una carga cognitiva que debemos considerar.\nAlgunos temas permiten agregar en el código un elemento de aleatoriedad que va a dar resultados diferentes en diferentes máquinas o entornos y podes preguntarle a tus estudiantes si sus resultados son iguales a los tuyos. Cuando enseño gráficos de redes, el algoritmo es no determinístico por o que el gráfico que obtienen mis estudiantes suele ser diferente al mio, muchas veces no necesito preguntar, el chat se inunda con mensajes avisando que sus gráficos son distintos. De esta forma sabrás que te siguen.\nUna vez más, enseñar con otras personas es una buena estrategia para este consejo. El papel principal de tus co-docentes es garantizar que tus estudiantes no se queden atrás debido, por ejemplo, a problemas técnicos. A veces es una buena idea crear una sala para resolver problemas técnicos donde tu estudiante y co-docentes puedan ir y resolver el problema. Tus ayudantes deben prestar atención a los documentos compartidos, los emojis o el canal de Slack, que indican que un/a estudiante está pidiendo ayuda.\n\n\n\n9.1.12 Usa ilustraciones, aún mejor dibujalas en tiempo real.\n\n9.1.12.1 En persona\n\n\n\n9.1.13 Dibuja temprano, dibuja seguido\nLos diagramas son siempre una buena idea. A veces tengo una presentación de diapositivas llena de diagramas preparada de antemano, pero construir los diagramas paso a paso ayuda a retenerlos más (Section 5.1) y te permite improvisar.\n\n9.1.13.1 Online\nLos diagramas y mapas conceptuales pueden ayudar a tus estudiantes a comprender las etapas de la lección y a organizar el material. Generar los diagramas junto con tus estudiantes a medida que avanzas en el material puede funcionar muy bien. Hay varias herramientas para hacerlo en línea (Miro, Jamboard, Whiteboard.fi, draw.io y excalidraw, entre otras). Puedes usarlo con el ratón o con una tableta (yo uso la Wacom One, que es estupenda).\nPuedes construir diagramas, haciéndolos cada vez más complejos en paralelo con el material que enseñas. Presentar información complementaria utilizando representaciones visuales y verbales ayuda a aprender (conocido como “codificación dual”).\nPor ejemplo, yo solía dibujar un mapa conceptual del código de control de flujo con mis alumnos para hablar de los conceptos esenciales antes de hacer la codificación en vivo. También dibujo un mapa del orden de ejecución de una sentencia SQL para explicar el resultado de una consulta o por qué debemos utilizar una función y no otra después de hacer el live coding.\nAlgunas herramientas permiten escribir y dibujar sobre la pantalla compartida. Esto puede ser útil para marcar parte del código y anotar el valor de una variable mientras ejecutas un fragmento de código o los pasos y el orden de ejecución de una sentencia.\n\n\n\n9.1.14 Acepta tus errores.\n\n9.1.14.1 On line\nAunque te sepas bien la lección y la sigas, es muy probable que cometas errores mientras demuestras cómo programar en vivo. Cometer errores suele ser el mayor temor de los/as docentes que utilizan esta técnica. Está bien que ocurra (ya que es lo que pasa en la vida real cuando programamos), y puede ser una excelente oportunidad para aprender a depurar. Esta forma de afrontar los errores se denomina “encuadre positivo del error”, y es beneficiosa para el aprendizaje.\nCuando se produzca un error, detente, léelo en voz alta y explica cómo has determinado lo que ha ocurrido. Marca qué parte del texto del error te da una pista que te ayuda a diagnosticarlo y resolverlo. A continuación, vuelve al código y muestra qué elemento o elementos del código arrojan el error. Es útil aclarar qué hace cada parte del código creando nuevos ejemplos que muestren por qué se produce un error en una situación y no en otra. También puedes involucrar a los estudiantes en la resolución de problemas preguntándoles qué creen que ha fallado y cómo solucionarlo.\nSi tiene tiempo, utilice el error para hacer una “búsqueda en vivo”. En esta lección, enseñas cómo buscar un error en Internet, afinar esa búsqueda, leer los resultados y determinar cuál es el que más se acerca a tu problema. Aquí puedes enseñar cómo leer la ayuda y las preguntas y respuestas de Stack Overflow.\nTambién, como se mencionó en puntos anteriores, si un/a estudiante tiene un error, puedes pedirle que comparta su pantalla, y toda la clase trabaja en conjunto para resolverlo usando estas estrategias.\nUna vez que hayas dado una clase varias veces, es poco probable que cometas algo más que errores básicos de tipeo (que pueden seguir siendo informativos). Puedes intentar recordar errores pasados y cometerlos deliberadamente, pero eso puede parecer forzado. Un método alternativo es el twitch coding: pedir a los alumnos que te digan uno por uno qué tienes que escribir a continuación. Es casi seguro que te meterás en algún lío.\n\n\n9.1.14.2 En persona\n\n\n\n9.1.15 Aprovecha tus errores\n\nLos errores de tipeo son la pedagogía. — Emily Jane McTavish\n\nLa regla más importante de la programación en vivo es aprovechar tus errores. No importa qué tan bien te prepares, cometerás algunos errores; cuando lo hagas, piensa sobre ellos con tu público. Si bien obtener datos es difícil, los/las programadores/as profesionales dedican del 25% al 60% de su tiempo identificando y resolviendo errores; las personas novatas le dedican mucho más (Section 8.6). A pesar de ello, la mayoría de los libros de texto y tutoriales dedican poco tiempo a diagnosticar y corregir problemas. Si hablas en voz alta mientras intentas identificar qué escribiste mal o dónde tomaste el camino equivocado, y explicas cómo lo corriges, les darás a tus estudiantes un conjunto de herramientas que pueden usar cuando comentan sus propios errores.\n\n\n\n\n\n\nTropiezos deliberados\n\n\n\nUna vez que hayas enseñado una lección varias veces, es poco probable que cometas nada más que errores básicos de tipeo (que de todas maneras pueden ser informativos). Puedes intentar recordar errores pasados y cometerlos deliberadamente, pero usualmente eso se siente forzado. Un enfoque alternativo es sacudir la programación: pide a tus estudiantes, en turnos, que te indiquen qué escribir a continuación. Esto prácticamente garantiza que te encuentres en algún tipo de problema.\n\n\n\n\n9.1.16 Inconvenientes\nProgramar en vivo tiene algunos inconvenientes, pero pueden evitarse o solucionarse con un poco de práctica. Si descubres que estás cometiendo demasiados errores de tipeo, reserva 5 minutos por día para practicar escribir con el teclado: también te ayudará en tu trabajo diario. Si crees que dependes demasiado de las notas de la clase, divídelas en partes más pequeñas para que solo tengas que pensar en un pequeño paso a la vez.\nY si sientes que estás pasando demasiado tiempo escribiendo código para importar librerías, encabezados de clases y código repetitivo, genera un esqueleto de código para que tú y tus estudiantes usen como punto de partida (Section 10.9). Hacer esto también reducirá su carga cognitiva, dado que centrarán su atención donde tú quieras."
  },
  {
    "objectID": "performance.html#sec-performance-jugyokenkyu",
    "href": "performance.html#sec-performance-jugyokenkyu",
    "title": "9  Enseñar como un arte performativo",
    "section": "9.2 Estudiar la lección",
    "text": "9.2 Estudiar la lección\nHemos visto que ofrecer oportunidades para practicar y dar devoluciones constructivas a nuestros estudiantes son componentes esenciales del proceso de aprendizaje. Podemos aplicar estos mismos principios para aprender a enseñar.\nSin embargo, mucha gente asume que los/as buenas docentes nacen, no se hacen. Esta es una asuncion erronea. Las personas que ensenan pueden mejorar su habilidad docente con el tiempo a través de la práctica y mejoran más cuando reciben comentarios sobre como ensenaron de parte de otros docentes. Como explica Green (2014), en japonés este enfoque se llama jugyokenkyu, que significa “estudiar la lección”.\n\nPara graduarse como especialistas en educación de Japón, las personas aspirantes no solo tenían que ver como trabajaba el o la docente que le asignaban, sino que ademas tenían que reemplazarlo efectivamente, primero observando en su aula y luego ensenando una clase. Después, todas las personas involcuradas —el/la docente, los/las estudiantes para ser docentes, y a veces, incluso un/a observador/a externo—se sentaban alrededor de una mesa para hablar sobre lo que observaron.\n\nObervar en detalle un trabajo para mejorarlo es común en áreas tan diversas como la [fabricación][deming-edwards] y la música. Un interprete de música profesional, por ejemplo, analizará media docena de grabaciones de la pieza que quiere tocar antes de interpretarlas. También recibirán comentarios de sus colegas durante la práctica y después de las actuaciones.\nPero la retroalimentación continua no es parte de la cultura de la enseñanza en la mayoría de los países de habla inglesa e hispana. Allí, lo que sucede en el aula se queda en el aula: quienes enseñan no miran las clases de sus colegas de manera regular, por lo que no pueden tomar prestadas las buenas ideas de las demás personas. Podrán acceder a los planes de clases y tareas de sus colegas, la junta escolar o una editorial de libros de texto, o revisar cursos masivos abiertos en línea, pero cada persona tiene que descubrir cómo dar las clases específicas en aulas específicas para estudiantes específicos/as. Esto es particularmente cierto para personas voluntarias y docentes free-range que participan en talleres y actividades fuera de la escuela.\nDesarrollar nuevas técnicas y dar lecciones de demostración (en las que una persona enseña a estudiantes reales mientras otras personas observan) no son la solución. Por ejemplo, Fincher and Tenenberg (2007),Fincher et al. (2012) encontraron que de los 99 historiales analizados, quienes enseñan solo buscaron activamente nuevas prácticas o materiales en tres casos, y solo consultaron material publicado en ocho oportunidades. La mayoría de los cambios se dieron localmente, sin aportes de fuentes externas, o solo involucraron comunicación personal con otros/as docentes. Barker, Hovey, and Gruning (2015) encontró algo similar:\n\nLa adopción no es una “acción racional”…sino una serie iterativa de decisiones tomadas en un contexto social, en base a tradiciones normativas, señales sociales, y procesos emocionales o intuitivos… No es probable que los/las docentes utilicen los resultados de investigaciones en educación como base para tomar decisiones… La retroalimentación positiva de los/las estudiantes se toma como fuerte evidencia por parte de los/las docentes de que deben continuar con una práctica.\n\nJugyokenkyu funciona porque maximiza la oportunidad de transferencia de conocimiento no planificada entre docentes: alguien se propone demostrar X, pero mientras lo miran, su público también (o en su lugar) aprende Y. Por ejemplo, quien enseña podría tener la intención de demostrar a sus estudiantes cómo buscar direcciones de correo electrónico en un archivo de texto, pero lo que su público podría terminar aprendiendo son algunos atajos de teclado."
  },
  {
    "objectID": "performance.html#sec-performance-feedback",
    "href": "performance.html#sec-performance-feedback",
    "title": "9  Enseñar como un arte performativo",
    "section": "9.3 Dando y recibiendo retroalimentación al enseñar",
    "text": "9.3 Dando y recibiendo retroalimentación al enseñar\nObservar a alguien te ayuda, y darle una devolución ayuda a esa persona, pero puede ser difícil recibirlas, especialmente cuando son negativas (?fig-performance-feedback-feelings).\n{#fig-performance-feedback-feelings fig-alt = ““} La retroalimentación es más fácil de dar y recibir cuando ambas partes comparten expectativas sobre lo que está y no está al alcance y sobre cómo se deben expresar los comentarios. Si solicitas una retroalimentación:\n\nIníciala.\n\nEs mejor pedir la retroalimentación que recibirla de mala gana.\n\nElige tus preguntas,\n\nes decir, pide comentarios específicos. Es mucho más difícil para alguien responder, “¿Qué te pareció?” que responder, “¿Hablé demasiado rápido?” o, “¿Qué cosa de esta lección debería seguir haciendo?” Direccionar la retroalimentación de esta manera además es más útil para ti. Siempre es preferible mejorar una cosa a la vez que cambiar todo y esperar que sea para mejor. Direccionar los comentarios hacia algo que elegiste trabajar ayuda a mantenerte en foco, lo que a su vez aumenta las chances de que veas un progreso.\n\nUsa un traductor de retroalimentación.\n\nPídele a alguien que lea todas las devoluciones y te haga un resumen. Puede ser más fácil escuchar, “Varias personas piensan que podrías acelerar un poco,” que leer varias notas que digan, “Esto es demasiado lento” o “Esto es aburrido.”\n\nSé amable contigo.\n\nLa mayoría somos muy críticos/as con nosotros/as mismos/as, por lo que siempre es útil anotar lo que pensamos de nosotros/as antes de recibir retroalimentación de otras personas. Eso nos permite comparar lo que pensamos de nuestro desempeño con lo que otras personas piensan, lo que a su vez nos permite evaluar esto último con mayor precisión. Por ejemplo, es muy común que las personas piensen que están diciendo “mmm” y “ehh” con demasiada frecuencia cuando tu público en realidad no lo nota. Recibir esa retroalimentación una vez permite a los/las docentes ajustar la evaluación sobre sí mismos/as la próxima vez que se sientan así.\n\n\nTambién puedes dar retroalimentación a otras personas de manera más efectiva:\n\nInteractúa.\n\nMirar fijamente a alguien es una buena manera de hacer que se sienta incómodo/a, por lo que si deseas darle una retroalimentación sobre cómo enseña normalmente, necesitas ayudar a que se tranquilice. Interactuar con la persona como si fueras estudiante es una buena manera de hacer esto, así que haz preguntas o simula escribir su ejemplo. Si eres parte de un grupo, haz que una o dos personas desempeñen el papel de estudiantes mientras que el resto toma notas.\n\nBalancea la retroalimentación positiva y negativa.\n\nEl “sándwich de cumplidos” compuesto por un comentario positivo, uno negativo, y un segundo positivo se vuelve agotador rápidamente, pero es importante decirle a las personas qué deben seguir haciendo y qué deben cambiar Por un tiempo, me preocupé tanto por la afinación que perdí completamente mi sentido del tiempo .\n\nToma notas.\n\nNo vas a recordar todo lo que notaste si la presentación dura más de unos pocos segundos, y definitivamente no vas a recordar con qué frecuencia lo notaste. Escribe una nota la primera vez que algo suceda y luego agrega una marca o cruz cuando vuelva a ocurrir para que puedas ordenar tus comentarios por frecuencia.\n\n\nTomar notas es más eficiente cuando tienes algún tipo de rúbrica para que tengas que apurarte a escribir tus observaciones mientras la persona que estás observando todavía está hablando. La rúbrica más simple para dar comentarios de forma libre en grupo es la grilla de 2x2 cuyo eje vertical tiene las etiquetas “lo que salió bien” y “lo que se puede mejorar”, y en el eje horizontal “contenido” (lo que se dijo) y “presentación” (cómo se dijo). Quienes observan escriben sus comentarios en notas autoadhesivas mientras miran la demostración, luego las pegan en los cuadrantes de la grilla dibujada en una pizarra (Figure 9.1).\n\n\n\nFigure 9.1: Rúbrica de enseñanza\n\n\n\n\n\n\n\n\nRúbricas e inventario de preguntas\n\n\n\nLa Section 24.1 contiene una rúbrica de ejemplo para evaluar 5–10 minutos de enseñanza de programación. Presenta elementos más o menos en el orden en que es probable que aparezcan, por ejemplo, preguntas sobre la introducción aparecen antes que las preguntas sobre la conclusión.\nRúbricas como esta tienden a crecer con el tiempo a medida que las personas piensan en cosas que les gustaría agregar. Una buena manera de mantener las rúbricas manejables es insistir en que la longitud total permanezca constante: si alguien quiere agregar una pregunta, debe identificar una que sea menos importante y que pueda sacarse.\n\n\nSi te interesa dar y recibir retroalimentación, Gormally, Evans, and Brickman (2014) tiene buenos consejos que puedes usar para hacer que la retroalimentación entre pares sea parte del proceso de enseñanza, mientras que Gawande (2011) analiza el valor de tener un/a tutor/a.\n\n\n\n\n\n\nClases de estudio\n\n\n\nLas escuelas de arquitectura a menudo incluyen clases de estudio en las que estudiantes resuelven pequeños problemas de diseño y reciben devoluciones de sus pares en ese mismo momento. Estas clases son más efectivas cuando el/la docente evalúa las devoluciones de pares para que quienes participen aprendan no solo cómo construir edificios sino también cómo dar y recibir retroalimentación Schön (1984). Las clases magistrales de música tienen un propósito similar, y he descubierto que dar retroalimentación sobre la retroalimentación ayuda a las personas a mejorar su manera de enseñar también."
  },
  {
    "objectID": "performance.html#sec-performance-practice",
    "href": "performance.html#sec-performance-practice",
    "title": "9  Enseñar como un arte performativo",
    "section": "9.4 ¿Cómo practicar cómo enseñamos?",
    "text": "9.4 ¿Cómo practicar cómo enseñamos?\nLa mejor manera de perfecccionar la forma en que damos clases en persona es observarse a sí mismo/a hacerlo:\n\nTrabaja en grupos de a tres personas.\nCada persona rota entre los roles de docente, público y quien graba. La persona en el rol docente tiene dos minutos para explicar algo. La persona que pretende ser el público está allí para prestar atención, mientras que la tercera persona graba la sesión con un teléfono u otro dispositivo portátil.\nLuego de que todas las personas tuvieron la oportunidad de enseñar, el grupo mira todos los videos. Cada persona da una retroalimentación sobre los tres videos, es decir, las personas dan una devolución sobre sí mismas y sobre las demás.\nDespués de que se discutieron los videos, se borran. (Muchas personas se sienten justificadamente incómodas por su presencia en internet.)\nFinalmente, toda la clase vuelve a reunirse y agrega las devoluciones a una grilla 2x2 compartida como la que se describió previamente sin decir de quién se trata cada comentario.\n\nPara que este ejercicio funcione bien:\n\nGraben los tres videos y luego miren los tres. Si el ciclo es enseñar-revisar-enseñar-revisar, la última persona en enseñar siempre se queda sin tiempo (a veces a propósito). Hacer todas las revisiones luego de que todas las personas enseñaron también ayuda a poner un poco de distancia entre los dos momentos, lo que hace que el ejercicio sea un poco menos incómodo.\nAvísales a las personas al comienzo de la clase que les pedirás que enseñen algo para que tengan tiempo de elegir un tema. Avisarles con mucha anticipación puede ser contraproducente, ya que algunas personas se preocuparán por cuánto deben prepararse.\nLos grupos deben estar físicamente separados para reducir el ruido en sus grabaciones. En la práctica, esto significa 2–3 grupos en un aula de tamaño normal y el resto usando espacios de descanso cercanos, oficinas o (en una ocasión) el armario de la conserjería.\nLas personas deben dar retroalimentación sobre sí mismas y entre sí para que puedan calibrar sus impresiones de la manera en que enseñan contra las de otras personas. La mayoría de las personas son más críticas sobre ellas mismas de lo que deberían ser y es importante que se den cuenta de esto.\n\nEl anuncio de este ejercicio usualmente es recibido con quejidos y aprensión, ya que pocas personas disfrutan verse o escucharse a sí mismas. Sin embargo, esas mismas personas lo califican constantemente como una de las partes más valiosas de los talleres de enseñanza. También es una buena preparación para enseñar de a pares (Section 10.3): a las personas que enseñan les resulta mucho más fácil intercambiar devoluciones informales si han tenido algo de práctica y tienen una rúbrica compartida para definir expectativas.\nY hablando de rúbricas: una vez que la clase haya puesto todos sus comentarios en una grilla compartida, elige algunos comentarios positivos y negativos, haz una lista y pídeles que hagan el ejercicio nuevamente. La mayoría de las personas se sienten más cómodas la segunda vez y la evaluación sobre lo que han decidido que es importante aumenta su sentido de autodeterminación (Chapter 11).\n\n\n\n\n\n\nTics\n\n\n\nTodas las personas tenemos hábitos nerviosos: hablamos más rápido y con voz más aguda de lo normal cuando estamos en el escenario, jugamos con nuestro pelo, o hacemos sonar los nudillos. Las personas que juegan llaman a esto “tics” y a menudo no se dan cuenta de que se mueven, se miran los zapatos, o juegan con lo que tienen en los bolsillos cuando en realidad no saben la respuesta a una pregunta.\nNo puedes deshacerte de los tics completamente, e intentar hacerlo puede hacer que te obsesiones con ellos. Una mejor estrategia es tratar de desplazarlos, por ejemplo, entrenarse para apretar los dedos de los pies dentro de los zapatos cuando tienes nervios en vez de limpiarte la oreja con el dedo meñique."
  },
  {
    "objectID": "performance.html#sec-performance-exercises",
    "href": "performance.html#sec-performance-exercises",
    "title": "9  Enseñar como un arte performativo",
    "section": "9.5 Ejercicios",
    "text": "9.5 Ejercicios\n\n9.5.1 Dar devolución sobre una mala enseñanza (toda la clase/20’)\nEn grupo, miren [este video de mala enseñanza][video-bad-teaching] (en inglés, subtitulado al español —activen los subtítulos al ingresar al link) y den retroalimentación sobre dos ejes: positivo versus negativo y contenido versus presentación. Que cada persona en la clase agregue un comentario a la grilla 2x2 en una pizarra en las notas compartidas sin duplicar ningún comentario. ¿Qué vieron otras personas y tú no? ¿Con qué comentarios estás totalmente de acuerdo o en desacuerdo?\n\n\n9.5.2 Practicar dar devoluciones (grupos pequeños/45’)\nUsa el proceso descripto en la Section 9.4 para enseñar en grupos de tres personas y recolectar las devoluciones.\n\n\n9.5.3 Lo malo y lo bueno (toda la clase/20’)\nMira los videos de [programación en vivo mal desarrollada][live-coding-done-badly-es] y [bien desarrollada][live-coding-done-well-es] y resume tu devolución sobre las diferencias usando la grilla 2x2 habitual. ¿De qué manera la segunda sesión de enseñanza es mejor que la primera? ¿Hay algo qué es mejor en el primer video que en el segundo?\n\n\n9.5.4 Observa, luego haz (parejas/30’)\nEnseña a tu pareja 3–4 minutos de una lección usando programación en vivo, luego intercambien lugares y observa a esa persona programar en vivo. No te preocupes por grabar estas sesiones—es difícil capturar tanto a la persona como a la pantalla con un dispositivo portátil—pero da una devolución de la misma manera que lo hiciste antes. Explícales a tus colegas qué vas a enseñar y con qué esperas que estén familiarizados/as.\n\n¿Qué se siente diferente entre programar en vivo y dar una clase tradicional? ¿Cuál fue más fácil y más difícil?\n¿Cometiste algún error? Si lo hiciste, ¿cómo lo manejaste?\n¿Hablaste y escribiste al mismo tiempo o alternadamente?\n¿Con qué frecuencia señalaste algo en la pantalla? ¿Con qué frecuencia usaste el cursor para resaltar algo?\n¿Qué intentarás seguir haciendo la próxima vez? ¿Qué intentarás hacer diferente?\n\n\n\n9.5.5 Tics (grupos pequeños/15’)\n\nToma notas sobre los tics que piensas que tienes, pero no las compartas con otras personas.\nEnseña una clase corta (de 2–3 minutos).\nPregúntale a tu público cómo creen que te traicionan los nervios. ¿Coinciden con lo que pensaste de ti?\n\n\n\n9.5.6 Consejos para enseñar (grupos pequeños/15’)\nEl sitio [CS Teaching Tips][cs-teaching-tips] (en inglés) tiene una gran cantidad de consejos prácticos sobre cómo enseñar computación, así como una colección de hojas de consejos descargables. Revisa las hojas de consejos en grupos pequeños y clasifica cada uno de acuerdo a si lo usas todo el tiempo, ocasionalmente, o nunca lo usaste. ¿En qué se diferencia tu práctica y la práctica de tus compañeros/as? ¿Hay algún consejo con el que no estés de acuerdo o creas que sería ineficaz?"
  },
  {
    "objectID": "performance.html#resumen",
    "href": "performance.html#resumen",
    "title": "9  Enseñar como un arte performativo",
    "section": "9.6 Resumen",
    "text": "9.6 Resumen\n\n\n\nConceptos: Retroalimentación\n\n\n\n\n\n\nBarker, Lecia, Christopher Lynnly Hovey, and Jane Gruning. 2015. “What Influences CS Faculty to Adopt Teaching Practices?” In 2015 Technical Symposium on Computer Science Education (SIGCSE’15). Association for Computing Machinery (ACM). https://doi.org/10.1145/2676723.2677282.\n\n\nBlikstein, Paulo, Marcelo Worsley, Chris Piech, Mehran Sahami, Steven Cooper, and Daphne Koller. 2014. “Programming Pluralism: Using Learning Analytics to Detect Patterns in the Learning of Computer Programming.” Journal of the Learning Sciences 23 (4): 561–99. https://doi.org/10.1080/10508406.2014.954750.\n\n\nFincher, Sally, Brad Richards, Janet Finlay, Helen Sharp, and Isobel Falconer. 2012. “Stories of Change: How Educators Change Their Practice.” In 2012 Frontiers in Education Conference (FIE’12). Institute of Electrical; Electronics Engineers (IEEE). https://doi.org/10.1109/fie.2012.6462317.\n\n\nFincher, Sally, and Josh Tenenberg. 2007. “Warren’s Question.” In 2007 International Computing Education Research Conference (ICER’07). Association for Computing Machinery (ACM). https://doi.org/10.1145/1288580.1288588.\n\n\nGawande, Atul. 2011. “Personal Best.” The New Yorker, October.\n\n\nGormally, Cara, Mara Evans, and Peggy Brickman. 2014. “Feedback about Teaching in Higher Ed: Neglected Opportunities to Promote Change.” Cell Biology Education 13 (2): 187–99. https://doi.org/10.1187/cbe.13-12-0235.\n\n\nGreen, Elizabeth. 2014. Building a Better Teacher: How Teaching Works (and How to Teach It to Everyone). W. W. Norton & Company.\n\n\nHaaranen, Lassi. 2017. “Programming as a Performance - Live-Streaming and Its Implications for Computer Science Education.” In 2017 Conference on Innovation and Technology in Computer Science Education (ITiCSE’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3059009.3059035.\n\n\nHollingsworth, J. R., and S. E. Ybarra. 2009. Explicit Direct Instruction (EDI): The Power of the Well-Crafted, Well-Taught Lesson. SAGE Publications.\n\n\nIhantola, Petri, and Ville Karavirta. 2011. “Two-Dimensional Parson’s Puzzles: The Concept, Tools, and First Observations.” Journal of Information Technology Education: Innovations in Practice 10: 119–32. https://doi.org/10.28945/1394.\n\n\nNederbragt, Rayna Michelle AND Hill, Alexander AND Harris. 2020. “Ten Quick Tips for Teaching with Participatory Live Coding.” PLOS Computational Biology 16 (9): 1–7. https://doi.org/10.1371/journal.pcbi.1008090.\n\n\nRaj, Adalbert Gerald Soosai, Jignesh M. Patel, Richard Halverson, and Erica Rosenfeld Halverson. 2018. “Role of Live-Coding in Learning Introductory Programming.” In 2018 Koli Calling International Conference on Computing Education Research (Koli’18). https://doi.org/10.1145/3279720.3279725.\n\n\nRubin, Marc J. 2013. “The Effectiveness of Live-Coding to Teach Introductory Programming.” In 2013 Technical Symposium on Computer Science Education (SIGCSE’13), 651–56. Association for Computing Machinery (ACM). https://doi.org/10.1145/2445196.2445388.\n\n\nSchön, Donald A. 1984. The Reflective Practitioner: How Professionals Think in Action. Basic Books.\n\n\nSelvaraj, Ana, Eda Zhang, Leo Porter, and Adalbert Gerald Soosai Raj. 2021. “Live Coding: A Review of the Literature.” In Proceedings of the 26th ACM Conference on Innovation and Technology in Computer Science Education v. 1, 164–70. ITiCSE ’21. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/3430665.3456382.\n\n\nSpohrer, James C., Elliot Soloway, and Edgar Pope. 1985. “A Goal/Plan Analysis of Buggy Pascal Programs.” Human-Computer Interaction 1 (2): 163–207. https://doi.org/10.1207/s15327051hci0102_4.\n\n\nStockard, Jean, Timothy W. Wood, Cristy Coughlin, and Caitlin Rasplica Khoury. 2018. “The Effectiveness of Direct Instruction Curricula: A Meta-Analysis of a Half Century of Research.” Review of Educational Research, January, 003465431775191. https://doi.org/10.3102/0034654317751919."
  },
  {
    "objectID": "motivation.html#sec-motivation-authentic",
    "href": "motivation.html#sec-motivation-authentic",
    "title": "11  Motivación y desmotivación",
    "section": "11.1 Tareas auténticas",
    "text": "11.1 Tareas auténticas\nComo Dylan Wiliam menciona en Hendrick and Macpherson (2017), la motivación no siempre conduce al logro pero el logro casi siempre conduce a la motivación: el éxito de los/las estudiantes les motiva mucho más a que les digan lo geniales que son. Podemos usar esta idea en la docencia creando una cuadrícula cuyos ejes son “tiempo medio para dominar” y “utilidad una vez dominado” (Figure 11.1).\n\n\n\nFigure 11.1: Qué enseñar\n\n\nLas cosas que se dominan rápido y son útiles de inmediato se deben enseñar primero, incluso si no se consideran fundamentales para personas que ya son practicantes competentes, porque unas pocas victorias iniciales fortalecerán la confianza de tus estudiantes en sí mismos/as y en su docente. Por el contrario. aquellas cosas que son difíciles de aprender y no son útiles a tus estudiantes en su etapa actual de desarrollo deben omitirse por completo, mientras que los temas en la diagonal se deben sopesar entre sí.\n\n11.1.1 ¿Útil para quién?\nSi alguien quiere construir sitios web, conceptos de ciencia de computación fundamentales como recursión y computabilidad pueden habitar la esquina inferior derecha de esta cuadrícula. Eso no quiere decir que no vale la pena aprenderlos, pero si nuestro objetivo es motivar a las personas, pueden y deben ser enseñados diferidos. Por lo contrario, un/a estudiante de último año tomando un clase de programación para estimular su mente puede preferir explorar estas grandes ideas en vez de hacer algo práctico. Cuando estás creando tu cuadrícula, deberías hacerlo con tus personas tipo en mente Section 7.1). Si los temas se ordenan en lugares muy diferentes para diferentes personas tipo, deberías pensar en crear cursos diferentes.\n\nUn ejemplo bien estudiado de priorizar lo que es útil sin sacrificar lo que es fundamental es el enfoque de computación de medios desarrollado en Georgia Tech Guzdial (2013). En vez de imprimir “hola mundo” o sumar los primeros diez enteros, el primer programa de un/a estudiante podría ser abrir una imagen, cambiarle el tamaño para crear una versión miniatura y guardar el resultado. Esta es una tarea auténtica; es decir, algo que los/las estudiantes creen que harían en la vida real. También tiene un artefacto tangible: si la imagen sale del tamaño incorrecto, los/las estudiantes tienen algo a mano que puede guiar su depuración. Lee (2013) describe una adaptación de este enfoque de Python a MATLAB, mientras que otras personas están construyendo cursos similares acerca de ciencia de datos, procesamiento de imágenes y biología Albright, Klinge, and Rebelsky (2018),Meysenburg et al. (2018),Ritz (2018)\nSiempre habrá tensión entre darle a tus estudiantes problemas auténticos y ejercitar las habilidades individuales que requieren para resolver esos problemas: al fin y al cabo, los/las programadores no contestan preguntas de opción múltiple en el trabajo como tampoco los/las músicos/as tocan escalas una y otra vez en frente de un público. Conseguir el balance es difícil, pero un primer paso es eliminar cualquier cosa arbitraria o sin sentido. Por ejemplo, los ejemplos de programación no deben utilizar variables llamadas foo y bar, y si vas a hacer que tus estudiantes ordenen una lista, haz una lista de canciones en vez de cadenas de caracteres como “aaa” y “bbb”."
  },
  {
    "objectID": "motivation.html#sec-motivation-demotivation",
    "href": "motivation.html#sec-motivation-demotivation",
    "title": "11  Motivación y desmotivación",
    "section": "11.2 Desmotivación",
    "text": "11.2 Desmotivación\n\nLas mujeres no abandonan la computación porque no saben cómo es; se van porque sí saben. — atribuido a varias personas\n\nSi enseñas en un ambiente free-range probablemente tus estudiantes son voluntarios/as y probablemente quieren estar en tu clase. Por lo tanto, motivarlos/as es menos preocupante que desmotivarlos/as. Desafortunadamente, es fácil desmotivar a las personas accidentalmente. Por ejemplo, Cheryan et al. (2009) reportaron cuatro estudios mostrando que hay pistas ambientales sutiles con una diferencia medible en el interés que las personas de diferentes géneros tienen en la computación: cambiar los objetos en un aula de ciencias de la computación de aquellos considerados estereotipados de ciencias de la computación (p.ej. afiches y videojuegos de Star Trek) a objetos no considerados estereotipados (p.ej. afiches de la naturaleza y guías telefónicas) impulsó el interés de estudiantes universitarias al nivel de sus pares masculinos. De manera similar, Gaucher, Friesen, and Kay (2011) reporta tres de estudios que muestran que la redacción de género comúnmente empleada en materiales de contratación laboral puede mantener desigualdad de género en ocupaciones tradicionalmente dominadas por hombres.\nHay tres desmotivadores principales para estudiantes adultos/as:\n\nImprevisibilidad:\n\ndesmotiva a las personas porque si no hay una conexión confiable entre lo que hacen y el resultado que logran, no hay razón para que intenten hacer nada.\n\nIndiferencia:\n\ndesmotiva porque los/las estudiantes que creen que el/la docente o el sistema educativo no se preocupan por ellos/as, no se van a preocupar por aprender la clase.\n\nInjusticia:\n\ndesmotiva a las personas desfavorecidas por razones obvias. Lo sorprendente es que también desmotiva a las personas que se benefician de la injusticia: consciente o inconscientemente, les preocupa que algun dia se encuentren en el grupo desfavorecido Wilkinson and Pickett (2011).\n\n\nEn situaciones extremas, los/las estudiantes pueden desarrollar indefensión aprendida: si están repetidamente sometidos/as a comentarios negativos en una situación que no pueden cambiar, pueden aprender a ni siquiera intentar cambiar aquello que sí podrían.\nUna de las maneras más rápidas y seguras de desmotivar estudiantes es usar un lenguaje que sugiera que algunas personas son programadoras naturales y otras no. Guzdial lo ha llamado [el mito más grande de enseñar ciencias de la computación][guzdial-myths], y Patitsas et al. (2016) respaldó esto mostrando que la gente ve evidencia de un “gen geek” donde no existe uno. Analizaron distribuciones de calificaciones de 778 cursos universitarios y encontraron que solo 5,8% mostraba signos de ser multimodal, es decir, solo una clase de veinte mostró signos de tener dos poblaciones distintas de estudiantes. Luego le mostraron a 53 profesores/as de ciencias de la computación histogramas de distribuciones ambiguas de calificaciones; aquellos/as que creían que algunas personas tienen una predisposición innata a ser mejores en las ciencias de la computación eran más propensos/as de verlas como bimodal que aquellos/as que no.\nEstas creencias son importantes porque los/las docentes actúan sobre ellas Brophy (1983). Si un/a docente cree que es probable que a un/a estudiante le vaya bien naturalmente (a menudo inconscientemente) se enfoca en ese/a estudiante, que luego cumple con las expectativas debido a la mayor atención, lo que a su vez parece confirmar la creencia del docente. Lamentablemente, hay pocas señales de que la mera evidencia del tipo presentado en Patitsas et al. (2016) es suficiente para romper este círculo vicioso…\nAquí hay algunas otras cosas específicas que desmotivarán a tus estudiantes:\n\nUna actitud de superioridad moral o desdeñosa\n\nde un/una docente o un/una compañero/a estudiante.\n\nDecirles que sus habilidades existentes son tonterías.\n\nLas personas que son usuarias de Unix se burlan de las que usan Windows, los/las programadores/as de todo tipo hacen chistes sobre Excel y sin importar qué entorno de desarrollo de aplicación web conoces, algún/a programador/a te dirá que está desactualizado. Seguramente, tus estudiantes invirtieron mucho tiempo y esfuerzo para adquirir las habilidades que tienen; menospreciarlas es una buena manera de garantizar que no escucharán nada más de lo que tengas que decir.\n\nSumergirse en discusiones técnicas complejas o detalladas\n\ncon los estudiantes más avanzados de la clase.\n\nFingir que sabes más de lo que sabes.\n\nLos/las estudiantes confiarán más en ti si hablas con franqueza de los límites de tu conocimiento y será más probable que hagan preguntas y pidan ayuda.\n\nUsar la letra S (“solo”) o fingiendo sorpresa.\n\nComo se discutió en el Chapter 4, decir cosas como “no puedo creer que no sabes X” o “¿nunca has oído de Y?” le señala a tus estudiantes que piensas que su problema es trivial y que deben ser estúpidos/as por no poder resolverlo.\n\nDolores de cabeza de instalación de software.\n\nEl primer contacto de las personas con programación o con herramientas nuevas de programación suele a ser desmoralizador y creer que algo es difícil de aprender es una profecía autocumplida. No es solamente el tiempo que toma en configurar o el sentimiento de que es injusto tener que depurar algo que depende del conocimiento que aún no tienen. El problema real es que con cada falla refuerzan su creencia de que tendrán una mejor chance de cumplir con la fecha límite del próximo jueves si siguen haciendo las cosas como siempre las han hecho.\n\n\nEs incluso más fácil desmotivar a las personas en línea que en persona, pero ahora hay estrategias basadas en evidencia para lidiar con esto. Ford et al. (2016) encontraron que las siguientes cinco barreras para contribuir en [Stack Overflow][stack-overflow] sos consideradas significativamente más problemáticas por las mujeres que por los hombres: falta de conocimiento de las características del sitio, sentirse incapaz de contestar preguntas, una comunidad de tamaño intimidante, malestar interactuando con personas extrañas o dependiendo de ellas, y la sensación de que buscar cosas en línea no es “trabajo real.” El miedo de comentarios negativos no llegó a esta lista, pero de seguro sería la próxima razón agregada, si los autores de la investigación no fueran tan estrictos con sus límites estadísticos. Todos estos factores pueden y deben abordarse tanto en persona como en línea usando métodos como los de la Section 11.4, y hacerlo mejora los resultados para todas las personas Svedin and Bälter (2016).\n\n11.2.1 Falla productiva y privilegio\nAlgunos trabajos recientes han explorado la falla productiva: deliberadamente se les da a estudiantes problemas que no pueden ser resueltos con el conocimiento que tienen, por lo que deben explorar y adquirir información nueva para poder avanzar Kapur (2016). La falla productiva recuerda superficialmente al mantra del sector tecnológico “fracasa rápido, fracasa con frecuencia” pero este último es más un indicador de privilegio que de comprensión. Las personas solo pueden darse el lujo de celebrar el fracaso si es seguro que tendrán una oportunidad de volver a intentarlo; muchos de tus estudiantes, y muchas personas de grupos marginados o desfavorecidos, no pueden estar seguros/as de esto, y asumir que la falla es una opción es una buena manera de desmotivarlos/as.\n\n\n11.2.2 Síndrome del impostor/a\nEl síndrome del impostor/a es la creencia de que tus logros son producto de la casualidad o la suerte y viene con el miedo de que alguien finalmente se dará cuenta. Es muy común entre personas triunfadoras que realizan un trabajo visible públicamente, pero afecta de manera desproporcionada a miembros de grupos subrepresentados: como se discutió en la Section 8.1, Wilcox and Lionelle (2018) encontró que las estudiantes mujeres expuestas previamente a la computación superaron a sus compañeros en todas las áreas en los cursos de introducción a la programación pero constantemente tenían menos confianza en sus habilidades, en parte porque la sociedad sigue señalando en maneras sutiles y no tan sutiles que realmente no pertenecen al mundo de la computación.\nLas aulas tradicionales pueden alimentar al síndrome del impostor/a. Las tareas escolares se realizan con frecuencia de manera individual o en grupos pequeños, pero los resultados se comparten y critican públicamente. Como resultado, raramente vemos cómo el resto lucha por resolver y terminar su trabajo, lo que puede alimentar la creencia de que la tarea es fácil para todas las otras personas. Las personas que pertenencen a grupos subrepresentados que ya sienten una presión adicional para demostrar su valía pueden ser particularmente afectadas.\nLa iniciativa Ada (Ada Initiative) ha creado unas [guías][impostor-syndrome] para luchar con tu propio síndrome del impostor/a, que incluyen:\n\nHabla del problema con personas de tu confianza.\n\nCuando escuchas de otras personas que el síndrome del impostor/a es un problema común, se vuelve más difícil creer que tus sentimientos de fraude son reales.\n\nVe a una sesión en persona sobre el síndrome del impostor/a.\n\nNo hay nada como estar en un salón lleno de personas que respetas y descubrir que el 90% de ellas tienen síndrome del impostor/a.\n\nCuida tus palabras, porque influyen tu forma de pensar.\n\nDecir cosas como, “No soy experto/a en esto, pero…” resta valor del conocimiento que realmente posees.\n\nEnseña a otras personas de tu campo.\n\nGanarás confianza en tu propio conocimiento y habilidad y ayudarás a otros a evitar parte del síndrome del impostor/a en multitudes.\n\nHaz preguntas.\n\nHacer preguntas puede ser intimidante si piensas que debes saber la respuesta, pero obtener respuestas elimina la prolongada agonía de la incertidumbre y el miedo al fracaso.\n\nConstruye alianzas.\n\nTranquiliza y fortalece a tus amistades, quienes te reconfortan y fortalecen. (y si no lo hacen, tal vez quieras pensar en conseguir amistades nuevas…)\n\nSé dueño/a de tus logros.\n\nSigue registrando y revisando activamente lo que has hecho, lo que has construido, y los éxitos que has tenido.\n\n\nComo docente, puedes ayudar a las personas con su síndrome del impostor/a compartiendo relatos de errores que has cometido o de cosas que te costaron aprender. Esto le asegura a la clase que está bien encontrar que algunos temas son difíciles. Ser abierto/a con el grupo también genera confianza y les da confianza para hacer preguntas. (La programación en vivo es excelente para esto: como se indicó en la Section 9.1, tus errores tipográficos le muestran a tu clase que eres un ser humano.) Las evaluaciones formativas frecuentes también ayudan, en particular si tus estudiantes te ven ajustando tanto lo que enseñas como tu velocidad en base a sus resultados.\n\n\n11.2.3 Mentalidad y amenaza de estereotipo\nCarol Dweck y otros han estudiado las diferencias de la mentalidad fija y la mentalidad de crecimiento en resultados de aprendizaje. Si la gente cree que la competencia en alguna área es intrínseca (es decir, que tienes “el gen” para ella o no), a todos/as les va peor, incluyendo a quienes supuestamente están en ventaja. La razón es que si a alguien no le va bien al principio, asume que les falta esa aptitud, lo que predispone su rendimiento en el futuro. Por otro lado, si la gente cree que una habilidad se aprende y se puede mejorar, en promedio, les irá mejor.\n[Se cuestiona][growth-mindset-critique] que la mentalidad del crecimiento ha sido sobredimensionada, o que traducir las investigaciones al respecto a la práctica es mucho más difícil de lo que sus defensores más entusiastas han insinuado Sisk et al. (2018). Sin embargo, sí parece que los/las estudiantes de un nivel socioeconómico bajo o que están en riesgo académico podrían beneficiarse de las intervenciones de mentalidad de crecimiento.\nOtro efecto discutido ampliamente es la amenaza de estereotipo Steele (2011). Recordar a las personas de estereotipos negativos, incluso en formas sutiles, puede hacerlas sentirse ansiosas por el riesgo de confirmar esos estereotipos, lo que a su vez puede reducir su rendimiento. Otra vez, hay preocupación sobre [la replicabilidad de los estudios claves][stereotype-threat-critique], y el problema se complica aún más por el hecho de que el término se ha utilizado de muchas formas Shapiro and Neuberg (2007), pero nadie argumentaría que mencionar estereotipos en clase ayudaría a los/las estudiantes."
  },
  {
    "objectID": "motivation.html#sec-motivation-accessibility",
    "href": "motivation.html#sec-motivation-accessibility",
    "title": "11  Motivación y desmotivación",
    "section": "11.3 Accesibilidad",
    "text": "11.3 Accesibilidad\nColocar las lecciones y los ejercicios fuera del alcance de alguien es tan desmotivador como parece, y es muy fácil hacerlo sin darse cuenta. Por ejemplo, las primeras lecciones de programación en línea que escribí tenían una transcripción de la narración al lado de las diapositivas, pero no incluían el código fuente: eso estaba en capturas de pantalla de diapositivas de PowerPoint. Alguien utilizando un [lector de pantalla][screen-reader-es] podía entonces oír lo que se decía sobre el programa, pero no sabía qué era realmente el programa. No siempre es factible adaptarse a las necesidades de cada estudiante, pero agregar títulos de descripción a las imágenes y hacer que los controles de navegación sean accesible a personas que no pueden usar el mouse puede hacer una gran diferencia.\n\n11.3.1 Rampas en las veredas\nHacer que el material sea accesible ayuda a todas las personas, no solamente a las personas con dificultades. [Las rampas][rampa]—los pequeños planos inclinados que unen una acera a la calle— fueron creados originalmente para facilitar el movimiento de personas con discapacidad física, pero resultaron ser igual de útiles para personas con cochecitos y carritos de supermercado. De forma similar, subtitular imágenes no solamente ayuda a las personas con discapacidad visual: también hace que las imágenes sean más fáciles de encontrar e indexar para los motores de búsqueda.\n\nEl primer paso y el más importante para hacer lecciones accesibles es involucrar a las personas con discapacidades en el proceso de toma de decisiones: el eslogan [nihil de nobis, sine nobis][nihil-de-nobis-sine-nobis] (literalmente, “nada sobre nosotros sin nosotros”) precede a los derechos de accesibilidad, pero siempre es un punto adecuado de partida. Algunas recomendaciones específicas son:\n\nDescubre lo que debes hacer.\n\nCada uno de [estos afiches][uk-gov-accessibility-es] ofrece lo que debe y no debe hacerse para personas con autismo, usuarios/as de lectores de pantalla, y personas con baja visión, discapacidades físicas o motoras, ejercicios de escucha y dislexia.\n\nNo hagas todo a la vez.\n\nLas mejoras descriptas en el punto anterior pueden parecer bastante abrumadoras, así que haz un cambio a la vez.\n\nPrimero haz las cosas fáciles.\n\nEl tamaño de fuente, usar un micrófono de clip para que las personas te puedan oír más fácilmente, y revisar tu selección de colores, son buenos puntos de partida.\n\nRevisa qué tan bien lo estás haciendo.\n\nSitios como [WebAIM][webaim] permiten que revises qué tan accesibles son tus materiales en línea para usuarios/as con discapacidad visual.\n\n\nCoombs (2012),Burgstahler (2015) son buenas guías de diseño visual para la accesibilidad. Sus recomendaciones incluyen:\n\nAsigna formato a tus documentos con encabezados reales y otros puntos de referencias\n\nen vez de simplemente cambiar los tamaños y estilos de fuente.\n\nEvita usar solamente el color para transmitir significado en texto o gráficos.\n\nEn su lugar, use el color en combinación con diferentes patrones de rayado cruzado (que también hace que el material sea comprensible cuando se imprime en blanco y negro).\n\nElimina elementos innecesarios\n\nen lugar de hacerlos invisibles, porque los lectores de pantalla los leerán igualmente.\n\nPermite el propio-ritmo y la repetición\n\npara las personas con problemas de lectura o audición.\n\nIncluye narración de la acción de pantalla en los videos\n\n(y habla mientras escribes cuando programas en vivo).\n\n\n\n11.3.2 Cucharas\nEn el 2003, Christine Miserandino comenzó a usar las [cucharas][spoons] como una forma de explicar cómo es vivir con una enfermedad crónica. Las personas sanas comienzan cada día con una cantidad ilimitada de cucharas, pero aquellas con lupus u otras condiciones debilitantes solo tienen unas pocas, y cada cosa que hacen les cuesta una. ¿Levantarse de la cama? Esa es una cuchara. ¿Preparar una comida? Esa es otra cuchara, y pronto se te acaban.\n\nNo puedes ni siquiera ponerte la ropa cuando estás enfermo/a… si ese día mis manos duelen, los botones están fuera de discusión. Si tengo moretones, necesito usar mangas largas, y si tengo fiebre necesito un abrigo para mantenerme abrigado/a, y así sucesivamente. Si se me cae el cabello necesito pasar más tiempo para lucir presentable, y luego tienes que tomar en cuenta otros 5 minutos por sentirme mal de que te tomó 2 horas hacer todo esto.\n\nComo [Elizabeth Patitsas ha argumentado][patitsas-essay-spoons], las personas que tienen muchas cucharas pueden acumular más, pero las personas cuya cantidad es limitada pueden tener dificultades para salir adelante. Al diseñar clases y ejercicios, recuerda que algunos/as de tus estudiantes pueden tener obstáculos físicos o mentales que no son obvios. En caso de duda, pregunta: es casi seguro que tengan más experiencia con lo que funciona y lo que no que cualquier otra persona."
  },
  {
    "objectID": "motivation.html#sec-motivation-inclusivity",
    "href": "motivation.html#sec-motivation-inclusivity",
    "title": "11  Motivación y desmotivación",
    "section": "11.4 Inclusión",
    "text": "11.4 Inclusión\nLa inclusión es una política para incluir a las personas que de otro modo pueden quedar excluidas o marginadas. En la computación, requiere hacer un esfuerzo positivo para tratar mejor y generar un ambiente amigable y seguro para las mujeres, grupos raciales o étnicos subrepresentados, personas con diversas orientaciones sexuales, ancianos/as, personas con dificultades físicas, personas que estuvieron encarceladas, los/las desfavorecidos/as económicamente, y todas las demás personas que no encajen en el grupo demográfico de hombres blancos/asiáticos prósperos de Silicon Valley. ?fig-motivation-women-in-cs (de [NPR][npr]) ilustra gráficamente los efectos de la cultura excluyente hacia las mujeres en la computación.\n{#fig-motivation-women-in-cs fig-alt = ““}\nLee (2017) es una guía breve y práctica de cómo hacer esto con referencias a la literatura de investigación. Las prácticas que describe ayudan a estudiantes que pertenecen a uno o más grupos marginados o excluidos, pero también ayudan a motivar a todas las demás personas. Están redactadas en términos de cursos a largo plazo, pero muchas pueden ser aplicadas en talleres y otros ambientes free-range:\n\nPide a tus estudiantes que te envíen un correo electrónico antes del taller\n\npara explicar cómo creen que el entrenamiento puede ayudar a que logren sus metas.\n\nRevisa tus notas\n\npara, por ejemplo, asegurarte de que sean libres de pronombres y marcas de género e incluyan nombres diversos culturalmente.\n\nEnfatiza que lo que importa es la velocidad a la que están aprendiendo,\n\nno las ventajas o desventajas que tenían cuando comenzaron.\n\nFomenta la programación en pareja,\n\npero demuéstralo primero para que los/las estudiantes entiendan las funciones de quien conduce y quien navega.\n\nMitiga activamente el comportamiento que puede resultar intimidante para algunos/as estudiantes\n\npor ejemplo el uso de jerga o “preguntas” que se hacen para mostrar conocimiento.\n\n\nUna forma de apoyar a estudiantes de grupos marginados es que las personas se inscriban en los talleres en grupos en lugar de individualmente. De esa manera, todas las personas de la sala saben por adelantado que estarán con personas en las que confían, lo que aumenta la probabilidad de que realmente vengan. También ayuda después del taller: si las personas vienen con sus amistades o colegas, pueden trabajar en conjunto para utilizar lo que aprendieron.\nLo más fundamental es que quienes diseñen lecciones consideren la situación completa de cada persona. Por ejemplo, DiSalvo et al. (2014) encontró que el 65% de los hombres afroamericanos en un programa de prueba de juegos estudiaron computación, en parte porque el aspecto de juego del programa era algo que sus compañeros respetaban. Lachney (2018) exploró dos estrategias generales para crear contenido inclusivo y los riesgos asociados con ellas:\n\n{Representación comunitaria}\n\nresalta las identidades sociales, las historias y las redes comunitarias de los/las estudiantes utilizando mentores/as extracurriculares o modelos a seguir de sus vecindarios, o actividades que utilizan narrativas e historias comunitarias como base para un proyecto de computación. El riesgo más grande de este enfoque es la poca profundidad, p.ej. utilizar computadoras para construir presentaciones con diapositivas en lugar de hacer cualquier actividad real de computación.\n\n{Integración computacional}\n\nincorpora ideas de la comunidad de los/las estudiantes, tales como reproducir diseños de gráficos de pueblos originarios en un ambiente de programación visual. El riesgo más grande aquí es la apropiación cultural, p.ej. utilizar prácticas sin reconocer los orígenes.\n\n\nEn caso de duda, pregunta a tus estudiantes e integrantes de la comunidad qué creen que deberías hacer. Volvemos a esto en el Chapter 14.\n\n11.4.1 El Código de Conducta como accesibilidad\nDijimos en la Section 10.1 que las clases deberían hacer cumplir un Código de Conducta como el del Chapter 20. Esta es una forma de accesibilidad: mientras que los subtítulos hacen que el video sea accesible a personas con discapacidades auditivas, un Código de Conducta hace que las lecciones sean accesibles a personas que de otro modo serían marginadas.\n\n\n11.4.2 Pasando el modelo del déficit\nDependiendo a quién le creas, solo entre el 12 y 18% de las personas que obtienen un título en ciencias de la computación son mujeres. Esta cifra es menos de la mitad del porcentaje observado a mediados de la década de 1980 (Figure 11.2, de Roberts (2017)). Los países occidentales son los únicos que tienen un porcentaje tan bajo de mujeres en computación; las mujeres siguen siendo a menudo entre el 30 y el 40% de las estudiantes de ciencias de la computación en el resto del mundo Galpin (2002),Varma and Kapur (2015).\n\n\n\nFigure 11.2: Títulos otorgados y matrícula femenina\n\n\nDado que es poco probable que las mujeres hayan cambiado drásticamente en los últimos 30 años, tenemos que buscar causas estructurales para comprender qué salió mal y cómo solucionarlo. Una explicación es la manera en que las computadoras domésticas se comercializaron como “juguetes para niños” a partir de la década de 1980 Margolis and Fisher (2003); otra es la manera en la que los departamentos de ciencias de la computación respondieron al crecimiento explosivo de la matrícula en la década de 1980 y nuevamente en la de 2000 cambiando los requisitos de admisión Roberts (2017). Ninguno de estos factores puede parecer dramático para las personas que se ven afectadas por ellos, pero actúan como el goteo constante del agua sobre una piedra: a medida que pasa el tiempo, erosionan la motivación y, con ella, la participación.\nEl primer paso y el más importante para solucionar esto es dejar de pensar en términos de una “tubería con fugas” D. I. Miller and Wai (2015). Más generalmente, tenemos que superar el modelo deficitario, es decir, dejar de pensar que las personas que son parte de un grupo subrepresentado carecen de algo y por lo tanto son responsables de no salir adelante. Creer esto coloca la carga en las personas que ya tienen que hacer un trabajo adicional para superar las desigualdades estructurales y (no por casualidad) da a quienes se benefician de los acuerdos actuales una excusa para no mirarse con mucho cuidado.\n\n11.4.3 Reescritura de la historia\nAbbate (2012) describe las carreras y logros de las mujeres que le dieron forma a la historia temprana de la computación, pero que con demasiada frecuencia han sido eliminadas de ella; Ensmenger (2003),Ensmenger (2012) describe cómo la programación pasó de ser una profesión femenina a una masculina en la década de 1960, mientras Hicks (2018) examina cómo Gran Bretaña perdió su dominio inicial en la computación discriminando sistemáticamente en contra de sus trabajadores más cualificados: las mujeres. (Mira Miltner (2018) para obtener una reseña de los tres libros.) Hablar de esta historia hace que algunos hombres en computación se sientan incómodos; en mi opinión, esa es una buena razón para hacerlo.\n\nLa misoginia en los videojuegos, el uso de “encaje cultural” en la contratación para excusar prejuicios conscientes o inconscientes, una cultura de silencio en torno al acoso y la creciente desigualdad en la sociedad que produce privilegios preparatorios (Section 10.5) no son culpa de una persona en particular, pero solucionarlos es responsabilidad de todos/as. Como docente, tienes más poder que la mayoría; [este taller][frameshift-workshop] tiene excelentes consejos prácticos sobre cómo ser un/a buen/a aliado/a, y su consejo probablemente es más importante que cualquier cosa que te enseñe este libro sobre la enseñanza."
  },
  {
    "objectID": "motivation.html#sec-motivation-exercises",
    "href": "motivation.html#sec-motivation-exercises",
    "title": "11  Motivación y desmotivación",
    "section": "11.5 Ejercicios",
    "text": "11.5 Ejercicios\n\n11.5.1 Tareas auténticas (parejas/15’)\n\nEn pares, enumeren media docena de cosas que hicieron esta semana que utilizan las habilidades que enseñan.\nColoquen sus artículos en una cuadrícula de 2x2 de “tiempo para dominar” y “utilidad”. ¿En qué están de acuerdo y en qué en desacuerdo?\n\n\n\n11.5.2 Necesidades básicas (toda la clase/10’)\nPaloma Medina identifica [seis necesidades básicas][biceps] para las personas en el trabajo: pertenencia, progreso, elección, igualdad, previsibilidad y significado. Luego de leer las descripciones de cada una, ordénalas de mayor a menor importancia para ti personalmente, luego compara la clasificación con tus pares. ¿Cómo crees que tu clasificación se compara con la de tus estudiantes?\n\n\n11.5.3 Implementa una estrategia para la inclusión (individual/5’)\nEscoje una actividad o cambio en práctica de Lee (2017) en la que te gustaría trabajar. Pon un recordatorio en tu calendario de aquí a tres meses para preguntarte si has hecho algo al respecto.\n\n\n11.5.4 Después de los hechos (piensa-empareja-comparte/20’)\n\nPiensa en un curso que has tomado en el pasado e identifica una cosa que el/la docente hizo que te desmotivó. Toma notas de lo que se pudo hacer después para corregir la situación.\nEmparéjate con tu vecino y compara las historias, y luego agrega tus comentarios a un conjunto de notas compartidas por toda la clase.\nRevisa los comentarios en el conjunto de notas como grupo. Resalta y analiza algunas de las cosas que podrían haberse hecho de manera diferente.\n¿Crees que hacer esto te ayudará a manejar situaciones parecidas en el futuro?\n\n\n\n11.5.5 Camina la ruta (toda la clase/15’)\nEncuentra el punto de partida de transporte público más cercano a tu edificio y camina desde allí a tu oficina y luego al baño más cercano, toma notas de las cosas que crees que serían difíciles para alguien con dificultades de movilidad. Ahora toma prestada una silla de ruedas. ¿Qué tan completa fue tu lista de ejercicios? ¿Y te diste cuenta que la primera oración de este ejercicio asumía que podías caminar?\n\n\n11.5.6 ¿Quién decide? (toda la clase/15’)\nEn Littky (2004), Kenneth Wesson escribió, “Si los/las niños/as de los barrios marginales pobres superaran sistemáticamente a los/as niños/as de hogares suburbanos ricos en las pruebas estandarizadas, ¿alguien es lo suficientemente ingenuo como para creer que todavía insistiríamos en usar estas pruebas como indicadores de éxito?” Lee [este artículo][nytimes-undiscovered] de Cameron Cottrill y luego describe un ejemplo de tu propia experiencia de evaluaciones “objetivas” que reforzaron el status quo.\n\n\n11.5.7 Estereotipos comunes (parejas/10’)\nAlgunas personas todavía dicen “Es tan simple que incluso tu abuela podría usarlo.” En parejas, enumeren otras dos o tres frases que refuerzan estereotipos sobre la computación.\n\n\n11.5.8 No ser un idiota (individual/15’)\n[Este artículo corto][open-source-not-jerk] de Gary Bernhardt reescribe un mensaje innecesariamente hostil para ser menos grosero. Utilizándolo como un modelo, encuentra algo desagradable en [Stack Overflow][stack-overflow] o en algún otro foro público de discusión. y reescríbelo para que sea más inclusivo.\n\n\n11.5.9 Salvar las apariencias (individual/10’)\n¿Alguno de tus posibles estudiantes se avergonzaría de admitir que todavía no saben algunas de las cosas que quieres enseñar? Si es así, ¿cómo puedes ayudarles a salvar las apariencias?\n\n\n11.5.10 Juguetes infantiles (toda la clase/15’)\nCutts et al. (2017) encuestó a usuarios/as adultos/as de computadoras acerca de sus actividades infantiles. Encontró que la correlación más fuerte entre la confianza y el uso de la computadora se basaba en leer por uno/a mismo/a y jugar con juguetes de construcción como Lego que no tienen partes móviles. Se realiza una encuesta a la clase para observar en qué otras actividades participan las personas. Luego, se buscan estas actividades en línea. ¿Qué tan sesgadas con respecto al género son las descripciones y las propagandas para ellas? ¿Qué efecto crees que tiene esto?\n\n\n11.5.11 Accesibilidad de la lección (parejas/30’)\nEn parejas, escojan una lección cuyos materiales están disponibles en línea e independientemente asignen un puntaje a esos materiales de acuerdo a lo que se debe y no se debe hacer según [estos afiches][uk-gov-accessibility-es]. ¿En qué estuvieron de acuerdo tu pareja y tú? ¿En qué estuvieron en desacuerdo? ¿Qué tan bien fue la lección para cada una de las seis categorías de usuarios/as?\n\n\n11.5.12 Siguiendo el ciclo (grupos pequeños/15’)\nCommunity Organizations (2018) sigue un patrón deprimentemente común en que las buenas intenciones se ven socavadas por el liderazgo de una organización que no está dispuesta a cambiar realmente. Trabajando en grupos de 4–6 personas, escriban textos o correos electrónicos breves que imaginas que cada una de las partes involucradas enviaría a la otra en cada etapa de este ciclo.\n\n\n11.5.13 ¿Qué es lo peor que podría pasar? (grupos pequeños/5’)\nA través de los años, se me ha incendiado un proyector, una estudiante ha tenido un parto y una pelea entre estudiantes estalló en clase. Me he caído del escenario dos veces, me he quedado dormido en una de mis propias charlas, y he hecho muchos chistes que fracasaron. En grupos pequeños, hagan una lista de las peores cosas que les han pasado mientras enseñaban, y luego compártanla con la clase. Guarda la lista para recordarte más tarde que no importa qué tan mala sea la clase: al menos nada de eso sucedió."
  },
  {
    "objectID": "motivation.html#sec-motivation-review",
    "href": "motivation.html#sec-motivation-review",
    "title": "11  Motivación y desmotivación",
    "section": "11.6 Revisa",
    "text": "11.6 Revisa\n{fig-alt = ““}\n\n\n\n\nAbbate, Janet. 2012. Recoding Gender: Women’s Changing Participation in Computing. MIT Press.\n\n\nAlbright, Sarah Dahlby, Titus H. Klinge, and Samuel A. Rebelsky. 2018. “A Functional Approach to Data Science in CS1.” In 2018 Technical Symposium on Computer Science Education (SIGCSE’18). Association for Computing Machinery (ACM). https://doi.org/10.1145/3159450.3159550.\n\n\nAmbrose, Susan A., Michael W. Bridges, Michele DiPietro, Marsha C. Lovett, and Marie K. Norman. 2010. How Learning Works: Seven Research-Based Principles for Smart Teaching. Jossey-Bass.\n\n\nBarker, Lecia, Christopher Lynnly Hovey, and Leisa D. Thompson. 2014. “Results of a Large-Scale, Multi-Institutional Study of Undergraduate Retention in Computing.” In 2014 Frontiers in Education Conference (FIE’14). Institute of Electrical; Electronics Engineers (IEEE). https://doi.org/10.1109/fie.2014.7044267.\n\n\nBiggs, John, and Catherine Tang. 2011. Teaching for Quality Learning at University. Open University Press.\n\n\nBrophy, Jere E. 1983. “Research on the Self-Fulfilling Prophecy and Teacher Expectations.” Journal of Educational Psychology 75 (5): 631–61. https://doi.org/10.1037/0022-0663.75.5.631.\n\n\nBurgstahler, Sheryl E. 2015. Universal Design in Higher Education: From Principles to Practice. Second. Harvard Education Press.\n\n\nCheryan, Sapna, Victoria C. Plaut, Paul G. Davies, and Claude M. Steele. 2009. “Ambient Belonging: How Stereotypical Cues Impact Gender Participation in Computer Science.” Journal of Personality and Social Psychology 97 (6): 1045–60. https://doi.org/10.1037/a0016239.\n\n\nCommunity Organizations, Center for. 2018. “The ‘Problem’ Woman of Colour in the Workplace.” https://coco-net.org/problem-woman-colour-nonprofit-organizations/.\n\n\nCoombs, Norman. 2012. Making Online Teaching Accessible. Jossey-Bass.\n\n\nCovington, Martin V., Linda M. von Hoene, and Dominic J. Voge. 2017. Life Beyond Grades: Designing College Courses to Promote Intrinsic Motivation. Cambridge University Press.\n\n\nCutts, Quintin, Charles Riedesel, Elizabeth Patitsas, Elizabeth Cole, Peter Donaldson, Bedour Alshaigy, Mirela Gutica, Arto Hellas, Edurne Larraza-Mendiluze, and Robert McCartney. 2017. “Early Developmental Activities and Computing Proficiency.” In 2017 Conference on Innovation and Technology in Computer Science Education (ITiCSE’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3174781.3174789.\n\n\nDiSalvo, Betsy, Mark Guzdial, Amy Bruckman, and Tom McKlin. 2014. “Saving Face While Geeking Out: Video Game Testing as a Justification for Learning Computer Science.” Journal of the Learning Sciences 23 (3): 272–315. https://doi.org/10.1080/10508406.2014.893434.\n\n\nEnsmenger, Nathan L. 2003. “Letting the ‘Computer Boys’ Take over: Technology and the Politics of Organizational Transformation.” International Review of Social History 48 (S11): 153–80. https://doi.org/10.1017/s0020859003001305.\n\n\n———. 2012. The Computer Boys Take over: Computers, Programmers, and the Politics of Technical Expertise. MIT Press.\n\n\nFord, Denae, Justin Smith, Philip J. Guo, and Chris Parnin. 2016. “Paradise Unplugged: Identifying Barriers for Female Participation on Stack Overflow.” In 2016 International Symposium on Foundations of Software Engineering (FSE’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2950290.2950331.\n\n\nGalpin, Vashti. 2002. “Women in Computing Around the World.” ACM SIGCSE Bulletin 34 (2). https://doi.org/10.1145/543812.543839.\n\n\nGaucher, Danielle, Justin Friesen, and Aaron C. Kay. 2011. “Evidence That Gendered Wording in Job Advertisements Exists and Sustains Gender Inequality.” Journal of Personality and Social Psychology 101 (1): 109–28. https://doi.org/10.1037/a0022530.\n\n\nGuzdial, Mark. 2013. “Exploring Hypotheses about Media Computation.” In 2013 International Computing Education Research Conference (ICER’13). Association for Computing Machinery (ACM). https://doi.org/10.1145/2493394.2493397.\n\n\nHendrick, Carl, and Robin Macpherson. 2017. What Does This Look Like in the Classroom?: Bridging the Gap Between Research and Practice. John Catt Educational.\n\n\nHicks, Marie. 2018. Programmed Inequality: How Britain Discarded Women Technologists and Lost Its Edge in Computing. MIT Press.\n\n\nKapur, Manu. 2016. “Examining Productive Failure, Productive Success, Unproductive Failure, and Unproductive Success in Learning.” Educational Psychologist 51 (2): 289–99. https://doi.org/10.1080/00461520.2016.1155457.\n\n\nLachney, Michael. 2018. “Computational Communities: African-American Cultural Capital in Computer Science Education.” Computer Science Education, February, 1–22. https://doi.org/10.1080/08993408.2018.1429062.\n\n\nLang, James M. 2013. Cheating Lessons: Learning from Academic Dishonesty. Harvard University Press.\n\n\nLee, Cynthia Bailey. 2013. “Experience Report: CS1 in MATLAB for Non-Majors, with Media Computation and Peer Instruction.” In 2013 Technical Symposium on Computer Science Education (SIGCSE’13). Association for Computing Machinery (ACM). https://doi.org/10.1145/2445196.2445214.\n\n\n———. 2017. “What Can i Do Today to Create a More Inclusive Community in CS?” http://bit.ly/2oynmSH.\n\n\nLittky, Dennis. 2004. The Big Picture: Education Is Everyone’s Business. Association for Supervision & Curriculum Development (ASCD).\n\n\nMargolis, Jane, and Allan Fisher. 2003. Unlocking the Clubhouse: Women in Computing. MIT Press.\n\n\nMeysenburg, Mark, Tessa Durham Brooks, Raychelle Burks, Erin Doyle, and Timothy Frey. 2018. “DIVAS: Outreach to the Natural Sciences Through Image Processing.” In 2018 Technical Symposium on Computer Science Education (SIGCSE’18). Association for Computing Machinery (ACM). https://doi.org/10.1145/3159450.3159537.\n\n\nMiller, David I., and Jonathan Wai. 2015. “The Bachelor’s to Ph.d. STEM Pipeline No Longer Leaks More Women Than Men: A 30-Year Analysis.” Frontiers in Psychology 6 (February). https://doi.org/10.3389/fpsyg.2015.00037.\n\n\nMiller, Michelle D. 2016. Minds Online: Teaching Effectively with Technology. Harvard University Press.\n\n\nMiltner, Kate M. 2018. “Girls Who Coded: Gender in Twentieth Century U.K. And U.S. Computing.” Science, Technology, & Human Values, May. https://doi.org/10.1177/0162243918770287.\n\n\nPatitsas, Elizabeth, Jesse Berlin, Michelle Craig, and Steve Easterbrook. 2016. “Evidence That Computer Science Grades Are Not Bimodal.” In 2016 International Computing Education Research Conference (ICER’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2960310.2960312.\n\n\nRitz, Anna. 2018. “Programming the Central Dogma: An Integrated Unit on Computer Science and Molecular Biology Concepts.” In 2018 Technical Symposium on Computer Science Education (SIGCSE’18). Association for Computing Machinery (ACM). https://doi.org/10.1145/3159450.3159590.\n\n\nRoberts, Eric. 2017. “Assessing and Responding to the Growth of Computer Science Undergraduate Enrollments: Annotated Findings.” http://cs.stanford.edu/people/eroberts/ResourcesForTheCSCapacityCrisis/files/AnnotatedFindings.pptx.\n\n\nShapiro, Jenessa R., and Steven L. Neuberg. 2007. “From Stereotype Threat to Stereotype Threats: Implications of a Multi-Threat Framework for Causes, Moderators, Mediators, Consequences, and Interventions.” Personality and Social Psychology Review 11 (2): 107–30. https://doi.org/10.1177/1088868306294790.\n\n\nSisk, Victoria F., Alexander P. Burgoyne, Jingze Sun, Jennifer L. Butler, and Brooke N. Macnamara. 2018. “To What Extent and Under Which Circumstances Are Growth Mind-Sets Important to Academic Achievement? Two Meta-Analyses.” Psychological Science, March, 095679761773970. https://doi.org/10.1177/0956797617739704.\n\n\nSteele, Claude M. 2011. Whistling Vivaldi: How Stereotypes Affect Us and What We Can Do. W. W. Norton & Company.\n\n\nSvedin, Maria, and Olle Bälter. 2016. “Gender Neutrality Improved Completion Rate for All.” Computer Science Education 26 (2-3): 192–207. https://doi.org/10.1080/08993408.2016.1231469.\n\n\nVarma, Roli, and Deepak Kapur. 2015. “Decoding Femininity in Computer Science in India.” Communications of the ACM 58 (5): 56–62. https://doi.org/10.1145/2663339.\n\n\nWilcox, Chris, and Albert Lionelle. 2018. “Quantifying the Benefits of Prior Programming Experience in an Introductory Computer Science Course.” In 2018 Technical Symposium on Computer Science Education (SIGCSE’18). Association for Computing Machinery (ACM). https://doi.org/10.1145/3159450.3159480.\n\n\nWilkinson, Richard, and Kate Pickett. 2011. The Spirit Level: Why Greater Equality Makes Societies Stronger. Bloomsbury Press.\n\n\nWlodkowski, Raymond J., and Margery B. Ginsberg. 2017. Enhancing Adult Motivation to Learn: A Comprehensive Guide for Teaching All Adults. Jossey-Bass."
  },
  {
    "objectID": "online.html#sec-online-moocs",
    "href": "online.html#sec-online-moocs",
    "title": "12  Enseñar en línea",
    "section": "12.1 Cursos masivos en línea",
    "text": "12.1 Cursos masivos en línea\nEl esfuerzo de más alto perfil para reinventar la educación usando internet son los cursos masivos en línea (en inglés Massive Open Online Course), o MOOC. El término fue inventado por David Cormier en 2008 para describir un curso organizado por George Siemens y Stephen Downes. Ese curso se basó en una visión conectivista del aprendizaje, que sostiene que el conocimiento se distribuye y el aprendizaje es el proceso de encontrar, crear y podar conexiones.\nEl término “MOOC” fue rápidamente cooptado por las/los creadores de cursos semejantes al modelo de disertación de un aula tradicional: una/un docente como el centro definiendo los objetivos y estudiantes que se conciben como recipientes o replicadores de conocimientos. Las clases que utilizan el modelo conectivista original se suelen denominar “cMOOCs,” mientras que las clases que centralizan el control se llaman “xMOOCs.” (A este último también se le llama a veces un ” MESS ” (la palabra mess significa lío en inglés), por las siglas Sabio Masivamente Realzado en el Escenario (Massively Enhanced Sage on the Stage, en inglés.))\nCinco años atrás, no se podía caminar por los campus de las universidades más grandes sin escuchar a alguien hablando sobre cómo los MOOCs revolucionarían la educación, la destruirían o posiblemente ambas cosas. Los MOOCs le darían a las/los estudiantes acceso a un gran abanico de cursos y les permitirían trabajar cuando les fuera conveniente en lugar de acomodar su aprendizaje a la agenda de otra persona.\nPero los MOOCs no han sido tan efectivos como predijeron sus defensoras/es más entusiastas Ubell (2017). Una razón es que el contenido grabado es ineficaz para muchas personas principiantes porque no puede aclarar los conceptos erróneos individuales (Chapter 3): si no entienden una explicación la primera vez, por lo general, no hay una explicación alternativa para ofrecer. Otra razón es que la evaluación automatizada necesaria para lograr lo “masivo” en este tipo de cursos solo funciona bien en los niveles más bajos de la taxonomía de Bloom (Section 7.2). Ahora también está claro que las/los estudiantes tienen que soportar mucho más la carga de mantenerse concentrados en un MOOC, que la impersonalidad de trabajar en línea puede fomentar un comportamiento descortés y desmotivar a las personas y que “disponible para todos” significa en realidad “disponible para todo el mundo lo suficientemente pudiente como para tener internet de alta velocidad y mucho tiempo libre”.\nMargaryan, Bianco, and Littlejohn (2015) examinaron 76 MOOCs sobre varios temas y descubrieron que, si bien la organización y presentación del material fue buena, la calidad del diseño de las lecciones fue deficiente. Con temáticas más afines a las de este libro, Kim and Ko (2017) estudió treinta tutoriales en línea populares sobre programación y descubrió que en gran medida enseñaban el mismo contenido de la misma manera: de abajo hacia arriba, comenzando con conceptos de programación de bajo nivel y avanzando hacia metas de alto nivel. La mayoría de los tutoriales requería que las/los estudiantes escribieran programas y proporcionaron algún tipo de retroalimentación inmediata, pero esta retroalimentación fue típicamente muy superficial. Pocos tutoriales explicaban cuándo y por qué los conceptos son útiles (es decir, no mostraban cómo transferir conocimientos), o proporcionaban orientación para errores comunes. Más allá de una diferenciación rudimentaria basada en la edad, ninguna lección se personalizaba en base a la experiencia previa en programación o en los objetivos de las/los estudiantes.\n\n12.1.1 Aprendizaje personalizado\nPocos términos han sido utilizados y abusados de tantas formas como aprendizaje personalizado. Para la mayoría de las/los defensores de la educación con tecnología, significa ajustar dinámicamente el ritmo de las lecciones en función del rendimiento de cada estudiante, de modo que si alguien responde varias preguntas seguidas correctamente, la computadora omitirá algunas de las siguientes preguntas.\nHacer esto puede producir [modestas mejoras][personalized-learning-effects], pero hay aproximaciones más convenientes. Por ejemplo, si muchas/os estudiantes encuentran difícil un tema en particular, la/el docente puede preparar múltiples explicaciones alternativas de ese punto en lugar de acelerar un solo camino. De esa manera, si una explicación no resuena, otras están disponibles. Sin embargo, esto requiere mucho más trabajo de diseño por parte de quien enseña, lo que puede ser la razón por la que no ha demostrado su popularidad. Incluso si funciona, es probable que los efectos sean mucho menores de lo que creen algunas/os de sus defensores. En la escuela primaria, puede haber diferencias de 0.1 a 0.15 desviaciones estándar en el desempeño de fin de año debido a buenas/os docentes. Chetty, Friedman, and Rockoff (2014) (ver [este artículo][teacher-quality-article] para un breve resumen). No es realista creer que esto puede ser superado en el corto plazo por cualquier tipo de automatización.\n\nEntonces, ¿cómo se debe usar internet para enseñar y aprender habilidades tecnológicas? Sus pros y contras son:\n\nLas/los estudiantes pueden acceder a más lecciones y más rápido que nunca antes\n\nObviamente, suponiendo que un motor de búsqueda considere que vale la pena indexar esas lecciones, que su proveedor de servicios de internet y el gobierno no lo bloqueen, y que la verdad no se ahogue en un mar de desinformación que agota la atención.\n\nLas/los estudiantes pueden acceder a mejores lecciones que nunca antes,\n\na menos que estén siendo dirigidas/os hacia material de segunda categoría, para redistribuir la riqueza de las personas que no tienen, a las personas que sí tienen McMillan Cottom (2017). También vale la pena recordar que la escasez aumenta el valor percibido, por lo que a medida que la educación en línea sea más barata se convertirá cada vez más en lo que todo el mundo quiere para las/los hijas/os de otra persona.\n\nLas/los estudiantes también pueden acceder a muchos más contactos que nunca.\n\nPero solo si esas/os estudiantes realmente tienen acceso a la tecnología requerida, pueden permitirse usarla y no son excluidas/os por acoso o marginadas/os por no ajustarse a las normas sociales del grupo que lleve la voz cantante. En la práctica, la mayoría de las/los usuarias/os de MOOC proviene de entornos seguros y de buen nivel adquisitivo Hansen and Reich (2015).\n\nLas/los docentes pueden obtener información mucho más detallada sobre cómo trabajan sus estudiantes.\n\nSiempre que las/los estudiantes hagan cosas que sean susceptibles de análisis automatizado a gran escala y no se opongan a la vigilancia en el aula o no sean lo suficientemente poderosas/os como para que sus objeciones importen.\n\n\nMargaryan, Bianco, and Littlejohn (2015),Miller (2016),Nilson and Goodson (2017) describen formas de acentuar los aspectos positivos en la lista anterior evitando los negativos:\n\nHaz que los plazos sean frecuentes y bien publicitados,\n\ny aplícalos para que tus estudiantes entren en ritmo de trabajo.\n\nManten al mínimo las actividades sincronizadas de todas las clases, como conferencias en vivo\n\npara que las personas no se pierdan cosas debido a conflictos de agenda.\n\nHaz que tus estudiantes contribuyan al conocimiento colectivo,\n\n\nej. tomar notas compartidas (Section 10.7), servir como escribas en el aula o contribuir con problemas a conjuntos de problemas compartidos (?sec-individual-peer).\n\n\nAnima o solicita a tus estudiantes que realicen parte de su trabajo en grupos pequeños,\n\nlos cuales sí tienen actividades sincrónicas en línea, como por ejemplo una discusión semanal. Esto ayuda a las/los estudiantes a mantener su compromiso y motivación sin crear demasiados problemas de agenda. (Ver el Chapter 23 para obtener algunos consejos sobre cómo hacer que estas discusiones sean justas y productivas.)\n\nCrea, publicita y haz cumplir un código de conducta.\n\npara que toda la clase pueda participar en los debates en línea (Section 10.1).\n\nUtiliza muchas lecciones breves en lugar de pocos fragmentos largos al estilo conferencias\n\npara minimizar la carga cognitiva y brindar muchas oportunidades para la evaluación formativa. Esto también ayuda con el mantenimiento de las lecciones: si todos tus videos son cortos, simplemente puedes volver a grabar cualquiera que necesite actualización, lo que a menudo es más barato que intentar arreglar videos largos.\n\nUsa videos para fomentar la participación en lugar de instruir.\n\nDejando de lado las discapacidades (Section 11.3), las/los estudiantes pueden leer más rápido de lo que tú puedes hablar. La excepción a esta regla es que el video es la mejor manera de enseñar verbos (acciones): grabaciones breves de tu pantalla que muestran cómo usar un editor, cómo recorrer el código en un depurador, y así sucesivamente, son más eficaces que las capturas de pantalla con texto.\n\nIdentifica y aclara tempranamente conceptos erróneos.\n\nSi los datos muestran que las/los estudiantes tienen dificultades con algunas partes de una lección, crea explicaciones alternativas de esas partes y ejercicios adicionales para que practiquen.\n\n\nTodo esto tiene que ser implementado de alguna manera, lo que significa que necesitas alguna clase de plataforma de enseñanza. Puedes utilizar tanto un sistema de gestión del aprendizaje (learning management system, en inglés) todo en uno como [Moodle][moodle] o [Sakai][sakai], o generar uno por tu cuenta usando [Discord][discord], [Telegram][telegram] o [Zulip][zulip-chat] para el chat, [Google Hangouts][google-hangouts] o [appear.in][appear-in] para videoconferencias, y [WordPress][wordpress], [Google Docs][google-docs], [HackMD][hackmd], [Etherpad](https://pad.riseup.net/) o cualquier número de sistemas wiki para la autoría colaborativa. Si recién estás comenzando, elige lo que sea más fácil de configurar y administrar y lo que sea más familiar para tus estudiantes. Si te enfrentas a una elección, la segunda consideración es más importante que la primera: esperas que las personas aprendan mucho en tu clase, por lo que es justo que tú aprendas a manejar las herramientas con las que se sientan más cómodas.\nMontar una plataforma para el aprendizaje es necesario pero no suficiente: si quieres que tus estudiantes prosperen, necesitas crear una comunidad. Cientos de libros y presentaciones hablan sobre cómo hacer esto, pero la mayoría se basan en las experiencias personales de sus autores. Kraut and Resnick (2016) es una excepción bienvenida: si bien es anterior al descenso acelerado de Twitter y Facebook hacia el abuso y la desinformación, la mayoría de sus hallazgos siguen siendo relevantes. Fogel (2005) también está lleno de consejos útiles sobre comunidades de práctica a las que las/los estudiantes pueden desear unirse; exploramos algunas de sus ideas en el Chapter 14.\n\n12.1.2 Libertad para, libertad de\nEl ensayo de 1958 de Isaiah Berlin [“Dos conceptos de libertad”][berlin-essay-liberty] hizo una distinción entre [libertad positiva][libertad-positiva], que es la capacidad de hacer algo, y [libertad negativa][libertad-negativa], que es la ausencia de reglas que digan que no puedes hacerlo. Las discusiones en línea generalmente ofrecen libertad negativa (nadie te impide decir lo que piensas), pero no libertad positiva (muchas personas no pueden ser escuchadas, en realidad). Una forma de abordar esto es introducir algún tipo de limitación, como permitir que cada estudiante contribuya con un mensaje por hilo de discusión al día. Hacer esto les da a aquellas/los que tienen algo que decir la oportunidad de decirlo, mientras deja espacio para que otras/os también digan cosas.\n\nOtra preocupación que se tiene sobre la enseñanza en línea es la posibilidad de que las/los estudiantes hagan trampa. La deshonestidad del día a día no es más común en las clases en línea que en los entornos presenciales Beck (2014), pero la tentación de que otra persona escriba el examen final y la dificultad de comprobar si esto realmente sucedió, es una de las razones por las que las instituciones educativas se han mostrado reacias a ofrecer créditos para las clases solamente en línea. Es posible supervisar el examen a distancia, pero antes de invertir en esto, lee Lang (2013): explora por qué y cómo las/los estudiantes hacen trampa, y cómo se pueden estructurar los cursos para evitar darles una razón para hacerlo."
  },
  {
    "objectID": "online.html#sec-online-video",
    "href": "online.html#sec-online-video",
    "title": "12  Enseñar en línea",
    "section": "12.2 Video",
    "text": "12.2 Video\nUna característica destacada de la mayoría de los MOOC es el uso de clases grabadas en video. Estos videos pueden ser efectivos: como se menciona en el Chapter 9, una técnica de enseñanza llamada instrucción directa basada en la entrega precisa de un guión bien diseñado ha demostrado repetidamente su eficacia Stockard et al. (2018). Sin embargo, los guiones para la instrucción directa deben diseñarse, probarse y perfeccionarse con mucho cuidado, lo que es una inversión que muchos MOOC no han querido o no han podido hacer. Hacer un pequeño cambio en una página web o en una plataforma de diapositivas solo toma unos minutos; hacer incluso un pequeño cambio en un video corto lleva una hora o más, por lo que el costo de actuar en base a los comentarios puede ser insoportable para la/el docente. Incluso cuando están bien hechos, los videos deben combinarse con actividades para que sean beneficiosos: Koedinger et al. (2015) estimaron que “… hacer tareas extra tiene un beneficio sobre el aprendizaje … seis veces mayor que mirar o leer extra.”\nSi estás enseñando programación, puedes usar grabaciones de pantallas en lugar de diapositivas, ya que ofrecen algunas de las mismas ventajas que la programación en vivo (Section 9.1). Chen and Rabb (2009) ofrecen consejos útiles para crear y criticar grabaciones de pantallas y otros videos; la Figure 12.1 (de Chen and Rabb (2009)) reproduce los patrones que presenta el papel y las relaciones entre ellos. (También es un buen ejemplo de mapa conceptual (Section 4.1).)\n\n\n\nFigure 12.1: Patrones para grabaciones de pantalla\n\n\nEntonces, ¿qué hace que un video instructivo sea efectivo? Guo, Kim, and Rubin (2014) midieron el compromiso y participación, observando cuánto tiempo las/los estudiantes vieron los videos de MOOCs, y encontraron que:\n\nLos videos más cortos son mucho más atractivos; los videos no deben durar más de seis minutos.\nUna cabeza parlante superpuesta a las diapositivas es más atractiva que solo una voz en off.\nLos videos que se sienten personales pueden ser más atractivos que las grabaciones de estudio de alta calidad, por lo que filmar en entornos informales podría funcionar mejor que filmar en un estudio profesional por un costo menor.\nDibujar en una tableta es más atractivo que las diapositivas de PowerPoint o las grabaciones de pantalla con código, aunque no está claro si esto se debe al movimiento y la informalidad o porque reduce la cantidad de texto en la pantalla.\nEstá bien que las/los docentes hablen bastante rápido siempre que estén entusiasmados.\n\nUna cosa que Guo, Kim, and Rubin (2014) no abordaron es el problema del huevo y la gallina: ¿las/los estudiantes encuentran cierto tipo de video atractivo porque están acostumbrados? Entonces, ¿producir más videos de ese tipo aumentará la participación simplemente debido a un ciclo de retroalimentación? ¿O estas recomendaciones reflejan algunos procesos cognitivos más profundos? Otra cosa que este documento no analizó son los resultados del aprendizaje: sabemos que las evaluaciones de las/los estudiantes de los cursos no se correlacionan con el aprendizaje Stark and Freishtat (2014),Uttl, White, and Gonzalez (2017), y si bien es plausible que las/los estudiantes no aprendan de las cosas que no ven, queda por demostrar que aprenden de las cosas que ven.\n\n12.2.1 Estoy un poco incómoda/o\nLa investigación de Guo, Kim, and Rubin (2014) fue aprobada por una junta universitaria de ética en investigación, las/los estudiantes cuyos hábitos de visualización fueron monitoreados casi con certeza hicieron clic en “aceptar” en un acuerdo de términos de servicio en algún momento, y me alegra tener estos nuevos conocimientos. Por otra parte, la palabra “privacidad” no apareció en el título o en el resumen de ninguna de las decenas de artículos o posters en la conferencia donde se presentaron estos resultados. Si pudiera elegir, preferiría no saber qué tanto compromiso tenían los estudiantes en vez de fomentar la vigilancia ubicua en el aula.\n\nHay muchas formas diferentes de grabar lecciones en video; para saber cuáles son más eficaces, Muller et al. (2007) asignó 364 estudiantes de física de primer año a los tratamientos multimedia en línea de la Primera y Segunda Ley de Newton en uno de cuatro estilos:\n\nExposición:\n\npresentación concisa al estilo de una clase magistral.\n\nExposición extendida:\n\nigual que la anterior, pero con información adicional interesante.\n\nRefutación:\n\nExposición con conceptos erróneos comunes explícitamente declarados y refutados.\n\nDiálogo:\n\nDiscusión estudiante-docente del mismo material que en la Refutación.\n\n\nRefutación y diálogo produjeron los mayores beneficios de aprendizaje en comparación con la exposición; las/los estudiantes con pocos conocimientos previos se beneficiaron más y quienes tenían un alto conocimiento previo no estuvieron en desventaja. De nuevo, esto destaca la importancia de abordar directamente los conceptos erróneos de tus estudiantes. No solo le digas a las personas lo que es: diles también qué no es y por qué no."
  },
  {
    "objectID": "online.html#sec-online-hybrid",
    "href": "online.html#sec-online-hybrid",
    "title": "12  Enseñar en línea",
    "section": "12.3 Modelos híbridos",
    "text": "12.3 Modelos híbridos\nLa enseñanza totalmente automatizada es solo una forma de utilizar la web en la enseñanza. En la práctica, casi todo el aprendizaje en las sociedades prósperas tiene actualmente un componente en línea, ya sea oficialmente o a través de canales de comunicación persona a persona y búsquedas encubiertas de respuestas a preguntas sobre la tarea. La combinación de instrucción en vivo y automatizada permite a las/los docentes usar las fortalezas de ambas modalidades. En un aula tradicional, la/el docente puede responder preguntas de inmediato, pero sus estudiantes necesitan días o semanas para recibir comentarios sobre sus ejercicios de programación. En línea, una/un estudiante puede tardar más en obtener una respuesta, pero puede obtener comentarios inmediatos sobre el código que programó (y al menos para ese tipo de ejercicios podemos calificar automáticamente).\nOtra diferencia es que los ejercicios en línea deben ser más detallados porque tienen que anticiparse a las preguntas de las/los estudiantes. Encuentro que las lecciones en persona comienzan con la intersección de lo que todo el curso necesita saber y se expanden a pedido, mientras que las lecciones en línea deben incluir la unión de lo que todas las personas necesitan saber porque la/el docente no está ahí para hacer esta expansión.\nEn realidad, la distinción entre en línea y presencial ahora es menos importante para la mayoría de las personas que la distinción entre sincrónico y asincrónico: ¿docentes y estudiantes interactúan en tiempo real? ¿O su comunicación se extiende e intercala con otras actividades? En persona casi siempre la interacción será sincrónica, pero en línea es, cada vez más, una mezcla de ambas:\n\nCreo que nuestras/os nietas/os probablemente considerarán la distinción que hacemos entre lo que llamamos el mundo real y lo que ellas/os consideran simplemente el mundo como la cosa más pintoresca e incomprensible sobre nosotras/os. — William Gibson\n\nLa implementación más popular de este futuro combinado hoy es el aula invertida, en el que las/los estudiantes ven lecciones grabadas por su cuenta y el tiempo de la clase se utiliza para discutir y resolver conjuntos de problemas. Descripto originalmente en King (1993), la idea se popularizó como parte de la instrucción entre pares (Section 10.2) y se ha estudiado intensamente durante la última década. Por ejemplo, Campbell, Horton, and Craig (2016) comparó a estudiantes que tomaron una clase de introducción a la informática en línea con quienes la tomaron en un aula invertida. La finalización de ejercicios de práctica (sin marcar) se correlacionó con los puntajes de los exámenes para ambos grupos, pero la tasa de finalización de los ejercicios de ensayo por parte de las/los estudiantes en línea fue significativamente más baja que las tasas de asistencia a clase para las/los estudiantes presenciales.\nPero si hay grabaciones disponibles, ¿seguirán asistiendo las/los estudiantes a las clases para hacer ejercicios de práctica? Nordmann et al. (2017) examinó el impacto de las grabaciones en la asistencia a las clases y al desempeño de las/los estudiantes en diferentes niveles. En la mayoría de los casos, el estudio no encontró consecuencias negativas al hecho de hacer disponibles las grabaciones; en particular, las/los estudiantes no se saltaron las clases cuando las grabaciones estaban disponibles (al menos, no más de lo que suelen faltar). Los beneficios de proporcionar grabaciones fueron mayores para las/los estudiantes al principio de sus carreras, pero disminuyeron a medida que las/los estudiantes avanzaban.\nOtro modelo híbrido es aquel que lleva al aula la vida en línea. Tomar notas en conjunto es un primer paso (Section 10.7); agrupando respuestas a preguntas de opción múltiple en tiempo real con herramientas como [Pear Deck][peardeck] y [Socrative][socrative]. Si la clase es pequeña — digamos, de una docena a quince personas — y si hay posibilidades de conectarse a internet en el aula, también puedes hacer que todas las personas del curso se unan a una videoconferencia para que puedan compartir la pantalla con la/el docente. Esto les permite mostrar su trabajo (o sus problemas) a toda la clase. sin tener que conectar su computadora portátil al proyector. Las/los estudiantes también pueden usar el chat en la videollamada para hacer preguntas para la/el docente; en mi experiencia, la mayoría de las preguntas serán respondidas por sus compañeras/os, y la/el docente puede encargarse del resto cuando lleguen a un momento natural de descanso. Este modelo ayuda a nivelar “la cancha´´ para las/los estudiantes remotos: si alguien no puede asistir a clase por razones de salud o por compromisos familiares o laborales, todavía puede participar casi en pie de igualdad si todo el curso está acostumbrado a colaborar en línea y en tiempo real.\nTambién he impartido clases utilizando instrucción remota en tiempo real, modalidad en la que las/los estudiantes comparten la ubicación en 2 a 6 sitios diferentes, con ayudantes presentes, mientras yo enseñaba vía videoconferencia (Section 21.1). Esto escala bien, ahorra en gastos de viaje, y permite el uso de técnicas como la programación en parejas (Section 10.6). Lo que no funciona, es tener un grupo en persona y uno o más grupos de forma remota: aún con la mejor voluntad del mundo, quienes participan en persona reciben mucha más atención."
  },
  {
    "objectID": "online.html#sec-online-engagement",
    "href": "online.html#sec-online-engagement",
    "title": "12  Enseñar en línea",
    "section": "12.4 Participación en línea",
    "text": "12.4 Participación en línea\nNuthall (2007) descubrió que hay tres mundos superpuestos en cada aula: lo público (lo que dice y hace la/el docente), lo social (interacciones entre pares, entre estudiantes), y lo privado (dentro de la cabeza de cada estudiante). De estos, el más importante suele ser el social: las/los estudiantes captan tanto a través de las señales de sus compañeras/os como de la instrucción formal.\nPor lo tanto, la clave para hacer efectiva cualquier forma de enseñanza en línea es facilitar las interacciones entre pares. Para ayudar a lograr esto, los cursos casi siempre tienen algún tipo de foro de discusión. Miller (2016) observaron que las/los estudiantes los utilizan de formas muy diferentes:\n\n…es muy poco probable que las personas procrastinadoras participen en foros de discusión en línea y esta participación reducida, a su vez, se correlaciona con peores calificaciones. Una posible explicación de esta correlación es que las personas procrastinadoras son especialmente reacias a unirse una vez que la discusión está en curso, quizás porque les preocupa ser percibidas como recién llegadas en una conversación establecida. Esta aversión a participar tarde provoca que se pierdan los beneficios importantes de aprendizaje y motivación de la interacción entre pares.\n\nVellukunnel et al. (2017) analiza publicaciones en foros de discusión de 395 estudiantes de CS2 en dos universidades dividiéndo a las publicaciones en cuatro categorías:\n\nActiva:\n\nsolicitud de ayuda que no muestra razonamiento y no muestra lo que la/el estudiante ya ha intentado o ya sabe.\n\nConstructiva:\n\nrefleja el razonamiento de las/los estudiantes o intenta construir una solución al problema.\n\nLogística:\n\npolíticas del curso, horarios, envío de tareas, etc.\n\nAclaración de contenido:\n\nsolicitud de información adicional que no revela el propio pensamiento de la estudiante.\n\n\nDescubrieron que dominaban las preguntas constructivas y logísticas, y que las preguntas constructivas se correlacionaban con las calificaciones. También encontraron que las/los estudiantes rara vez hacen más de una pregunta activa en un curso, y que estas no se correlacionan con las calificaciones. Si bien esto es decepcionante, saberlo ayuda a establecer las expectativas de las docentes: si bien es posible que deseemos que nuestros cursos tengan comunidades en línea animadas, tenemos que aceptar que la mayoría no lo hará, o que la mayor parte de la discusión de estudiante a estudiante se llevará a cabo a través de canales que ya están usando y en los que no podemos ser parte.\n\n12.4.1 Cooperación\nGulley (2004) describe un concurso de programación en línea que combina colaboración y competencia. El concurso comienza cuando se publica una descripción del problema junto con una solución correcta pero ineficiente. Cuando acaba, la persona ganadora es quien ha hecho la mayor contribución global para mejorar el rendimiento de la solución global. Todas las presentaciones están abiertas, para que los participantes puedan ver el trabajo de los demás y tomar prestadas ideas entre ellos. Como muestra el trabajo, la solución final es casi siempre un híbrido que utiliza ideas de muchas personas.\nBattestilli, Awasthi, and Cao (2018) describió una variación a pequeña escala de esto en una clase de introducción a la informática. En la etapa uno, cada estudiante presentó un proyecto de programación de forma individual. En la etapa dos, las/los estudiantes trabajaron en parejas para crear una solución mejorada al mismo problema. La evaluación indica que los proyectos de dos etapas tienden a mejorar la comprensión de las/los estudiantes y que ellas/os disfrutaron del proceso. Proyectos como estos no solo mejoran la participación: también brindan a las/los estudiantes más experiencia sobre la base del código de otra persona.\n\nLa discusión no es la única forma de lograr que las/los estudiantes trabajen juntos en línea. Paré and Joordens (2008) y Kulkarni et al. (2013) reportan experimentos en el que las/los estudiantes califican el trabajo del resto del curso y las calificaciones que asignan se comparan con las calificaciones otorgadas por docentes auxiliares ya graduadas/os u otras personas expertas. Ambos trabajos encontraron que las calificaciones asignadas por las/los estudiantes coincidían con las calificaciones asignadas por las personas expertas con tanta frecuencia como las calificaciones de las personas expertas coincidían entre sí. También encontraron que unos sencillos pasos (como filtrar respuestas obviamente no consideradas o estructurar rúbricas) disminuyeron aún más el desacuerdo. Como se discute en la ?sec-individual-peer, la colusión y el sesgo no son factores importantes en la calificación de pares.\n\n12.4.2 Confía, pero educa\nLa forma más común de medir la validez de los comentarios es comparar las calificaciones de las/los estudiantes con las calificaciones de personas expertas, pero la revisión por pares calibrada (?sec-individual-peer) puede ser igualmente efectiva.\nAntes de pedirles a estudiantes que califiquen el trabajo del resto del curso, se les pide que califiquen muestras y se comparan sus resultados con las calificaciones asignadas por la/el docente. Una vez que ambas calificaciones se alinean, se permite que cada estudiante comience a calificar a sus pares. Dado que la lectura crítica es una forma eficaz de aprender, este resultado puede apuntar a un futuro en el que las/los estudiantes utilicen la tecnología para emitir juicios, en lugar de ser juzgadas/os por la tecnología.\n\nUna técnica que definitivamente vamos a ver más en los próximos años es la transmisión en línea de sesiones de programación en vivo Raj et al. (2018),Haaranen (2017). Esto tiene la mayoría de los beneficios discutidos en la Section 9.1, y cuando se combina con la toma de notas colaborativa (Section 10.7) puede ser una aproximación cercana a una experiencia en clase.\nSi pensamos en unos años más, IJsselsteijn et al. (2000) identificaron cuatro niveles de presencia en línea, desde el realismo (no podemos notar la diferencia), la inmersión (nos olvidamos de la diferencia), la participación (tenemos compromiso con la clase, pero somos conscientes de la diferencia) a la suspensión de la incredulidad (estamos haciendo la mayor parte del trabajo). La diferencia crucial que distinguen es la presencia física, como la sensación de estar en algún lugar, y la presencia social, que es la sensación de estar con las demás personas. Esta última es más importante en la mayoría de situaciones de aprendizaje y, otra vez, podemos fomentarla utilizando la tecnología diaria de las/los estudiantes en el aula. Por ejemplo, Deb et al. (2018) descubrieron que la retroalimentación en tiempo real sobre los ejercicios en clase, usando los dispositivos móviles de las/los estudiantes, mejoró la retención de conceptos y la participación de las/los estudiantes, al tiempo que redujo las tasas de fracaso.\nLa enseñanza en línea y asincrónica aún está en pañales. Los MOOCs centralizados pueden llegar a ser un callejón evolutivo sin salida, pero aún quedan muchos otros modelos prometedores por explorar. En particular, Brookfield and Preskill (2016) describe cincuenta formas en que los grupos pueden discutir cosas de manera productiva, y solo unas pocas son ampliamente conocidas o implementadas en línea. Si vamos a donde están tecnológicamente nuestras/os estudiantes, en lugar de pedirles que vengan a nosotros, podemos terminar aprendiendo tanto como ellas/los."
  },
  {
    "objectID": "online.html#sec-online-exercises",
    "href": "online.html#sec-online-exercises",
    "title": "12  Enseñar en línea",
    "section": "12.5 Ejercicios",
    "text": "12.5 Ejercicios\n\n12.5.1 Video bidireccional (parejas/10’)\nGrábate en un video de 2 a 3 minutos haciendo algo, luego intercambia el video con tu colega para que cada una/o pueda ver el video de la otra persona a una velocidad 4x. ¿Qué tan fácil es seguir lo que está pasando? ¿Te perdiste de algo?\n\n\n12.5.2 Puntos de vista (individual/10’)\nDe acuerdo a Iriberri and Leroy (2009), diferentes disciplinas se centran en diferentes factores que afectan el éxito o no de las comunidades en línea:\n\nNegocios:\n\nfidelización de clientes, gestión de marca, motivación extrínseca.\n\nPsicología:\n\nsentido de comunidad, motivación intrínseca.\n\nSociología:\n\nidentidad de grupo, comunidad física, capital social, acción colectiva.\n\nCiencias de la computación:\n\nimplementación tecnológica.\n\n\n¿Cuál de estas perspectivas se corresponde más con la tuya? ¿Con cuál estás menos alineada/o?\n\n\n12.5.3 Ayudar o dañar (grupos pequeños/30’)\n[Este artículo de Susan Dynarski en New York Times][online-courses-harming-students] explica cómo y por qué las escuelas asignan a cursos en línea a aquellas/os estudiantes que no aprueban los cursos presenciales, y cómo esto configura las condiciones para un fracaso aún mayor. Lee el artículo y luego:\n\nEn grupos pequeños, piensen en dos o tres cosas que las escuelas podrían hacer para compensar estos efectos negativos y crear estimaciones aproximadas de sus costos por estudiante.\nCompara tus sugerencias y costos con los de otros grupos. ¿Cuántos puestos de enseñanza a tiempo completo crees que deberían eliminarse con el fin de liberar recursos para implementar las ideas más populares para un centenar de estudiantes?\nFinalmente, discutan en toda la clase: ¿creen que sería un beneficio real para las/los estudiantes o no?\n\nLos ejercicios de presupuestación como este son una buena manera de saber quién se toma en serio el cambio educativo. Todas las personas pueden pensar en cosas que les gustaría hacer; pero muchas menos están dispuestas a hablar sobre las compensaciones necesarias para que suceda el cambio.\n\n\n\n\nBattestilli, Lina, Apeksha Awasthi, and Yingjun Cao. 2018. “Two-Stage Programming Projects: Individual Work Followed by Peer Collaboration.” In 2018 Technical Symposium on Computer Science Education (SIGCSE’18). Association for Computing Machinery (ACM). https://doi.org/10.1145/3159450.3159486.\n\n\nBeck, Victoria. 2014. “Testing a Model to Predict Online Cheating—Much Ado about Nothing.” Active Learning in Higher Education 15 (1): 65–75. https://doi.org/10.1177/1469787413514646.\n\n\nBrookfield, Stephen D., and Stephen Preskill. 2016. The Discussion Book: 50 Great Ways to Get People Talking. Jossey-Bass.\n\n\nCampbell, Jennifer, Diane Horton, and Michelle Craig. 2016. “Factors for Success in Online CS1.” In 2016 Conference on Innovation and Technology in Computer Science Education (ITiCSE’16). Association for Computing Machinery (ACM). https://doi.org/10.1145/2899415.2899457.\n\n\nChen, Nicholas, and Maurice Rabb. 2009. “A Pattern Language for Screencasting.” In 2009 Conference on Pattern Languages of Programs (PLoP’09). Association for Computing Machinery (ACM). https://doi.org/10.1145/1943226.1943234.\n\n\nChetty, Raj, John N. Friedman, and Jonah E. Rockoff. 2014. “Measuring the Impacts of Teachers II: Teacher Value-Added and Student Outcomes in Adulthood.” American Economic Review 104 (9): 2633–79. https://doi.org/10.1257/aer.104.9.2633.\n\n\nDeb, Debzani, Muztaba Fuad, James Etim, and Clay Gloster. 2018. “MRS: Automated Assessment of Interactive Classroom Exercises.” In 2018 Technical Symposium on Computer Science Education (SIGCSE’18). Association for Computing Machinery (ACM). https://doi.org/10.1145/3159450.3159607.\n\n\nFogel, Karl. 2005. Producing Open Source Software: How to Run a Successful Free Software Project. O’Reilly Media.\n\n\nGulley, Ned. 2004. “In Praise of Tweaking.” Interactions 11 (3): 18. https://doi.org/10.1145/986253.986264.\n\n\nGuo, Philip J., Juho Kim, and Rob Rubin. 2014. “How Video Production Affects Student Engagement.” In 2014 Conference on Learning @ Scale (L@S’14). Association for Computing Machinery (ACM). https://doi.org/10.1145/2556325.2566239.\n\n\nHaaranen, Lassi. 2017. “Programming as a Performance - Live-Streaming and Its Implications for Computer Science Education.” In 2017 Conference on Innovation and Technology in Computer Science Education (ITiCSE’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3059009.3059035.\n\n\nHansen, John D., and Justin Reich. 2015. “Democratizing Education? Examining Access and Usage Patterns in Massive Open Online Courses.” Science 350 (6265): 1245–48. https://doi.org/10.1126/science.aab3782.\n\n\nIJsselsteijn, Wijnand A., Huib de Ridder, Jonathan Freeman, and Steve E. Avons. 2000. “Presence: Concept, Determinants, and Measurement.” In 2000 Conference on Human Vision and Electronic Imaging, edited by Bernice E. Rogowitz and Thrasyvoulos N. Pappas. SPIE. https://doi.org/10.1117/12.387188.\n\n\nIriberri, Alicia, and Gondy Leroy. 2009. “A Life-Cycle Perspective on Online Community Success.” ACM Computing Surveys 41 (2): 1–29. https://doi.org/10.1145/1459352.1459356.\n\n\nKim, Ada S., and Amy J. Ko. 2017. “A Pedagogical Analysis of Online Coding Tutorials.” In 2017 Technical Symposium on Computer Science Education (SIGCSE’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3017680.3017728.\n\n\nKing, Alison. 1993. “From Sage on the Stage to Guide on the Side.” College Teaching 41 (1): 30–35. https://doi.org/10.1080/87567555.1993.9926781.\n\n\nKoedinger, Kenneth R., Jihee Kim, Julianna Zhuxin Jia, Elizabeth A. McLaughlin, and Norman L. Bier. 2015. “Learning Is Not a Spectator Sport: Doing Is Better Than Watching for Learning from a MOOC.” In 2015 Conference on Learning @ Scale (L@S’15). Association for Computing Machinery (ACM). https://doi.org/10.1145/2724660.2724681.\n\n\nKraut, Robert E., and Paul Resnick. 2016. Building Successful Online Communities: Evidence-Based Social Design. MIT Press.\n\n\nKulkarni, Chinmay, Koh Pang Wei, Huy Le, Daniel Chia, Kathryn Papadopoulos, Justin Cheng, Daphne Koller, and Scott R. Klemmer. 2013. “Peer and Self Assessment in Massive Online Classes.” ACM Transactions on Computer-Human Interaction 20 (6): 1–31. https://doi.org/10.1145/2505057.\n\n\nLang, James M. 2013. Cheating Lessons: Learning from Academic Dishonesty. Harvard University Press.\n\n\nMargaryan, Anoush, Manuela Bianco, and Allison Littlejohn. 2015. “Instructional Quality of Massive Open Online Courses (MOOCs).” Computers & Education 80 (January): 77–83. https://doi.org/10.1016/j.compedu.2014.08.005.\n\n\nMcMillan Cottom, Tressie. 2017. Lower Ed: The Troubling Rise of for-Profit Colleges in the New Economy. The New Press.\n\n\nMiller, Michelle D. 2016. Minds Online: Teaching Effectively with Technology. Harvard University Press.\n\n\nMuller, Derek A., James Bewes, Manjula D. Sharma, and Peter Reimann. 2007. “Saying the Wrong Thing: Improving Learning with Multimedia by Including Misconceptions.” Journal of Computer Assisted Learning 24 (2): 144–55. https://doi.org/10.1111/j.1365-2729.2007.00248.x.\n\n\nNilson, Linda B., and Ludwika A. Goodson. 2017. Online Teaching at Its Best: Merging Instructional Design with Teaching and Learning Research. Jossey-Bass.\n\n\nNordmann, Emily, Colin Calder, Paul Bishop, Amy Irwin, and Darren Comber. 2017. “Turn up, Tune in, Don’t Drop Out: The Relationship Between Lecture Attendance, Use of Lecture Recordings, and Achievement at Different Levels of Study.” https://psyarxiv.com/fd3yj. https://doi.org/10.17605/OSF.IO/FD3YJ.\n\n\nNuthall, Graham. 2007. The Hidden Lives of Learners. NZCER Press.\n\n\nParé, Dwayne E., and Steve Joordens. 2008. “Peering into Large Lectures: Examining Peer and Expert Mark Agreement Using peerScholar, an Online Peer Assessment Tool.” Journal of Computer Assisted Learning 24 (6): 526–40. https://doi.org/10.1111/j.1365-2729.2008.00290.x.\n\n\nRaj, Adalbert Gerald Soosai, Jignesh M. Patel, Richard Halverson, and Erica Rosenfeld Halverson. 2018. “Role of Live-Coding in Learning Introductory Programming.” In 2018 Koli Calling International Conference on Computing Education Research (Koli’18). https://doi.org/10.1145/3279720.3279725.\n\n\nStark, Philip, and Richard Freishtat. 2014. “An Evaluation of Course Evaluations.” ScienceOpen Research, September. https://doi.org/10.14293/s2199-1006.1.sor-edu.aofrqa.v1.\n\n\nStockard, Jean, Timothy W. Wood, Cristy Coughlin, and Caitlin Rasplica Khoury. 2018. “The Effectiveness of Direct Instruction Curricula: A Meta-Analysis of a Half Century of Research.” Review of Educational Research, January, 003465431775191. https://doi.org/10.3102/0034654317751919.\n\n\nUbell, Robert. 2017. “How the Pioneers of the MOOC Got It Wrong.” http://spectrum.ieee.org/tech-talk/at-work/education/how-the-pioneers-of-the-mooc-got-it-wrong.\n\n\nUttl, Bob, Carmela A. White, and Daniela Wong Gonzalez. 2017. “Meta-Analysis of Faculty’s Teaching Effectiveness: Student Evaluation of Teaching Ratings and Student Learning Are Not Related.” Studies in Educational Evaluation 54 (September): 22–42. https://doi.org/10.1016/j.stueduc.2016.08.007.\n\n\nVellukunnel, Mickey, Philip Buffum, Kristy Elizabeth Boyer, Jeffrey Forbes, Sarah Heckman, and Ketan Mayer-Patel. 2017. “Deconstructing the Discussion Forum: Student Questions and Computer Science Learning.” In 2017 Technical Symposium on Computer Science Education (SIGCSE’17). Association for Computing Machinery (ACM). https://doi.org/10.1145/3017680.3017745.\n\n\nWatters, Audrey. 2014. The Monsters of Education Technology. CreateSpace."
  },
  {
    "objectID": "meetings.html#sec-meetings-marthas-rules",
    "href": "meetings.html#sec-meetings-marthas-rules",
    "title": "23  Reuniones, reuniones, reuniones",
    "section": "23.2 Las reglas de Martha",
    "text": "23.2 Las reglas de Martha\nLas organizaciones de todo el mundo realizan sus reuniones de acuerdo a [Reglas de Orden de Roberto][roberts-rules] (Robert’s Rules of Order en inglés), pero son mucho más formales que lo requerido para proyectos pequeños. Una ligera alternativa conocida como “Las reglas de Martha” puede que sea mucho mejor para la toma de decisiones por consenso Minahan (1986):\n\nAntes de cada reunión cualquiera que lo desee puede patrocinar una propuesta compartiéndola con el grupo. Las propuestas deben ser compartidas al menos 24 horas antes de una reunión para ser consideradas en esa reunión, y deben incluir:\n\nun resumen de una línea;\nel texto completo de la propuesta;\ncualquier información de antecedentes requerida;\npros y contras; y\nposibles alternativas\n\nLas propuestas deberían ser a lo sumo de dos páginas.\nSe establece un quórum en una reunión si la mitad o más de las personas que pueden votar están presentes.\nUna vez que una persona patrocina una propuesta es responsable de ella. El grupo no puede discutir o votar sobre el tema a menos que quien patrocina o a quien se lo haya delegado esté presente. La persona patrocinadora también es responsable de presentar el tema al grupo.\nDespués que la persona patrocinadora presente la propuesta se emite un voto preliminar para la propuesta antes de cualquier discusión:\n\n¿A quién le gusta la propuesta?\n¿A quién le parece razonable la propuesta?\n¿Quién se siente incómodo con la propuesta?\n\nLos votos preliminares se pueden hacer con el pulgar hacia arriba, el pulgar hacia los lados o el pulgar hacia abajo (en persona) o escribiendo +1, 0 o -1 en el chat en línea (en reuniones virtuales).\nSi a todos/as o a la mayoría del grupo le gusta o resulta razonable la propuesta, se pasa inmediatamente a una votación formal sin más discusión.\nSi la mayoría del grupo está disconforme con la propuesta se pospone para que la persona patrocinadora pueda volver a trabajar sobre ella.\nSi parte de los/las participantes se sienten disconformes, se invita a que expresen brevemente sus objeciones. Luego se establece un temporizador para una breve discusión moderada por una persona facilitadora. Después de diez minutos o cuando nadie más tenga algo que agregar (lo que ocurra primero), quien facilita llama a una votación sí-o-no sobre la pregunta: “¿Deberíamos implementar esta decisión aun con las objeciones establecidas?” Si la mayoría vota “sí” la propuesta se implementa. De lo contrario, la propuesta se devuelve a la persona patrocinadora para trabajarla más."
  },
  {
    "objectID": "meetings.html#sec-meetings-online",
    "href": "meetings.html#sec-meetings-online",
    "title": "23  Reuniones, reuniones, reuniones",
    "section": "23.3 Reuniones en línea",
    "text": "23.3 Reuniones en línea\nLa [discusión de Chelsea Troy][troy-remote-meetings] sobre por qué las reuniones en línea son a menudo frustrantes e improductivas rescata un punto importante: en la mayoría de las reuniones en línea la primera persona en hablar durante una pausa toma la palabra. ¿El resultado? “Si tienes algo que quieres decir, tienes que dejar de escuchar a la persona que está hablando actualmente y en lugar de eso, enfocarte en cuándo van a detenerse o terminar, para que puedas saltar sobre ese nanosegundo de silencio y ser quien primero pueda decir algo. El formato… alienta a los/las participantes que deseen contribuir a decir más y escuchar menos.”\nLa solución es chatear (charla en texto) a la par de la videoconferencia donde las personas pueden indicar que quieren hablar. Quien modere entonces selecciona personas de la lista de espera. Si la reunión es grande o argumentativa, mantener a todos silenciados y solo permitir a quien modere liberar el micrófono de quienes participan."
  },
  {
    "objectID": "meetings.html#sec-meetings-post-mortem",
    "href": "meetings.html#sec-meetings-post-mortem",
    "title": "23  Reuniones, reuniones, reuniones",
    "section": "23.6 La autopsia",
    "text": "23.6 La autopsia\nCada proyecto debe terminar con una autopsia en la que los/las participantes reflexionan sobre lo que acaban de lograr y qué podrían mejorar la próxima vez. Su objetivo es no señalar con el dedo a las personas, aunque si eso tiene que suceder, la autopsia es el mejor lugar para ello.\nUna autopsia se realiza como cualquier otra reunión con algunas pautas adicionales Derby and Larsen (2006):\n\nConseguir una persona que modere y que no sea parte del proyecto\n\nni tenga interés en serlo.\n\nReservar una hora y solo una hora.\n\nSegún mi experiencia, nada útil se dice en los primeros diez minutos de la primera autopsia de alguien, dado que las personas son naturalmente un poco tímidas para alabar o condenar su propio trabajo. Igualmente, no se dice nada útil después de la primera hora: si aún sigues hablando, probablemente sea porque una o dos personas tienen cosas que quieren sacarse del pecho en lugar de dar sugerencias para poder mejorar.\n\nRequerir asistencia.\n\nTodas las personas que formaron parte del proyecto deben estar en la sala para la autopsia. Esto es más importante de lo que piensas: las personas que tienen más que aprender de la autopsia en general son menos propensas a presentarse si la reunión es opcional.\n\nConfeccionar dos listas.\n\nCuando estoy moderando pongo los encabezados “Hazlo otra vez” y “Hazlo diferente” en la pizarra, luego pido a cada persona que me dé una respuesta para cada lista, en orden y sin repetir nada que ya se haya dicho.\n\nComentar sobre acciones en lugar de individuos.\n\nPara cuando el proyecto esté terminado es posible que algunas personas ya no sean amigas. No dejes que esto desvíe la reunión: si alguien tiene una queja específica sobre otro/a integrante del equipo, pídele que critique un evento o decisión en particular. “Tiene una mala actitud” no ayuda a nadie a mejorar.\n\nPriorizar las recomendaciones.\n\nUna vez que los pensamientos de todos/as estén al descubierto, ordénalos según importancia para mantenerlos y para cambiarlos. Probablemente solo podrás abordar uno o dos de cada lista en tu próximo proyecto, pero si haces eso cada vez tu vida mejorará rápidamente.\n\n\n&lt;FIXME: parece linda bibliografía: https://www.recurse.com/manual#sub-sec-social-rules&gt;"
  },
  {
    "objectID": "meetings.html#reglas-generales",
    "href": "meetings.html#reglas-generales",
    "title": "23  Reuniones, reuniones, reuniones",
    "section": "23.1 Reglas generales",
    "text": "23.1 Reglas generales\nLas reglas más importantes para hacer que las reuniones sean eficientes no son secretas, pero rara vez se siguen:\n\nDecide si realmente se necesita una reunión.\n\nSi el único propósito es compartir información, envía un breve correo electrónico en su lugar. Recuerda, puedes leer más rápido que lo que cualquiera puede hablar: si alguien tiene datos para que el resto del equipo los asimile, la forma más educada de comunicarlos es escribirlos.\n\nEscribe un temario.\n\nSi a nadie le importa lo suficiente la reunión como para escribir una lista de puntos de lo que se discutirá, la reunión probablemente no se necesita.\n\nIncluye horarios en el temario.\n\nIncluir el tiempo que le dedicarás a cada punto en el temario, puede ayudarte a evitar que los primeros puntos le roben tiempo a los últimos. Tus primeras estimaciones con cualquier grupo nuevo serán tremendamente optimistas, así que revísalas nuevamente para las siguientes reuniones. Sin embargo, no deberías planear una segunda o tercera reunión porque no alcanzó el tiempo, en cambio, trata de averiguar por qué ocupaste tiempo extra y arregla el problema que lo originó.\n\nPrioriza.\n\nCada reunión es un microproyecto, por lo tanto el trabajo debería priorizarse de la misma manera que se hace para otros proyectos: aquello que tendrá alto impacto pero lleva poco tiempo debería realizarse primero, y aquello que tomará mucho tiempo pero tiene bajo impacto debería omitirse.\n\nHaz a una persona responsable de mantener las cosas en movimiento.\n\nUna persona debe tener la tarea de mantener el tratamiento de cada punto en la agenda a tiempo, por ejemplo, llamando la atención a la gente que esté revisando el correo electrónico o de aquellas que están teniendo conversaciones paralelas; pidiendo a quienes están hablando mucho que lleguen al punto e invitando a las personas que no intervienen a expresar su opinión. Esta persona no debería ser quien más hable; en realidad, en una reunión bien armada la persona a cargo hablará menos que el resto.\n\nPide amabilidad.\n\nQue nadie llegue a ser grosero/a, que nadie empiece a divagar. Si alguien se sale del tema, es tanto el derecho como la responsabilidad del moderador/a decir “Discutamos eso en otro momento”.\n\nSin interrupciones.\n\nLos/las participantes deben levantar la mano o poner una nota adhesiva si quieren hablar después. Si la persona que está hablando no los/las percibe, quien modera la reunión debería hacerlo.\n\nSin tecnología.\n\nEn reuniones presenciales, a menos que sea necesario por razones de accesibilidad, insistir amablemente en que todas las personas guarden sus teléfonos, tabletas y computadoras. (p.ej. Por favor, cierren sus aparatos electrónicos).\n\nRegistro de minutas.\n\nAlguna otra persona que no sea quien modere debería tomar notas de forma puntual sobre los fragmentos más importantes de información compartida, todas las decisiones tomadas y todas las tareas que se asignaron a alguna persona.\n\nToma notas.\n\nMientras otras personas están hablando, los/las participantes deberían anotar las preguntas que quieran hacer u observaciones que quieran realizar (te sorprenderás lo inteligente que parecerás cuando llegue tu turno para hablar).\n\nTermina temprano.\n\nSi tu reunión está programada de 10:00 a 11:00, debes intentar terminar a las 10:50 para darle tiempo a las personas a pasar por el baño en su camino a donde vayan luego.\n\n\nTan pronto termina la reunión, envía a todos un correo electrónico con la minuta o publícala en la web:\n\nLa gente que no estuvo en la reunión puede mantenerse al tanto de lo que ocurrió.\n\nUna página web o un mensaje de correo electrónico es una forma mucho más eficiente de ponerse al día que preguntarle a un/a compañero/a de equipo qué te perdiste.\n\nCualquiera puede comprobar lo que realmente se dijo o prometió.\n\nMás de una vez he revisado la minuta de una reunión en la que estuve y pensé: “¿Yo dije eso?” o “Espera un minuto, ¡yo no prometí tenerlo listo para esa fecha!” Accidentalmente o no, muchas veces la gente recordará las cosas de manera diferente; escribirlo da la oportunidad al equipo de corregir errores, lo que puede ahorrar futuros malos entendidos.\n\nLas personas pueden ser responsables en reuniones posteriores.\n\nNo tiene sentido hacer listas de preguntas y puntos de acción si después no los sigues. Si estás utilizando algún tipo de sistema de seguimiento de temas, crea un tema por cada pregunta o tarea justo después de la reunión y actualiza los que se cumplieron, luego comienza cada reunión repasando la lista de esos temas.\n\n\nBrown (2007),Brookfield and Preskill (2016),Rogelberg (2018) tienen muchos consejos para organizar reuniones. Una hora de entrenamiento en cómo moderar es una de las mejores inversiones que harás.\n\n23.1.1 Notas adhesivas y bingo para interrupción\nAlgunas personas están tan acostumbradas al sonido de su propia voz que insistirán en hablar la mitad del tiempo sin importar cuántas personas haya en la habitación. Para evitar esto entrega a cada participante tres notas adhesivas al comienzo de la reunión. Cada vez que hablen tienen que sacar una nota adhesiva. Cuando se queden sin notas no se les permitirá hablar hasta que todos hayan usado al menos una. En ese momento todos recuperan sus tres notas adhesivas. Esto asegura que nadie hable más de tres veces que la persona más callada de la reunión, y cambia completamente la dinámica de la mayoría de los grupos: personas que dejan de intentar ser escuchadas porque siempre son tapadas de repente tienen espacio para contribuir, y aquellas que hablaban con demasiada frecuencia se dan cuenta lo injustos/as que han sido Yo ciertamente lo hice cuando me hicieron vivir esto… .\nOtra técnica es un bingo de interrupción. Dibuja una tabla y etiqueta las filas y columnas con los nombres de los/las participantes. Agrega en la celda apropiada una marca para contar cada vez que alguien interrumpa a otra persona, y toma un momento para compartir los resultados a la mitad de la reunión. En la mayoría de los casos verás que una o dos personas son las que interrumpen siempre, a menudo sin ser conscientes de ello. Eso solo muchas veces es suficiente para detenerlas. Nota que esta técnica está destinada a manejar las interrupciones, no el tiempo de conversación: puede ser apropiado que las personas con más conocimiento de un tema sean las que más hablan de dicho tema en una reunión, pero nunca es apropiado interrumpir repetidamente a las personas.\n\n\n23.1.2 ¿Cuánto cuesta esta reunión?\nUna forma de analizar si vale la pena realizar una reunión es calcular el costo de la misma. Este costo es el resultado del tiempo dedicado por la cantidad de personas y su salario horario. Muchas veces no tendremos acceso a la información del costo horario, pero no tiene que ser precisa, podemos tomar un valor referencial y comparar el costo de realizar la reunión con los resultados y beneficios obtenidos de realizarla."
  },
  {
    "objectID": "meetings.html#ejemplo-de-memo",
    "href": "meetings.html#ejemplo-de-memo",
    "title": "23  Reuniones, reuniones, reuniones",
    "section": "23.7 Ejemplo de memo",
    "text": "23.7 Ejemplo de memo\nEl objetivo del memo es resumir la propuesta para dejar claro a quienes participan sobre lo que se está acordando hacer en la reunión.\nResumen: una o dos frases resumiendo lo que se propone hacer.\nAntecedentes: un párrafo explicando los antecedentes de la propuesta, la justificación de porqué llegamos a esta idea.\nPropuesta: explicación más detallada sobre que se propone hacer.\nPresupuesto, personal y tiempo: cuanto costará, que gente y con qué carga horaria van a participar. Cuanto tiempo lleva realizar la tarea.\nAlternativas: que otras opciones tenemos a esta propuesta, que pros y contras tienen.\n&lt;FIXME: ver si vale la pena agregar el ejemplo de Greg o por ahi proponerlo en un ejercicio&gt;\n&lt;FIXME: ver lo que armamos para Carpentries, si algo puede ser útil para este capítulo&gt;\n&lt;FIXME: chequear si esta explicación mas nueva de Greg tiene material para agregar a este capítulo: https://third-bit.com/2019/06/13/marthas-rules/&gt;\n\n\n\n\nBrookfield, Stephen D., and Stephen Preskill. 2016. The Discussion Book: 50 Great Ways to Get People Talking. Jossey-Bass.\n\n\nBrown, Michael Jacoby. 2007. Building Powerful Community Organizations: A Personal Guide to Creating Groups That Can Solve Problems and Change the World. Long Haul Press.\n\n\nDerby, Esther, and Diana Larsen. 2006. Agile Retrospectives: Making Good Teams Great. Pragmatic Bookshelf.\n\n\nMinahan, Anne. 1986. “Martha’s Rules.” Affilia 1 (2): 53–56. https://doi.org/10.1177/088610998600100206.\n\n\nRogelberg, Steven G. 2018. The Surprising Science of Meetings. Oxford University Press."
  },
  {
    "objectID": "checklists.html#evaluación-del-docente-individual",
    "href": "checklists.html#evaluación-del-docente-individual",
    "title": "24  Listas de verificación y plantillas",
    "section": "24.3 Evaluación del docente individual",
    "text": "24.3 Evaluación del docente individual\nEsta rúbrica es la forma más sencilla de evaluar como enseña una persona. Separa lo positivo (para mantener) de lo negativo (para mejorar) y el contenido (lo que se dice) de la interacción (cómo quien enseña interactúa con las y los estudiantes y gestiona el aula) y la presentación (cómo habla). No siempre está claro en qué categoría va cada cosa, pero la rúbrica ayuda a organizar y comparar los comentarios. Se puede usar en evaluaciones cortas de entre 5 a 15 minutos de clase a evaluaciones en clases más largas.\n\n\n\nPara mejorar\nPara mantener\nConcepto\n\n\n\n\n\n\nContenido\n\n\n\n\nInteracción\n\n\n\n\nPresentación"
  },
  {
    "objectID": "checklists.html#organizando-un-curso-o-taller",
    "href": "checklists.html#organizando-un-curso-o-taller",
    "title": "24  Listas de verificación y plantillas",
    "section": "24.7 Organizando un curso o taller",
    "text": "24.7 Organizando un curso o taller\nEsta lista de plantillas y checklist pueden ser útiles para diferentes etapas del proceso de organizar un curso.\n\n24.7.1 Formuario de registro\nEl formulario de registro o demostración de interés te permite recabar información sobre tus estudiantes, siempre es conveniente conocer a tu audiencia. Las necesidades de información pueden variar de acuerdo el contexto o el tipo de curso que vayas a dictar. En este ejemplo recabamos información sobre\n\nPronombres\nGeografía y lenguaje\nDatos profesionales\nHerramientas\nAccesibilidad\nMantener contacto\n\n\n24.7.1.1 Requisitos legales de protección y uso de datos personales\nDebes tener en cuenta que vas a tener que cumplir con requisitos de almacenamiento y procesamiento de información personal de las personas que se inscriban a tus cursos y completen estos formularios. Para este punto es importante aclarar al inicio del formulario o en el texto donde se solicita que las personas se inscriban una serie de detalles:\n\npara qué se usará la información (Ej: para acomodar la infraestructura del taller de acuerdo a tus necesidades de accesibilidad)\nquién tiene acceso a esa información sin procesar (Ej: el personal contratado de la organización) y procesada (Ej: el equipo docente de una edición del curso).\ndónde y cómo se almacena (Ej: en la base de datos de la universidad que hace de anfitrión del curso)\nexplicar un proceso para que quien quiera borrar o modificar los datos pueda hacerlo.\nexplicar que completando el formulario dan consentimiento a este uso de los datos.\n\n\n\n24.7.1.2 Preguntas del formulario\n\nSección Datos generales:\n\nmail (utilizado para contacto y como identificador único),\nNombre completo (es mejor que solicitar nombre y apellido por separado),\npronombres (para dirigirnos a cada persona correctamente),\npaís desde el cual participa (es un dato útil para conocer tu alcance).\n\nSección Datos profesionales:\n\nNivel educativo completo\n¿cuántos años hace que diste tu primera clase?,\nÁmbito educativo en el que enseña la mayor parte del tiempo,\nTipo de institución en donde enseña la mayor parte del tiempo,\nCantidad de estudiantes esperas en tu próxima clase y\nQué disciplina/s enseñas.\n\nSección de Herramientas: uso y accesibilidad:\nconocimientos de Español (porque es el idioma en el cual dictamos nuestros cursos),\nla experiencia en el uso de Formularios de Google, Documentos de Google, Slack y Zoom (porque son las herramientas que usamos para enseñar y para interactuar, tanto en los cursos como en la comunidad),\ndificultades para participar de talleres en forma remota:\n\nTengo dificultad para ver, aun con anteojos o lentes de contacto\nTengo dificultad para oír, aun con audífono\nTengo dificultades de movilidad que afectan mi interacción con dispositivos electrónicos como el celular o computadora\nTengo dificultad para permanecer delante de una pantalla más de 50 minutos\nTengo dificultad para comprender o recordar\nTengo dificultad para concentrarme\nTengo dificultad para comunicarme\nNo tengo ninguna de estas dificultades\nNo tengo ninguna de estas dificultades\n\nSi la persona marcó que tiene alguna dificultad, se le pregunta ¿cómo podemos facilitar tu participación?\n\nNo tengo ninguna dificultad\nCon un lector de pantalla\nCon materiales con alto contraste y letra grande\nUsando comunicación por voz\nHablando claro, pausado, con buena calidad de audio\nCon subtitulado\nUsando lengua de señas\nUsando comunicación por escrito\nCon pausas frecuentes lejos de la pantalla\nPrefiero no decirlo\n\n¿Tienes alguna de las siguientes dificultades tecnológicas para participar de talleres en forma remota?\n\nTengo una conexión a internet inestable o limitada\nNo tengo internet\nNo tengo computadora, tablet, teléfono móvil, ni ningún otro dispoisitivo con el cual conectarme a internet\nTengo dispositivos para conectarme a internet, pero no andan bien\nNo tengo micrófono\nNo tengo ninguna de estas dificultades\nPrefiero no decirlo\n\nSi la persona marcó que tiene alguna dificultad tecnológica se le pregunta, ¿cómo podemos facilitar tu participación?\n\nNo tengo ninguna dificultad\nFacilitando un número de teléfono como opción a conectar por internet\nPermitiendo participar por escrito\nPermitiendo participar usando la voz\nPrefiero no decirlo\n\n\nSe pide permiso para enviarle información por mail sobre otros cursos y otras noticias de MetaDocencia.\nFinalmente se agrega una pregunta abierta, dando la posibilidad que la persona comparta otra información que considere pertienente.\n\nEn nuestro centro de recursos puedes acceder a una versión editable que te recomendamos duplicar para poder trabajarla sin problemas para tus propios objetivos.\n\n\n\n\n24.7.2 Formulario de Feedback\nEste formulario se comparte al finalizar el taller y tiene como objetivo identificar areas de mejora en el contenido y la dinámica del curso.\n\nAquí puedes acceder a una versión editable que te recomendamos duplicar para poder trabajarla sin problemas para tus propios objetivos."
  },
  {
    "objectID": "checklists.html#documentos-compartido",
    "href": "checklists.html#documentos-compartido",
    "title": "24  Listas de verificación y plantillas",
    "section": "24.8 Documentos compartido",
    "text": "24.8 Documentos compartido\nDurante nuestros cursos utilizamos un documento compartido para tomar notas y resolver ejercicios juntos. Es una forma de elaboración en tiempo real que obliga a reflexionar sobre el material a medida que se lo presenta. Los ejercicios en conjunto son una muy buena opción de evaluación formativa.\nAquí puedes acceder a una plantilla de un documento compartido que te recomendamos duplicar para poder trabajarla sin problemas para tus propios objetivos."
  },
  {
    "objectID": "checklists.html#comunicación-con-estudiantes",
    "href": "checklists.html#comunicación-con-estudiantes",
    "title": "24  Listas de verificación y plantillas",
    "section": "24.9 Comunicación con estudiantes",
    "text": "24.9 Comunicación con estudiantes\n\n24.9.1 Email pre curso\nEste es un texto de ejemplo del mail que se envia a los estudiantes antes de iniciar el curso\nAsunto: [Tutorial de learnr] - Información para conectarte\nHola!\nMuchas gracias por registrarte en el curso {nombre del curso} el {fecha del curso} a las {horario del curso} (Zona horaria UTC-3) organizado por {nombre de las instituciones y comunidades que organizan el curso}. Este mensaje tiene información importante para ayudar a prepararte para el curso. Leelo detenidamente y avisanos si tenés alguna pregunta.\nAl participar de nuestros cursos aceptás este Código de Conducta.\nPara esta capacitación en línea necesitás una computadora con conexión a internet, parlantes y micrófono (o auriculares con micrófono o combinación similar). No hace falta que tengas cámara, aunque si la tenés, podés usarla.\nNecesitamos que tengas instalado {lista de software necesaria}\nPara el curso, vamos a usar la plataforma de videoconferencia Zoom. No es necesario tener un usuario, pero es posible que tengas que instalar algo la primera vez que lo uses. Si nunca usaste Zoom o no sabés si te va a andar esta vez, por favor, hacé clic en https://zoom.us/test para hacer una llamada de prueba y seguir las instrucciones para descargar lo necesario.\nComenzaremos puntualmente. Diez minutos antes de la hora de comienzo, usá el siguiente enlace de zoom (no requiere palabra clave).\nUbicación:\n\nEste enlace sólo será válido para este curso. Por favor, para hacer de nuestra reunión un espacio seguro, no compartas este enlace con nadie.\nTambién por la seguridad de la reunión, es muy importante que ingreses con un nombre similar al que usaste cuando te pre-inscribiste. Tu ingreso será más rápido si lo hacés así y no tenemos que hacerte esperar hasta chequear tu identidad.\nSi llegás luego de la hora de comienzo, tendrás que esperar a que autoricemos tu ingreso. Lo haremos lo antes que podamos sin interrumpir el curso en marcha.\nPor último, nos gusta enseñar en ambientes amigables y distendidos. Por ejemplo, si tu familia humana o animal se asoma a saludar, será bienvenida. Tené el mate a mano o lo que quieras tomar o comer durante el curso. También habrá pausas si te olvidás algo o necesitás hacer alguna escala técnica.\nSi tenés alguna pregunta sobre el taller, la modalidad, o cualquier otra cosa, no dudes en ponerte en contacto.\n¡Nos vemos en el curso!\n{nombre del equipo docente} en nombre del equipo de {nombre de las instituciones/comunidades que organizan el curso}.\n\n\n24.9.2 Email pos curso\nEste es un texto de ejemplo del mail que se envia a los estudiantes despues que termina el curso\nAsunto: {nombre del curso}\nTexto:\n¡Hola y gracias por participar del curso hoy!\nEn este mail encontrarás algunos links que pueden ser de tu interés:\n\nLink al documento compartido que utilizamos hoy:\nLink a un video de este curso (por si te perdiste alguna parte o querés volver a verlo):\nLink a las slides utilizadas en el curso:\n\nRecorda que podés encontrarnos en los siguientes medios:\n\nWeb:\nMail:\nNuestro Slack: ¡Sumate!\nYouTube:\nFacebook:\nMastodon:\n\nPor último, si aún no lo hiciste, te agradecemos que puedas completar nuestra encuesta de fin de curso. Nos ayuda mucho a seguir mejorando,\n¡Gracias!\nSaludos, y hasta el próximo curso.\n\n\n24.9.3 Formulario de feedback despues de un tiempo de tomar la capacitación\n\n\n\n\n\nAveling, Emma-Louise, Peter McCulloch, and Mary Dixon-Woods. 2013. “A Qualitative Study Comparing Experiences of the Surgical Safety Checklist in Hospitals in High-Income and Low-Income Countries.” BMJ Open 3 (8). https://doi.org/10.1136/bmjopen-2013-003039.\n\n\nBiggs, John, and Catherine Tang. 2011. Teaching for Quality Learning at University. Open University Press.\n\n\nFink, L. Dee. 2013. Creating Significant Learning Experiences: An Integrated Approach to Designing College Courses. Jossey-Bass.\n\n\nGawande, Atul. 2007. “The Checklist.” The New Yorker, December.\n\n\nRamsay, G., A. B. Haynes, S. R. Lipsitz, I. Solsky, J. Leitch, A. A. Gawande, and M. Kumar. 2019. “Reducing Surgical Mortality in Scotland by Use of the WHO Surgical Safety Checklist.” BJS, April. https://doi.org/10.1002/bjs.11151.\n\n\nUrbach, David R., Anand Govindarajan, Refik Saskin, Andrew S. Wilton, and Nancy N. Baxter. 2014. “Introduction of Surgical Safety Checklists in Ontario, Canada.” New England Journal of Medicine 370 (11): 1029–38. https://doi.org/10.1056/nejmsa1308261.\n\n\nWiggins, Grant, and Jay McTighe. 2005. Understanding by Design. Association for Supervision & Curriculum Development (ASCD)."
  },
  {
    "objectID": "meetings.html#reunión-de-sprint-por-chat",
    "href": "meetings.html#reunión-de-sprint-por-chat",
    "title": "23  Reuniones, reuniones, reuniones",
    "section": "23.4 Reunión de sprint por chat",
    "text": "23.4 Reunión de sprint por chat\nLa reunión es sincrónica en una herramienta de chat de texto, como Slack. La persona responsable de la reunión (normalmente la persona líder del equipo) comparte la fecha y la hora y la genera con una aplicación de calendario que permite a la gente “aceptar”, “rechazar” o indicar “tal vez”.\nCada reunión tiene una agenda que se comparte el día anterior. En esta agenda, cada punto tiene un tiempo acotado para discutirse y el nombre del moderador de la reunión (meeting master en inglés) y que puede cambiar de una reunión a otra. También compartimos las reglas de la reunión y los objetivos como mensaje en la plataforma. Por ejemplo:\n\nReglas - los temas tienen limite de tiempo para su discusión - evitar discusiones largas - retomar los temas complejos bilateralmente o en grupos.\nObjetivos - Revisar lo hecho hasta ahora, decidir cómo seguir adelante - crear paquetes de trabajo/temas para las próximas dos semanas y asignar quién puede hacer qué hasta la próxima reunión (en la medida de lo posible).\n\n\n23.4.1 Durante la reunión\n\nInicio\n\nLa persona responsable de la reunión saluda escribiendo un mensaje como “Hola, vamos a iniciar la reunión” y pide que reaccionen con su emoji favorito al texto del mensaje de saludo para saber quién está en la reunión.\n\nDesarrollo de la reunión\n\nEl primer punto del orden del día es siempre puntos complicados. Por ejemplo:\n\n\n\nPuntos complicados (5 minutos) ¿Hay algo que te gustaría compartir/discutir? Arreglemos las cosas fáciles enseguida y las más complicadas después del sprint.\n\nLa persona responsable de la reunión escribe el nombre del tema, cuánto tiempo tenemos para discutirlo y especifica cuando termina. La discusión ocurre en el hilo de ese primer mensaje. Si la discusión termina antes del tiempo, la persona responsable de moderar la reunión indica (en el hilo) que pasemos al siguiente tema. Fuera del hilo se escribe un nuevo mensaje con el nombre del siguiente tema, la duración de la discusión, y algún texto como “vamos a discutir xxx durante xx minutos hasta las xx:xx”. Por ejemplo:\n\nTema 2 (10 minutos) Estado actual, lo que ha sucedido desde la semana pasada (o la última reunión, o el último mes o el último sprint)\npunto 1 punto .. punto n\n\n\nPróximas tareas:\ntarea 1 tarea n\n\nA veces, un tema es dirigido por una persona que no es la responsable de moderar la reunión. En ese caso, la persona responsable de la reunión menciona quién va a dirigir este tema. Esto suele ocurrir cuando una persona es responsable de una actividad o tiene más información que quien modera sobre ese punto.\nTodos estos datos compartidos durante la reunión en la plataforma están también en la agenda.\nDurante la reunión la gente puede ir y venir a los diferentes hilos de cada tema y puede comentar. Esta posibilidad es muy útil para las personas que se incorporan tarde a la reunión.\n\nAl final de la reunión\n\nQuien modera hace un resumen de las decisiones. Los puntos/decisiones centrales suelen ir a los temas correspondientes en el software que usen para el seguimiento del proyecto (GitLab/Github, Asana, AirTable, etc), para hacer un seguimiento fuera de la reunión por chat. El resumen tiene el siguiente aspecto:\n\n\n\nResumen de la reunión:\nPuntos centrales: decisión, tarea, responsables. Tema 1: decisión, tarea, responsables. Tema 2: decisión, tarea, responsables."
  },
  {
    "objectID": "meetings.html#consideraciones",
    "href": "meetings.html#consideraciones",
    "title": "23  Reuniones, reuniones, reuniones",
    "section": "23.5 Consideraciones",
    "text": "23.5 Consideraciones\nYanina ha participado en este tipo de reuniones con grupos de entre 6 y 20 personas. Algunos equipos son estables y las personas se conocen entre sí. Otros equipos es la primera vez que trabajan juntos. En algunos equipos las herramientas como Slack eran nuevas, en otros equipos utilizan este tipo de plataforma regularmente.\nEl conocimiento de la herramienta de chat es la barrera más grande. El rol de quien modera es muy importante para el éxito de la reunión.\n\nPros\n\nLa discusión está ahí para la gente que no puede unirse y para el resto de los grupos que trabajan en el proyecto.\n\n\nEs más fácil participar que en una reunión sincrónica de Zoom (especialmente si tienes tareas de cuidado, mala conexión a Internet o aún no dominas el idioma que se utiliza en la discusión o estás en una zona horaria muy alejada del horario de la reunión).\nLos tiempos se respetan más que en una videoconferencia.\nLa discusión es ordenada.\n\nContras\n\nHay que prestar atención a las opiniones o consultas posteriores a la reunión de las personas que no pudieron unirse de forma sincrónica.\n\n\nHay que ser escribir y leer rápido.\nLas decisiones más difíciles se acaban tomando en las reuniones sincrónicas por videoconferencia (hay una necesidad de estar cara a cara para ese tipo de decisiones)"
  },
  {
    "objectID": "finale.html#segunda-edición",
    "href": "finale.html#segunda-edición",
    "title": "18  ¿Por qué enseñamos?",
    "section": "18.1 Segunda edición",
    "text": "18.1 Segunda edición\nEstás leyendo la segunda edición en progreso y en castellano de Enseñar Tecnología en Comunidad (Teaching Tech Together). Este capítulo está siendo objeto de una profunda reestructuración y puede resultar confuso o incompleto"
  },
  {
    "objectID": "paid.html#segunda-edición",
    "href": "paid.html#segunda-edición",
    "title": "17  Como vivir de enseñar",
    "section": "17.1 Segunda edición",
    "text": "17.1 Segunda edición\nEstás leyendo la segunda edición en progreso y en castellano de Enseñar Tecnología en Comunidad (Teaching Tech Together). Este capítulo es actualmente un mero borrador de ideas, y no recomendamos su lectura."
  }
]